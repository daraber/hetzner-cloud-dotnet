// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Hetzner.Cloud.Client;
using Hetzner.Cloud.Model;
using System.Diagnostics.CodeAnalysis;

namespace Hetzner.Cloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPrimaryIpsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PrimaryIpsApiEvents Events { get; }

        /// <summary>
        /// Assign a Primary IP to a resource
        /// </summary>
        /// <remarks>
        /// Assign a [Primary IP](#primary-ips) to a resource.  A [Server](#servers) can only have one [Primary IP](#primary-ips) of type &#x60;ipv4&#x60; and one of type &#x60;ipv6&#x60; assigned. If you need more IPs use [Floating IPs](#floating-ips).  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  #### Error Codes specific to this Call  | Code                          | Description                                                                      | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The [Server](#servers) is running, but needs to be powered off                   | | &#x60;primary_ip_already_assigned&#x60; | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an IPv4 address                               | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an IPv6 address                               | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="assignPrimaryIpToResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignPrimaryIpToResourceApiResponse"/>&gt;</returns>
        Task<IAssignPrimaryIpToResourceApiResponse> AssignPrimaryIpToResourceAsync(long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Assign a Primary IP to a resource
        /// </summary>
        /// <remarks>
        /// Assign a [Primary IP](#primary-ips) to a resource.  A [Server](#servers) can only have one [Primary IP](#primary-ips) of type &#x60;ipv4&#x60; and one of type &#x60;ipv6&#x60; assigned. If you need more IPs use [Floating IPs](#floating-ips).  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  #### Error Codes specific to this Call  | Code                          | Description                                                                      | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The [Server](#servers) is running, but needs to be powered off                   | | &#x60;primary_ip_already_assigned&#x60; | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an IPv4 address                               | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an IPv6 address                               | 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="assignPrimaryIpToResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignPrimaryIpToResourceApiResponse"/>?&gt;</returns>
        Task<IAssignPrimaryIpToResourceApiResponse?> AssignPrimaryIpToResourceOrDefaultAsync(long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change Primary IP Protection
        /// </summary>
        /// <remarks>
        /// Changes the protection configuration of a [Primary IP](#primary-ips).  A [Primary IPs](#primary-ips) deletion protection can only be enabled if its &#x60;auto_delete&#x60; property is set to &#x60;false&#x60;. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangePrimaryIpProtectionApiResponse"/>&gt;</returns>
        Task<IChangePrimaryIpProtectionApiResponse> ChangePrimaryIpProtectionAsync(long id, Option<Protection> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change Primary IP Protection
        /// </summary>
        /// <remarks>
        /// Changes the protection configuration of a [Primary IP](#primary-ips).  A [Primary IPs](#primary-ips) deletion protection can only be enabled if its &#x60;auto_delete&#x60; property is set to &#x60;false&#x60;. 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangePrimaryIpProtectionApiResponse"/>?&gt;</returns>
        Task<IChangePrimaryIpProtectionApiResponse?> ChangePrimaryIpProtectionOrDefaultAsync(long id, Option<Protection> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change reverse DNS records for a Primary IP
        /// </summary>
        /// <remarks>
        /// Change the reverse DNS records for this [Primary IP](#primary-ips).  Allows to modify the PTR records set for the IP address. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body">The &#x60;ip&#x60; attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the &#x60;/64&#x60; subnet of the [Primary IP](#primary-ips).  The &#x60;dns_ptr&#x60; attribute specifies the hostname used for the IP address.  For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeReverseDnsRecordsForPrimaryIpApiResponse"/>&gt;</returns>
        Task<IChangeReverseDnsRecordsForPrimaryIpApiResponse> ChangeReverseDnsRecordsForPrimaryIpAsync(long id, Option<DnsPtr> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change reverse DNS records for a Primary IP
        /// </summary>
        /// <remarks>
        /// Change the reverse DNS records for this [Primary IP](#primary-ips).  Allows to modify the PTR records set for the IP address. 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body">The &#x60;ip&#x60; attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the &#x60;/64&#x60; subnet of the [Primary IP](#primary-ips).  The &#x60;dns_ptr&#x60; attribute specifies the hostname used for the IP address.  For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeReverseDnsRecordsForPrimaryIpApiResponse"/>?&gt;</returns>
        Task<IChangeReverseDnsRecordsForPrimaryIpApiResponse?> ChangeReverseDnsRecordsForPrimaryIpOrDefaultAsync(long id, Option<DnsPtr> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Primary IP
        /// </summary>
        /// <remarks>
        /// Create a new [Primary IP](#primary-ips).  Can optionally be assigned to a resource by providing an &#x60;assignee_id&#x60; and &#x60;assignee_type&#x60;.  If not assigned to a resource the &#x60;datacenter&#x60; key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.  A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.  #### Call specific error codes  | Code                          | Description                                                              | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The specified [Server](#servers) is running, but needs to be powered off | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an ipv4 address                       | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an ipv6 address                       | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPrimaryIpRequest">Request Body for creating a new [Primary IP](#primary-ips).  The &#x60;datacenter&#x60; and &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; attributes are mutually exclusive.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePrimaryIpApiResponse"/>&gt;</returns>
        Task<ICreatePrimaryIpApiResponse> CreatePrimaryIpAsync(Option<CreatePrimaryIpRequest> createPrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Primary IP
        /// </summary>
        /// <remarks>
        /// Create a new [Primary IP](#primary-ips).  Can optionally be assigned to a resource by providing an &#x60;assignee_id&#x60; and &#x60;assignee_type&#x60;.  If not assigned to a resource the &#x60;datacenter&#x60; key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.  A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.  #### Call specific error codes  | Code                          | Description                                                              | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The specified [Server](#servers) is running, but needs to be powered off | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an ipv4 address                       | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an ipv6 address                       | 
        /// </remarks>
        /// <param name="createPrimaryIpRequest">Request Body for creating a new [Primary IP](#primary-ips).  The &#x60;datacenter&#x60; and &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; attributes are mutually exclusive.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePrimaryIpApiResponse"/>?&gt;</returns>
        Task<ICreatePrimaryIpApiResponse?> CreatePrimaryIpOrDefaultAsync(Option<CreatePrimaryIpRequest> createPrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Primary IP
        /// </summary>
        /// <remarks>
        /// Deletes a [Primary IP](#primary-ips).  If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrimaryIpApiResponse"/>&gt;</returns>
        Task<IDeletePrimaryIpApiResponse> DeletePrimaryIpAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Primary IP
        /// </summary>
        /// <remarks>
        /// Deletes a [Primary IP](#primary-ips).  If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed. 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrimaryIpApiResponse"/>?&gt;</returns>
        Task<IDeletePrimaryIpApiResponse?> DeletePrimaryIpOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a Primary IP
        /// </summary>
        /// <remarks>
        /// Returns a [Primary IP](#primary-ips).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpApiResponse"/>&gt;</returns>
        Task<IGetPrimaryIpApiResponse> GetPrimaryIpAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a Primary IP
        /// </summary>
        /// <remarks>
        /// Returns a [Primary IP](#primary-ips).
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpApiResponse"/>?&gt;</returns>
        Task<IGetPrimaryIpApiResponse?> GetPrimaryIpOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an Action
        /// </summary>
        /// <remarks>
        /// Returns a single [Action](#actions).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpActionApiResponse"/>&gt;</returns>
        Task<IGetPrimaryIpActionApiResponse> GetPrimaryIpActionAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an Action
        /// </summary>
        /// <remarks>
        /// Returns a single [Action](#actions).
        /// </remarks>
        /// <param name="id">ID of the Action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpActionApiResponse"/>?&gt;</returns>
        Task<IGetPrimaryIpActionApiResponse?> GetPrimaryIpActionOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all Actions
        /// </summary>
        /// <remarks>
        /// Lists multiple [Actions](#actions).  Use the provided URI parameters to modify the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the actions by ID. Can be used multiple times. The response will only contain actions matching the specified IDs.  (optional)</param>
        /// <param name="sort">Sort actions by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="status">Filter the actions by status. Can be used multiple times. The response will only contain actions matching the specified statuses.  (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpActionsApiResponse"/>&gt;</returns>
        Task<IListPrimaryIpActionsApiResponse> ListPrimaryIpActionsAsync(Option<long> id = default, Option<string> sort = default, Option<string> status = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all Actions
        /// </summary>
        /// <remarks>
        /// Lists multiple [Actions](#actions).  Use the provided URI parameters to modify the result. 
        /// </remarks>
        /// <param name="id">Filter the actions by ID. Can be used multiple times. The response will only contain actions matching the specified IDs.  (optional)</param>
        /// <param name="sort">Sort actions by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="status">Filter the actions by status. Can be used multiple times. The response will only contain actions matching the specified statuses.  (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpActionsApiResponse"/>?&gt;</returns>
        Task<IListPrimaryIpActionsApiResponse?> ListPrimaryIpActionsOrDefaultAsync(Option<long> id = default, Option<string> sort = default, Option<string> status = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all Primary IPs
        /// </summary>
        /// <remarks>
        /// List multiple [Primary IPs](#primary-ips).  Use the provided URI parameters to modify the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="ip">Filter results by IP address. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpsApiResponse"/>&gt;</returns>
        Task<IListPrimaryIpsApiResponse> ListPrimaryIpsAsync(Option<string> name = default, Option<string> labelSelector = default, Option<string> ip = default, Option<long> page = default, Option<long> perPage = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all Primary IPs
        /// </summary>
        /// <remarks>
        /// List multiple [Primary IPs](#primary-ips).  Use the provided URI parameters to modify the result. 
        /// </remarks>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="ip">Filter results by IP address. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpsApiResponse"/>?&gt;</returns>
        Task<IListPrimaryIpsApiResponse?> ListPrimaryIpsOrDefaultAsync(Option<string> name = default, Option<string> labelSelector = default, Option<string> ip = default, Option<long> page = default, Option<long> perPage = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Primary IP
        /// </summary>
        /// <remarks>
        /// Update the [Primary IP](#primary-ips).  Note that when updating [Labels](#labels), the [Primary IPs](#primary-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.  If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code &#x60;conflict&#x60; will be returned. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="replacePrimaryIpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePrimaryIpApiResponse"/>&gt;</returns>
        Task<IReplacePrimaryIpApiResponse> ReplacePrimaryIpAsync(long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Primary IP
        /// </summary>
        /// <remarks>
        /// Update the [Primary IP](#primary-ips).  Note that when updating [Labels](#labels), the [Primary IPs](#primary-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.  If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code &#x60;conflict&#x60; will be returned. 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="replacePrimaryIpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePrimaryIpApiResponse"/>?&gt;</returns>
        Task<IReplacePrimaryIpApiResponse?> ReplacePrimaryIpOrDefaultAsync(long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unassign a Primary IP from a resource
        /// </summary>
        /// <remarks>
        /// Unassign a [Primary IP](#primary-ips) from a resource.  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  A [Server](#server) requires at least one network interface (public or private) to be powered on.  #### Error Codes specific to this Call  | Code                              | Description                                                   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;server_not_stopped&#x60;              | The [Server](#server) is running, but needs to be powered off | | &#x60;server_is_load_balancer_target&#x60;  | The [Server](#server) IPv4 address is a loadbalancer target   | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnassignPrimaryIpFromResourceApiResponse"/>&gt;</returns>
        Task<IUnassignPrimaryIpFromResourceApiResponse> UnassignPrimaryIpFromResourceAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unassign a Primary IP from a resource
        /// </summary>
        /// <remarks>
        /// Unassign a [Primary IP](#primary-ips) from a resource.  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  A [Server](#server) requires at least one network interface (public or private) to be powered on.  #### Error Codes specific to this Call  | Code                              | Description                                                   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;server_not_stopped&#x60;              | The [Server](#server) is running, but needs to be powered off | | &#x60;server_is_load_balancer_target&#x60;  | The [Server](#server) IPv4 address is a loadbalancer target   | 
        /// </remarks>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnassignPrimaryIpFromResourceApiResponse"/>?&gt;</returns>
        Task<IUnassignPrimaryIpFromResourceApiResponse?> UnassignPrimaryIpFromResourceOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAssignPrimaryIpToResourceApiResponse"/>
    /// </summary>
    public interface IAssignPrimaryIpToResourceApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.AssignPrimaryIpToResourceResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IChangePrimaryIpProtectionApiResponse"/>
    /// </summary>
    public interface IChangePrimaryIpProtectionApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.ChangePrimaryIpProtectionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IChangeReverseDnsRecordsForPrimaryIpApiResponse"/>
    /// </summary>
    public interface IChangeReverseDnsRecordsForPrimaryIpApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.ChangeReverseDnsRecordsForPrimaryIpResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreatePrimaryIpApiResponse"/>
    /// </summary>
    public interface ICreatePrimaryIpApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.CreatePrimaryIpResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePrimaryIpApiResponse"/>
    /// </summary>
    public interface IDeletePrimaryIpApiResponse : Hetzner.Cloud.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPrimaryIpApiResponse"/>
    /// </summary>
    public interface IGetPrimaryIpApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.GetPrimaryIpResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPrimaryIpActionApiResponse"/>
    /// </summary>
    public interface IGetPrimaryIpActionApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.GetActionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListPrimaryIpActionsApiResponse"/>
    /// </summary>
    public interface IListPrimaryIpActionsApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.ListActionsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListPrimaryIpsApiResponse"/>
    /// </summary>
    public interface IListPrimaryIpsApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.ListPrimaryIpsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IReplacePrimaryIpApiResponse"/>
    /// </summary>
    public interface IReplacePrimaryIpApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.ReplacePrimaryIpResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUnassignPrimaryIpFromResourceApiResponse"/>
    /// </summary>
    public interface IUnassignPrimaryIpFromResourceApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.UnassignPrimaryIpFromResourceResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PrimaryIpsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAssignPrimaryIpToResource;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAssignPrimaryIpToResource;

        internal void ExecuteOnAssignPrimaryIpToResource(PrimaryIpsApi.AssignPrimaryIpToResourceApiResponse apiResponse)
        {
            OnAssignPrimaryIpToResource?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAssignPrimaryIpToResource(Exception exception)
        {
            OnErrorAssignPrimaryIpToResource?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangePrimaryIpProtection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangePrimaryIpProtection;

        internal void ExecuteOnChangePrimaryIpProtection(PrimaryIpsApi.ChangePrimaryIpProtectionApiResponse apiResponse)
        {
            OnChangePrimaryIpProtection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangePrimaryIpProtection(Exception exception)
        {
            OnErrorChangePrimaryIpProtection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeReverseDnsRecordsForPrimaryIp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeReverseDnsRecordsForPrimaryIp;

        internal void ExecuteOnChangeReverseDnsRecordsForPrimaryIp(PrimaryIpsApi.ChangeReverseDnsRecordsForPrimaryIpApiResponse apiResponse)
        {
            OnChangeReverseDnsRecordsForPrimaryIp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeReverseDnsRecordsForPrimaryIp(Exception exception)
        {
            OnErrorChangeReverseDnsRecordsForPrimaryIp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreatePrimaryIp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreatePrimaryIp;

        internal void ExecuteOnCreatePrimaryIp(PrimaryIpsApi.CreatePrimaryIpApiResponse apiResponse)
        {
            OnCreatePrimaryIp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePrimaryIp(Exception exception)
        {
            OnErrorCreatePrimaryIp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePrimaryIp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePrimaryIp;

        internal void ExecuteOnDeletePrimaryIp(PrimaryIpsApi.DeletePrimaryIpApiResponse apiResponse)
        {
            OnDeletePrimaryIp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePrimaryIp(Exception exception)
        {
            OnErrorDeletePrimaryIp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPrimaryIp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPrimaryIp;

        internal void ExecuteOnGetPrimaryIp(PrimaryIpsApi.GetPrimaryIpApiResponse apiResponse)
        {
            OnGetPrimaryIp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPrimaryIp(Exception exception)
        {
            OnErrorGetPrimaryIp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPrimaryIpAction;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPrimaryIpAction;

        internal void ExecuteOnGetPrimaryIpAction(PrimaryIpsApi.GetPrimaryIpActionApiResponse apiResponse)
        {
            OnGetPrimaryIpAction?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPrimaryIpAction(Exception exception)
        {
            OnErrorGetPrimaryIpAction?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPrimaryIpActions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPrimaryIpActions;

        internal void ExecuteOnListPrimaryIpActions(PrimaryIpsApi.ListPrimaryIpActionsApiResponse apiResponse)
        {
            OnListPrimaryIpActions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPrimaryIpActions(Exception exception)
        {
            OnErrorListPrimaryIpActions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPrimaryIps;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPrimaryIps;

        internal void ExecuteOnListPrimaryIps(PrimaryIpsApi.ListPrimaryIpsApiResponse apiResponse)
        {
            OnListPrimaryIps?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPrimaryIps(Exception exception)
        {
            OnErrorListPrimaryIps?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplacePrimaryIp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplacePrimaryIp;

        internal void ExecuteOnReplacePrimaryIp(PrimaryIpsApi.ReplacePrimaryIpApiResponse apiResponse)
        {
            OnReplacePrimaryIp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplacePrimaryIp(Exception exception)
        {
            OnErrorReplacePrimaryIp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnassignPrimaryIpFromResource;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnassignPrimaryIpFromResource;

        internal void ExecuteOnUnassignPrimaryIpFromResource(PrimaryIpsApi.UnassignPrimaryIpFromResourceApiResponse apiResponse)
        {
            OnUnassignPrimaryIpFromResource?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnassignPrimaryIpFromResource(Exception exception)
        {
            OnErrorUnassignPrimaryIpFromResource?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PrimaryIpsApi : IPrimaryIpsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PrimaryIpsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PrimaryIpsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrimaryIpsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrimaryIpsApi(ILogger<PrimaryIpsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PrimaryIpsApiEvents primaryIpsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PrimaryIpsApi>();
            HttpClient = httpClient;
            Events = primaryIpsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAssignPrimaryIpToResource(ref long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assignPrimaryIpToResourceRequest"></param>
        /// <returns></returns>
        private void ValidateAssignPrimaryIpToResource(Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest)
        {
            if (assignPrimaryIpToResourceRequest.IsSet && assignPrimaryIpToResourceRequest.Value == null)
                throw new ArgumentNullException(nameof(assignPrimaryIpToResourceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assignPrimaryIpToResourceRequest"></param>
        private void AfterAssignPrimaryIpToResourceDefaultImplementation(IAssignPrimaryIpToResourceApiResponse apiResponseLocalVar, long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest)
        {
            bool suppressDefaultLog = false;
            AfterAssignPrimaryIpToResource(ref suppressDefaultLog, apiResponseLocalVar, id, assignPrimaryIpToResourceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assignPrimaryIpToResourceRequest"></param>
        partial void AfterAssignPrimaryIpToResource(ref bool suppressDefaultLog, IAssignPrimaryIpToResourceApiResponse apiResponseLocalVar, long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assignPrimaryIpToResourceRequest"></param>
        private void OnErrorAssignPrimaryIpToResourceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAssignPrimaryIpToResource(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, assignPrimaryIpToResourceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assignPrimaryIpToResourceRequest"></param>
        partial void OnErrorAssignPrimaryIpToResource(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest);

        /// <summary>
        /// Assign a Primary IP to a resource Assign a [Primary IP](#primary-ips) to a resource.  A [Server](#servers) can only have one [Primary IP](#primary-ips) of type &#x60;ipv4&#x60; and one of type &#x60;ipv6&#x60; assigned. If you need more IPs use [Floating IPs](#floating-ips).  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  #### Error Codes specific to this Call  | Code                          | Description                                                                      | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The [Server](#servers) is running, but needs to be powered off                   | | &#x60;primary_ip_already_assigned&#x60; | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an IPv4 address                               | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an IPv6 address                               | 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="assignPrimaryIpToResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignPrimaryIpToResourceApiResponse"/>&gt;</returns>
        public async Task<IAssignPrimaryIpToResourceApiResponse?> AssignPrimaryIpToResourceOrDefaultAsync(long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AssignPrimaryIpToResourceAsync(id, assignPrimaryIpToResourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Assign a Primary IP to a resource Assign a [Primary IP](#primary-ips) to a resource.  A [Server](#servers) can only have one [Primary IP](#primary-ips) of type &#x60;ipv4&#x60; and one of type &#x60;ipv6&#x60; assigned. If you need more IPs use [Floating IPs](#floating-ips).  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  #### Error Codes specific to this Call  | Code                          | Description                                                                      | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The [Server](#servers) is running, but needs to be powered off                   | | &#x60;primary_ip_already_assigned&#x60; | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an IPv4 address                               | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an IPv6 address                               | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="assignPrimaryIpToResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignPrimaryIpToResourceApiResponse"/>&gt;</returns>
        public async Task<IAssignPrimaryIpToResourceApiResponse> AssignPrimaryIpToResourceAsync(long id, Option<AssignPrimaryIpToResourceRequest> assignPrimaryIpToResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAssignPrimaryIpToResource(assignPrimaryIpToResourceRequest);

                FormatAssignPrimaryIpToResource(ref id, assignPrimaryIpToResourceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}/actions/assign"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}/actions/assign");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (assignPrimaryIpToResourceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (assignPrimaryIpToResourceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assignPrimaryIpToResourceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AssignPrimaryIpToResourceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssignPrimaryIpToResourceApiResponse>();

                        AssignPrimaryIpToResourceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}/actions/assign", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAssignPrimaryIpToResourceDefaultImplementation(apiResponseLocalVar, id, assignPrimaryIpToResourceRequest);

                        Events.ExecuteOnAssignPrimaryIpToResource(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAssignPrimaryIpToResourceDefaultImplementation(e, "/primary_ips/{id}/actions/assign", uriBuilderLocalVar.Path, id, assignPrimaryIpToResourceRequest);
                Events.ExecuteOnErrorAssignPrimaryIpToResource(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AssignPrimaryIpToResourceApiResponse"/>
        /// </summary>
        public partial class AssignPrimaryIpToResourceApiResponse : Hetzner.Cloud.Client.ApiResponse, IAssignPrimaryIpToResourceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AssignPrimaryIpToResourceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AssignPrimaryIpToResourceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AssignPrimaryIpToResourceApiResponse(ILogger<AssignPrimaryIpToResourceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.AssignPrimaryIpToResourceResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.AssignPrimaryIpToResourceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.AssignPrimaryIpToResourceResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangePrimaryIpProtection(ref long id, ref Option<Protection> body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateChangePrimaryIpProtection(Option<Protection> body)
        {
            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterChangePrimaryIpProtectionDefaultImplementation(IChangePrimaryIpProtectionApiResponse apiResponseLocalVar, long id, Option<Protection> body)
        {
            bool suppressDefaultLog = false;
            AfterChangePrimaryIpProtection(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterChangePrimaryIpProtection(ref bool suppressDefaultLog, IChangePrimaryIpProtectionApiResponse apiResponseLocalVar, long id, Option<Protection> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorChangePrimaryIpProtectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<Protection> body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorChangePrimaryIpProtection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorChangePrimaryIpProtection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<Protection> body);

        /// <summary>
        /// Change Primary IP Protection Changes the protection configuration of a [Primary IP](#primary-ips).  A [Primary IPs](#primary-ips) deletion protection can only be enabled if its &#x60;auto_delete&#x60; property is set to &#x60;false&#x60;. 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangePrimaryIpProtectionApiResponse"/>&gt;</returns>
        public async Task<IChangePrimaryIpProtectionApiResponse?> ChangePrimaryIpProtectionOrDefaultAsync(long id, Option<Protection> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangePrimaryIpProtectionAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change Primary IP Protection Changes the protection configuration of a [Primary IP](#primary-ips).  A [Primary IPs](#primary-ips) deletion protection can only be enabled if its &#x60;auto_delete&#x60; property is set to &#x60;false&#x60;. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangePrimaryIpProtectionApiResponse"/>&gt;</returns>
        public async Task<IChangePrimaryIpProtectionApiResponse> ChangePrimaryIpProtectionAsync(long id, Option<Protection> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangePrimaryIpProtection(body);

                FormatChangePrimaryIpProtection(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}/actions/change_protection"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}/actions/change_protection");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangePrimaryIpProtectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangePrimaryIpProtectionApiResponse>();

                        ChangePrimaryIpProtectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}/actions/change_protection", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangePrimaryIpProtectionDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnChangePrimaryIpProtection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangePrimaryIpProtectionDefaultImplementation(e, "/primary_ips/{id}/actions/change_protection", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorChangePrimaryIpProtection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangePrimaryIpProtectionApiResponse"/>
        /// </summary>
        public partial class ChangePrimaryIpProtectionApiResponse : Hetzner.Cloud.Client.ApiResponse, IChangePrimaryIpProtectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangePrimaryIpProtectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangePrimaryIpProtectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangePrimaryIpProtectionApiResponse(ILogger<ChangePrimaryIpProtectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ChangePrimaryIpProtectionResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ChangePrimaryIpProtectionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.ChangePrimaryIpProtectionResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeReverseDnsRecordsForPrimaryIp(ref long id, ref Option<DnsPtr> body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateChangeReverseDnsRecordsForPrimaryIp(Option<DnsPtr> body)
        {
            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterChangeReverseDnsRecordsForPrimaryIpDefaultImplementation(IChangeReverseDnsRecordsForPrimaryIpApiResponse apiResponseLocalVar, long id, Option<DnsPtr> body)
        {
            bool suppressDefaultLog = false;
            AfterChangeReverseDnsRecordsForPrimaryIp(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterChangeReverseDnsRecordsForPrimaryIp(ref bool suppressDefaultLog, IChangeReverseDnsRecordsForPrimaryIpApiResponse apiResponseLocalVar, long id, Option<DnsPtr> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorChangeReverseDnsRecordsForPrimaryIpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<DnsPtr> body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorChangeReverseDnsRecordsForPrimaryIp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorChangeReverseDnsRecordsForPrimaryIp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<DnsPtr> body);

        /// <summary>
        /// Change reverse DNS records for a Primary IP Change the reverse DNS records for this [Primary IP](#primary-ips).  Allows to modify the PTR records set for the IP address. 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body">The &#x60;ip&#x60; attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the &#x60;/64&#x60; subnet of the [Primary IP](#primary-ips).  The &#x60;dns_ptr&#x60; attribute specifies the hostname used for the IP address.  For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeReverseDnsRecordsForPrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IChangeReverseDnsRecordsForPrimaryIpApiResponse?> ChangeReverseDnsRecordsForPrimaryIpOrDefaultAsync(long id, Option<DnsPtr> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeReverseDnsRecordsForPrimaryIpAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change reverse DNS records for a Primary IP Change the reverse DNS records for this [Primary IP](#primary-ips).  Allows to modify the PTR records set for the IP address. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="body">The &#x60;ip&#x60; attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the &#x60;/64&#x60; subnet of the [Primary IP](#primary-ips).  The &#x60;dns_ptr&#x60; attribute specifies the hostname used for the IP address.  For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeReverseDnsRecordsForPrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IChangeReverseDnsRecordsForPrimaryIpApiResponse> ChangeReverseDnsRecordsForPrimaryIpAsync(long id, Option<DnsPtr> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeReverseDnsRecordsForPrimaryIp(body);

                FormatChangeReverseDnsRecordsForPrimaryIp(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}/actions/change_dns_ptr"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}/actions/change_dns_ptr");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeReverseDnsRecordsForPrimaryIpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeReverseDnsRecordsForPrimaryIpApiResponse>();

                        ChangeReverseDnsRecordsForPrimaryIpApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}/actions/change_dns_ptr", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeReverseDnsRecordsForPrimaryIpDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnChangeReverseDnsRecordsForPrimaryIp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeReverseDnsRecordsForPrimaryIpDefaultImplementation(e, "/primary_ips/{id}/actions/change_dns_ptr", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorChangeReverseDnsRecordsForPrimaryIp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeReverseDnsRecordsForPrimaryIpApiResponse"/>
        /// </summary>
        public partial class ChangeReverseDnsRecordsForPrimaryIpApiResponse : Hetzner.Cloud.Client.ApiResponse, IChangeReverseDnsRecordsForPrimaryIpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeReverseDnsRecordsForPrimaryIpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeReverseDnsRecordsForPrimaryIpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeReverseDnsRecordsForPrimaryIpApiResponse(ILogger<ChangeReverseDnsRecordsForPrimaryIpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ChangeReverseDnsRecordsForPrimaryIpResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ChangeReverseDnsRecordsForPrimaryIpResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.ChangeReverseDnsRecordsForPrimaryIpResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreatePrimaryIp(Option<CreatePrimaryIpRequest> createPrimaryIpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPrimaryIpRequest"></param>
        /// <returns></returns>
        private void ValidateCreatePrimaryIp(Option<CreatePrimaryIpRequest> createPrimaryIpRequest)
        {
            if (createPrimaryIpRequest.IsSet && createPrimaryIpRequest.Value == null)
                throw new ArgumentNullException(nameof(createPrimaryIpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPrimaryIpRequest"></param>
        private void AfterCreatePrimaryIpDefaultImplementation(ICreatePrimaryIpApiResponse apiResponseLocalVar, Option<CreatePrimaryIpRequest> createPrimaryIpRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreatePrimaryIp(ref suppressDefaultLog, apiResponseLocalVar, createPrimaryIpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPrimaryIpRequest"></param>
        partial void AfterCreatePrimaryIp(ref bool suppressDefaultLog, ICreatePrimaryIpApiResponse apiResponseLocalVar, Option<CreatePrimaryIpRequest> createPrimaryIpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPrimaryIpRequest"></param>
        private void OnErrorCreatePrimaryIpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreatePrimaryIpRequest> createPrimaryIpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePrimaryIp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createPrimaryIpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPrimaryIpRequest"></param>
        partial void OnErrorCreatePrimaryIp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreatePrimaryIpRequest> createPrimaryIpRequest);

        /// <summary>
        /// Create a Primary IP Create a new [Primary IP](#primary-ips).  Can optionally be assigned to a resource by providing an &#x60;assignee_id&#x60; and &#x60;assignee_type&#x60;.  If not assigned to a resource the &#x60;datacenter&#x60; key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.  A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.  #### Call specific error codes  | Code                          | Description                                                              | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The specified [Server](#servers) is running, but needs to be powered off | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an ipv4 address                       | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an ipv6 address                       | 
        /// </summary>
        /// <param name="createPrimaryIpRequest">Request Body for creating a new [Primary IP](#primary-ips).  The &#x60;datacenter&#x60; and &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; attributes are mutually exclusive.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<ICreatePrimaryIpApiResponse?> CreatePrimaryIpOrDefaultAsync(Option<CreatePrimaryIpRequest> createPrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePrimaryIpAsync(createPrimaryIpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a Primary IP Create a new [Primary IP](#primary-ips).  Can optionally be assigned to a resource by providing an &#x60;assignee_id&#x60; and &#x60;assignee_type&#x60;.  If not assigned to a resource the &#x60;datacenter&#x60; key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.  A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.  #### Call specific error codes  | Code                          | Description                                                              | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | &#x60;server_not_stopped&#x60;          | The specified [Server](#servers) is running, but needs to be powered off | | &#x60;server_has_ipv4&#x60;             | The [Server](#servers) already has an ipv4 address                       | | &#x60;server_has_ipv6&#x60;             | The [Server](#servers) already has an ipv6 address                       | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPrimaryIpRequest">Request Body for creating a new [Primary IP](#primary-ips).  The &#x60;datacenter&#x60; and &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; attributes are mutually exclusive.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<ICreatePrimaryIpApiResponse> CreatePrimaryIpAsync(Option<CreatePrimaryIpRequest> createPrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePrimaryIp(createPrimaryIpRequest);

                FormatCreatePrimaryIp(createPrimaryIpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips");

                    if (createPrimaryIpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createPrimaryIpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPrimaryIpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreatePrimaryIpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePrimaryIpApiResponse>();

                        CreatePrimaryIpApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreatePrimaryIpDefaultImplementation(apiResponseLocalVar, createPrimaryIpRequest);

                        Events.ExecuteOnCreatePrimaryIp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePrimaryIpDefaultImplementation(e, "/primary_ips", uriBuilderLocalVar.Path, createPrimaryIpRequest);
                Events.ExecuteOnErrorCreatePrimaryIp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePrimaryIpApiResponse"/>
        /// </summary>
        public partial class CreatePrimaryIpApiResponse : Hetzner.Cloud.Client.ApiResponse, ICreatePrimaryIpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePrimaryIpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePrimaryIpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePrimaryIpApiResponse(ILogger<CreatePrimaryIpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.CreatePrimaryIpResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.CreatePrimaryIpResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.CreatePrimaryIpResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePrimaryIp(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeletePrimaryIpDefaultImplementation(IDeletePrimaryIpApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterDeletePrimaryIp(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeletePrimaryIp(ref bool suppressDefaultLog, IDeletePrimaryIpApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeletePrimaryIpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePrimaryIp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeletePrimaryIp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Delete a Primary IP Deletes a [Primary IP](#primary-ips).  If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed. 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IDeletePrimaryIpApiResponse?> DeletePrimaryIpOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePrimaryIpAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a Primary IP Deletes a [Primary IP](#primary-ips).  If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IDeletePrimaryIpApiResponse> DeletePrimaryIpAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletePrimaryIp(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePrimaryIpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePrimaryIpApiResponse>();

                        DeletePrimaryIpApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePrimaryIpDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeletePrimaryIp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePrimaryIpDefaultImplementation(e, "/primary_ips/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeletePrimaryIp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePrimaryIpApiResponse"/>
        /// </summary>
        public partial class DeletePrimaryIpApiResponse : Hetzner.Cloud.Client.ApiResponse, IDeletePrimaryIpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePrimaryIpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePrimaryIpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePrimaryIpApiResponse(ILogger<DeletePrimaryIpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPrimaryIp(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetPrimaryIpDefaultImplementation(IGetPrimaryIpApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetPrimaryIp(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetPrimaryIp(ref bool suppressDefaultLog, IGetPrimaryIpApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetPrimaryIpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPrimaryIp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetPrimaryIp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Get a Primary IP Returns a [Primary IP](#primary-ips).
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IGetPrimaryIpApiResponse?> GetPrimaryIpOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPrimaryIpAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a Primary IP Returns a [Primary IP](#primary-ips).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IGetPrimaryIpApiResponse> GetPrimaryIpAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPrimaryIp(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPrimaryIpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPrimaryIpApiResponse>();

                        GetPrimaryIpApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPrimaryIpDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetPrimaryIp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPrimaryIpDefaultImplementation(e, "/primary_ips/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetPrimaryIp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPrimaryIpApiResponse"/>
        /// </summary>
        public partial class GetPrimaryIpApiResponse : Hetzner.Cloud.Client.ApiResponse, IGetPrimaryIpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPrimaryIpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPrimaryIpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPrimaryIpApiResponse(ILogger<GetPrimaryIpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.GetPrimaryIpResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.GetPrimaryIpResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.GetPrimaryIpResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPrimaryIpAction(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetPrimaryIpActionDefaultImplementation(IGetPrimaryIpActionApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetPrimaryIpAction(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetPrimaryIpAction(ref bool suppressDefaultLog, IGetPrimaryIpActionApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetPrimaryIpActionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPrimaryIpAction(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetPrimaryIpAction(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Get an Action Returns a single [Action](#actions).
        /// </summary>
        /// <param name="id">ID of the Action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpActionApiResponse"/>&gt;</returns>
        public async Task<IGetPrimaryIpActionApiResponse?> GetPrimaryIpActionOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPrimaryIpActionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an Action Returns a single [Action](#actions).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrimaryIpActionApiResponse"/>&gt;</returns>
        public async Task<IGetPrimaryIpActionApiResponse> GetPrimaryIpActionAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPrimaryIpAction(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/actions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/actions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPrimaryIpActionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPrimaryIpActionApiResponse>();

                        GetPrimaryIpActionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/actions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPrimaryIpActionDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetPrimaryIpAction(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPrimaryIpActionDefaultImplementation(e, "/primary_ips/actions/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetPrimaryIpAction(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPrimaryIpActionApiResponse"/>
        /// </summary>
        public partial class GetPrimaryIpActionApiResponse : Hetzner.Cloud.Client.ApiResponse, IGetPrimaryIpActionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPrimaryIpActionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPrimaryIpActionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPrimaryIpActionApiResponse(ILogger<GetPrimaryIpActionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.GetActionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.GetActionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.GetActionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPrimaryIpActions(ref Option<long> id, ref Option<string> sort, ref Option<string> status, ref Option<long> page, ref Option<long> perPage);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateListPrimaryIpActions(Option<string> sort, Option<string> status)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sort"></param>
        /// <param name="status"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        private void AfterListPrimaryIpActionsDefaultImplementation(IListPrimaryIpActionsApiResponse apiResponseLocalVar, Option<long> id, Option<string> sort, Option<string> status, Option<long> page, Option<long> perPage)
        {
            bool suppressDefaultLog = false;
            AfterListPrimaryIpActions(ref suppressDefaultLog, apiResponseLocalVar, id, sort, status, page, perPage);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sort"></param>
        /// <param name="status"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        partial void AfterListPrimaryIpActions(ref bool suppressDefaultLog, IListPrimaryIpActionsApiResponse apiResponseLocalVar, Option<long> id, Option<string> sort, Option<string> status, Option<long> page, Option<long> perPage);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sort"></param>
        /// <param name="status"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        private void OnErrorListPrimaryIpActionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> id, Option<string> sort, Option<string> status, Option<long> page, Option<long> perPage)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPrimaryIpActions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sort, status, page, perPage);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sort"></param>
        /// <param name="status"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        partial void OnErrorListPrimaryIpActions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> id, Option<string> sort, Option<string> status, Option<long> page, Option<long> perPage);

        /// <summary>
        /// Get all Actions Lists multiple [Actions](#actions).  Use the provided URI parameters to modify the result. 
        /// </summary>
        /// <param name="id">Filter the actions by ID. Can be used multiple times. The response will only contain actions matching the specified IDs.  (optional)</param>
        /// <param name="sort">Sort actions by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="status">Filter the actions by status. Can be used multiple times. The response will only contain actions matching the specified statuses.  (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpActionsApiResponse"/>&gt;</returns>
        public async Task<IListPrimaryIpActionsApiResponse?> ListPrimaryIpActionsOrDefaultAsync(Option<long> id = default, Option<string> sort = default, Option<string> status = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPrimaryIpActionsAsync(id, sort, status, page, perPage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all Actions Lists multiple [Actions](#actions).  Use the provided URI parameters to modify the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the actions by ID. Can be used multiple times. The response will only contain actions matching the specified IDs.  (optional)</param>
        /// <param name="sort">Sort actions by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="status">Filter the actions by status. Can be used multiple times. The response will only contain actions matching the specified statuses.  (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpActionsApiResponse"/>&gt;</returns>
        public async Task<IListPrimaryIpActionsApiResponse> ListPrimaryIpActionsAsync(Option<long> id = default, Option<string> sort = default, Option<string> status = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPrimaryIpActions(sort, status);

                FormatListPrimaryIpActions(ref id, ref sort, ref status, ref page, ref perPage);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/actions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/actions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPrimaryIpActionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPrimaryIpActionsApiResponse>();

                        ListPrimaryIpActionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/actions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPrimaryIpActionsDefaultImplementation(apiResponseLocalVar, id, sort, status, page, perPage);

                        Events.ExecuteOnListPrimaryIpActions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPrimaryIpActionsDefaultImplementation(e, "/primary_ips/actions", uriBuilderLocalVar.Path, id, sort, status, page, perPage);
                Events.ExecuteOnErrorListPrimaryIpActions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPrimaryIpActionsApiResponse"/>
        /// </summary>
        public partial class ListPrimaryIpActionsApiResponse : Hetzner.Cloud.Client.ApiResponse, IListPrimaryIpActionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPrimaryIpActionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPrimaryIpActionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPrimaryIpActionsApiResponse(ILogger<ListPrimaryIpActionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ListActionsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ListActionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.ListActionsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPrimaryIps(ref Option<string> name, ref Option<string> labelSelector, ref Option<string> ip, ref Option<long> page, ref Option<long> perPage, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="ip"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateListPrimaryIps(Option<string> name, Option<string> labelSelector, Option<string> ip, Option<string> sort)
        {
            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));

            if (labelSelector.IsSet && labelSelector.Value == null)
                throw new ArgumentNullException(nameof(labelSelector));

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="ip"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        private void AfterListPrimaryIpsDefaultImplementation(IListPrimaryIpsApiResponse apiResponseLocalVar, Option<string> name, Option<string> labelSelector, Option<string> ip, Option<long> page, Option<long> perPage, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterListPrimaryIps(ref suppressDefaultLog, apiResponseLocalVar, name, labelSelector, ip, page, perPage, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="ip"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        partial void AfterListPrimaryIps(ref bool suppressDefaultLog, IListPrimaryIpsApiResponse apiResponseLocalVar, Option<string> name, Option<string> labelSelector, Option<string> ip, Option<long> page, Option<long> perPage, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="ip"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        private void OnErrorListPrimaryIpsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> name, Option<string> labelSelector, Option<string> ip, Option<long> page, Option<long> perPage, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPrimaryIps(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name, labelSelector, ip, page, perPage, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="ip"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        partial void OnErrorListPrimaryIps(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> name, Option<string> labelSelector, Option<string> ip, Option<long> page, Option<long> perPage, Option<string> sort);

        /// <summary>
        /// Get all Primary IPs List multiple [Primary IPs](#primary-ips).  Use the provided URI parameters to modify the result. 
        /// </summary>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="ip">Filter results by IP address. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpsApiResponse"/>&gt;</returns>
        public async Task<IListPrimaryIpsApiResponse?> ListPrimaryIpsOrDefaultAsync(Option<string> name = default, Option<string> labelSelector = default, Option<string> ip = default, Option<long> page = default, Option<long> perPage = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPrimaryIpsAsync(name, labelSelector, ip, page, perPage, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all Primary IPs List multiple [Primary IPs](#primary-ips).  Use the provided URI parameters to modify the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="ip">Filter results by IP address. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPrimaryIpsApiResponse"/>&gt;</returns>
        public async Task<IListPrimaryIpsApiResponse> ListPrimaryIpsAsync(Option<string> name = default, Option<string> labelSelector = default, Option<string> ip = default, Option<long> page = default, Option<long> perPage = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPrimaryIps(name, labelSelector, ip, sort);

                FormatListPrimaryIps(ref name, ref labelSelector, ref ip, ref page, ref perPage, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (labelSelector.IsSet)
                        parseQueryStringLocalVar["label_selector"] = ClientUtils.ParameterToString(labelSelector.Value);

                    if (ip.IsSet)
                        parseQueryStringLocalVar["ip"] = ClientUtils.ParameterToString(ip.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPrimaryIpsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPrimaryIpsApiResponse>();

                        ListPrimaryIpsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPrimaryIpsDefaultImplementation(apiResponseLocalVar, name, labelSelector, ip, page, perPage, sort);

                        Events.ExecuteOnListPrimaryIps(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPrimaryIpsDefaultImplementation(e, "/primary_ips", uriBuilderLocalVar.Path, name, labelSelector, ip, page, perPage, sort);
                Events.ExecuteOnErrorListPrimaryIps(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPrimaryIpsApiResponse"/>
        /// </summary>
        public partial class ListPrimaryIpsApiResponse : Hetzner.Cloud.Client.ApiResponse, IListPrimaryIpsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPrimaryIpsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPrimaryIpsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPrimaryIpsApiResponse(ILogger<ListPrimaryIpsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ListPrimaryIpsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ListPrimaryIpsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.ListPrimaryIpsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplacePrimaryIp(ref long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="replacePrimaryIpRequest"></param>
        /// <returns></returns>
        private void ValidateReplacePrimaryIp(Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest)
        {
            if (replacePrimaryIpRequest.IsSet && replacePrimaryIpRequest.Value == null)
                throw new ArgumentNullException(nameof(replacePrimaryIpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePrimaryIpRequest"></param>
        private void AfterReplacePrimaryIpDefaultImplementation(IReplacePrimaryIpApiResponse apiResponseLocalVar, long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest)
        {
            bool suppressDefaultLog = false;
            AfterReplacePrimaryIp(ref suppressDefaultLog, apiResponseLocalVar, id, replacePrimaryIpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePrimaryIpRequest"></param>
        partial void AfterReplacePrimaryIp(ref bool suppressDefaultLog, IReplacePrimaryIpApiResponse apiResponseLocalVar, long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePrimaryIpRequest"></param>
        private void OnErrorReplacePrimaryIpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplacePrimaryIp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, replacePrimaryIpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePrimaryIpRequest"></param>
        partial void OnErrorReplacePrimaryIp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest);

        /// <summary>
        /// Update a Primary IP Update the [Primary IP](#primary-ips).  Note that when updating [Labels](#labels), the [Primary IPs](#primary-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.  If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code &#x60;conflict&#x60; will be returned. 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="replacePrimaryIpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IReplacePrimaryIpApiResponse?> ReplacePrimaryIpOrDefaultAsync(long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplacePrimaryIpAsync(id, replacePrimaryIpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a Primary IP Update the [Primary IP](#primary-ips).  Note that when updating [Labels](#labels), the [Primary IPs](#primary-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.  If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code &#x60;conflict&#x60; will be returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="replacePrimaryIpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePrimaryIpApiResponse"/>&gt;</returns>
        public async Task<IReplacePrimaryIpApiResponse> ReplacePrimaryIpAsync(long id, Option<ReplacePrimaryIpRequest> replacePrimaryIpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplacePrimaryIp(replacePrimaryIpRequest);

                FormatReplacePrimaryIp(ref id, replacePrimaryIpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (replacePrimaryIpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (replacePrimaryIpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replacePrimaryIpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReplacePrimaryIpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplacePrimaryIpApiResponse>();

                        ReplacePrimaryIpApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReplacePrimaryIpDefaultImplementation(apiResponseLocalVar, id, replacePrimaryIpRequest);

                        Events.ExecuteOnReplacePrimaryIp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplacePrimaryIpDefaultImplementation(e, "/primary_ips/{id}", uriBuilderLocalVar.Path, id, replacePrimaryIpRequest);
                Events.ExecuteOnErrorReplacePrimaryIp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplacePrimaryIpApiResponse"/>
        /// </summary>
        public partial class ReplacePrimaryIpApiResponse : Hetzner.Cloud.Client.ApiResponse, IReplacePrimaryIpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplacePrimaryIpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplacePrimaryIpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplacePrimaryIpApiResponse(ILogger<ReplacePrimaryIpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ReplacePrimaryIpResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ReplacePrimaryIpResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.ReplacePrimaryIpResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnassignPrimaryIpFromResource(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterUnassignPrimaryIpFromResourceDefaultImplementation(IUnassignPrimaryIpFromResourceApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterUnassignPrimaryIpFromResource(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterUnassignPrimaryIpFromResource(ref bool suppressDefaultLog, IUnassignPrimaryIpFromResourceApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorUnassignPrimaryIpFromResourceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUnassignPrimaryIpFromResource(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorUnassignPrimaryIpFromResource(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Unassign a Primary IP from a resource Unassign a [Primary IP](#primary-ips) from a resource.  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  A [Server](#server) requires at least one network interface (public or private) to be powered on.  #### Error Codes specific to this Call  | Code                              | Description                                                   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;server_not_stopped&#x60;              | The [Server](#server) is running, but needs to be powered off | | &#x60;server_is_load_balancer_target&#x60;  | The [Server](#server) IPv4 address is a loadbalancer target   | 
        /// </summary>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnassignPrimaryIpFromResourceApiResponse"/>&gt;</returns>
        public async Task<IUnassignPrimaryIpFromResourceApiResponse?> UnassignPrimaryIpFromResourceOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnassignPrimaryIpFromResourceAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unassign a Primary IP from a resource Unassign a [Primary IP](#primary-ips) from a resource.  A [Server](#servers) must be powered off (status &#x60;off&#x60;) in order for this operation to succeed.  A [Server](#server) requires at least one network interface (public or private) to be powered on.  #### Error Codes specific to this Call  | Code                              | Description                                                   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;server_not_stopped&#x60;              | The [Server](#server) is running, but needs to be powered off | | &#x60;server_is_load_balancer_target&#x60;  | The [Server](#server) IPv4 address is a loadbalancer target   | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnassignPrimaryIpFromResourceApiResponse"/>&gt;</returns>
        public async Task<IUnassignPrimaryIpFromResourceApiResponse> UnassignPrimaryIpFromResourceAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatUnassignPrimaryIpFromResource(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/primary_ips/{id}/actions/unassign"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/primary_ips/{id}/actions/unassign");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnassignPrimaryIpFromResourceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnassignPrimaryIpFromResourceApiResponse>();

                        UnassignPrimaryIpFromResourceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/primary_ips/{id}/actions/unassign", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnassignPrimaryIpFromResourceDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnUnassignPrimaryIpFromResource(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnassignPrimaryIpFromResourceDefaultImplementation(e, "/primary_ips/{id}/actions/unassign", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorUnassignPrimaryIpFromResource(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnassignPrimaryIpFromResourceApiResponse"/>
        /// </summary>
        public partial class UnassignPrimaryIpFromResourceApiResponse : Hetzner.Cloud.Client.ApiResponse, IUnassignPrimaryIpFromResourceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnassignPrimaryIpFromResourceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnassignPrimaryIpFromResourceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnassignPrimaryIpFromResourceApiResponse(ILogger<UnassignPrimaryIpFromResourceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.UnassignPrimaryIpFromResourceResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.UnassignPrimaryIpFromResourceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.UnassignPrimaryIpFromResourceResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
