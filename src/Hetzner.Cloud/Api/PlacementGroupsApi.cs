// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Hetzner.Cloud.Client;
using Hetzner.Cloud.Model;
using System.Diagnostics.CodeAnalysis;

namespace Hetzner.Cloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPlacementGroupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PlacementGroupsApiEvents Events { get; }

        /// <summary>
        /// Create a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Creates a new PlacementGroup. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePlacementgroupApiResponse"/>&gt;</returns>
        Task<ICreatePlacementgroupApiResponse> CreatePlacementgroupAsync(Option<CreatePlacementgroupRequest> createPlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Creates a new PlacementGroup. 
        /// </remarks>
        /// <param name="createPlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePlacementgroupApiResponse"/>?&gt;</returns>
        Task<ICreatePlacementgroupApiResponse?> CreatePlacementgroupOrDefaultAsync(Option<CreatePlacementgroupRequest> createPlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Deletes a PlacementGroup.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePlacementgroupApiResponse"/>&gt;</returns>
        Task<IDeletePlacementgroupApiResponse> DeletePlacementgroupAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Deletes a PlacementGroup.
        /// </remarks>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePlacementgroupApiResponse"/>?&gt;</returns>
        Task<IDeletePlacementgroupApiResponse?> DeletePlacementgroupOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Gets a specific PlacementGroup object.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlacementgroupApiResponse"/>&gt;</returns>
        Task<IGetPlacementgroupApiResponse> GetPlacementgroupAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Gets a specific PlacementGroup object.
        /// </remarks>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlacementgroupApiResponse"/>?&gt;</returns>
        Task<IGetPlacementgroupApiResponse?> GetPlacementgroupOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all PlacementGroups
        /// </summary>
        /// <remarks>
        /// Returns all PlacementGroup objects.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="type">Can be used multiple times. The response will only contain PlacementGroups matching the type. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPlacementgroupsApiResponse"/>&gt;</returns>
        Task<IListPlacementgroupsApiResponse> ListPlacementgroupsAsync(Option<string> sort = default, Option<string> name = default, Option<string> labelSelector = default, Option<string> type = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all PlacementGroups
        /// </summary>
        /// <remarks>
        /// Returns all PlacementGroup objects.
        /// </remarks>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="type">Can be used multiple times. The response will only contain PlacementGroups matching the type. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPlacementgroupsApiResponse"/>?&gt;</returns>
        Task<IListPlacementgroupsApiResponse?> ListPlacementgroupsOrDefaultAsync(Option<string> sort = default, Option<string> name = default, Option<string> labelSelector = default, Option<string> type = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Updates the PlacementGroup properties.  Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.  Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="replacePlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePlacementgroupApiResponse"/>&gt;</returns>
        Task<IReplacePlacementgroupApiResponse> ReplacePlacementgroupAsync(long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a PlacementGroup
        /// </summary>
        /// <remarks>
        /// Updates the PlacementGroup properties.  Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.  Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error. 
        /// </remarks>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="replacePlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePlacementgroupApiResponse"/>?&gt;</returns>
        Task<IReplacePlacementgroupApiResponse?> ReplacePlacementgroupOrDefaultAsync(long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreatePlacementgroupApiResponse"/>
    /// </summary>
    public interface ICreatePlacementgroupApiResponse : Hetzner.Cloud.Client.IApiResponse, ICreated<Hetzner.Cloud.Model.CreatePlacementgroupResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePlacementgroupApiResponse"/>
    /// </summary>
    public interface IDeletePlacementgroupApiResponse : Hetzner.Cloud.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlacementgroupApiResponse"/>
    /// </summary>
    public interface IGetPlacementgroupApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.GetPlacementgroupResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListPlacementgroupsApiResponse"/>
    /// </summary>
    public interface IListPlacementgroupsApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.ListPlacementgroupsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IReplacePlacementgroupApiResponse"/>
    /// </summary>
    public interface IReplacePlacementgroupApiResponse : Hetzner.Cloud.Client.IApiResponse, IOk<Hetzner.Cloud.Model.ReplacePlacementgroupResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PlacementGroupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreatePlacementgroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreatePlacementgroup;

        internal void ExecuteOnCreatePlacementgroup(PlacementGroupsApi.CreatePlacementgroupApiResponse apiResponse)
        {
            OnCreatePlacementgroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePlacementgroup(Exception exception)
        {
            OnErrorCreatePlacementgroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePlacementgroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePlacementgroup;

        internal void ExecuteOnDeletePlacementgroup(PlacementGroupsApi.DeletePlacementgroupApiResponse apiResponse)
        {
            OnDeletePlacementgroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePlacementgroup(Exception exception)
        {
            OnErrorDeletePlacementgroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlacementgroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlacementgroup;

        internal void ExecuteOnGetPlacementgroup(PlacementGroupsApi.GetPlacementgroupApiResponse apiResponse)
        {
            OnGetPlacementgroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlacementgroup(Exception exception)
        {
            OnErrorGetPlacementgroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPlacementgroups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPlacementgroups;

        internal void ExecuteOnListPlacementgroups(PlacementGroupsApi.ListPlacementgroupsApiResponse apiResponse)
        {
            OnListPlacementgroups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPlacementgroups(Exception exception)
        {
            OnErrorListPlacementgroups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplacePlacementgroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplacePlacementgroup;

        internal void ExecuteOnReplacePlacementgroup(PlacementGroupsApi.ReplacePlacementgroupApiResponse apiResponse)
        {
            OnReplacePlacementgroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplacePlacementgroup(Exception exception)
        {
            OnErrorReplacePlacementgroup?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlacementGroupsApi : IPlacementGroupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PlacementGroupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PlacementGroupsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlacementGroupsApi(ILogger<PlacementGroupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PlacementGroupsApiEvents placementGroupsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PlacementGroupsApi>();
            HttpClient = httpClient;
            Events = placementGroupsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreatePlacementgroup(Option<CreatePlacementgroupRequest> createPlacementgroupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPlacementgroupRequest"></param>
        /// <returns></returns>
        private void ValidateCreatePlacementgroup(Option<CreatePlacementgroupRequest> createPlacementgroupRequest)
        {
            if (createPlacementgroupRequest.IsSet && createPlacementgroupRequest.Value == null)
                throw new ArgumentNullException(nameof(createPlacementgroupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPlacementgroupRequest"></param>
        private void AfterCreatePlacementgroupDefaultImplementation(ICreatePlacementgroupApiResponse apiResponseLocalVar, Option<CreatePlacementgroupRequest> createPlacementgroupRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreatePlacementgroup(ref suppressDefaultLog, apiResponseLocalVar, createPlacementgroupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPlacementgroupRequest"></param>
        partial void AfterCreatePlacementgroup(ref bool suppressDefaultLog, ICreatePlacementgroupApiResponse apiResponseLocalVar, Option<CreatePlacementgroupRequest> createPlacementgroupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPlacementgroupRequest"></param>
        private void OnErrorCreatePlacementgroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreatePlacementgroupRequest> createPlacementgroupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePlacementgroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createPlacementgroupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPlacementgroupRequest"></param>
        partial void OnErrorCreatePlacementgroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreatePlacementgroupRequest> createPlacementgroupRequest);

        /// <summary>
        /// Create a PlacementGroup Creates a new PlacementGroup. 
        /// </summary>
        /// <param name="createPlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<ICreatePlacementgroupApiResponse?> CreatePlacementgroupOrDefaultAsync(Option<CreatePlacementgroupRequest> createPlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePlacementgroupAsync(createPlacementgroupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a PlacementGroup Creates a new PlacementGroup. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<ICreatePlacementgroupApiResponse> CreatePlacementgroupAsync(Option<CreatePlacementgroupRequest> createPlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePlacementgroup(createPlacementgroupRequest);

                FormatCreatePlacementgroup(createPlacementgroupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/placement_groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/placement_groups");

                    if (createPlacementgroupRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createPlacementgroupRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPlacementgroupRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreatePlacementgroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePlacementgroupApiResponse>();

                        CreatePlacementgroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/placement_groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreatePlacementgroupDefaultImplementation(apiResponseLocalVar, createPlacementgroupRequest);

                        Events.ExecuteOnCreatePlacementgroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePlacementgroupDefaultImplementation(e, "/placement_groups", uriBuilderLocalVar.Path, createPlacementgroupRequest);
                Events.ExecuteOnErrorCreatePlacementgroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePlacementgroupApiResponse"/>
        /// </summary>
        public partial class CreatePlacementgroupApiResponse : Hetzner.Cloud.Client.ApiResponse, ICreatePlacementgroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePlacementgroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePlacementgroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePlacementgroupApiResponse(ILogger<CreatePlacementgroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.CreatePlacementgroupResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.CreatePlacementgroupResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Hetzner.Cloud.Model.CreatePlacementgroupResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePlacementgroup(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeletePlacementgroupDefaultImplementation(IDeletePlacementgroupApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterDeletePlacementgroup(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeletePlacementgroup(ref bool suppressDefaultLog, IDeletePlacementgroupApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeletePlacementgroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePlacementgroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeletePlacementgroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Delete a PlacementGroup Deletes a PlacementGroup.
        /// </summary>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IDeletePlacementgroupApiResponse?> DeletePlacementgroupOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePlacementgroupAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a PlacementGroup Deletes a PlacementGroup.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IDeletePlacementgroupApiResponse> DeletePlacementgroupAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletePlacementgroup(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/placement_groups/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/placement_groups/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePlacementgroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePlacementgroupApiResponse>();

                        DeletePlacementgroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/placement_groups/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePlacementgroupDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeletePlacementgroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePlacementgroupDefaultImplementation(e, "/placement_groups/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeletePlacementgroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePlacementgroupApiResponse"/>
        /// </summary>
        public partial class DeletePlacementgroupApiResponse : Hetzner.Cloud.Client.ApiResponse, IDeletePlacementgroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePlacementgroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePlacementgroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePlacementgroupApiResponse(ILogger<DeletePlacementgroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlacementgroup(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetPlacementgroupDefaultImplementation(IGetPlacementgroupApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetPlacementgroup(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetPlacementgroup(ref bool suppressDefaultLog, IGetPlacementgroupApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetPlacementgroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlacementgroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetPlacementgroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Get a PlacementGroup Gets a specific PlacementGroup object.
        /// </summary>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IGetPlacementgroupApiResponse?> GetPlacementgroupOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlacementgroupAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a PlacementGroup Gets a specific PlacementGroup object.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IGetPlacementgroupApiResponse> GetPlacementgroupAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPlacementgroup(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/placement_groups/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/placement_groups/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlacementgroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlacementgroupApiResponse>();

                        GetPlacementgroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/placement_groups/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlacementgroupDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetPlacementgroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlacementgroupDefaultImplementation(e, "/placement_groups/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetPlacementgroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlacementgroupApiResponse"/>
        /// </summary>
        public partial class GetPlacementgroupApiResponse : Hetzner.Cloud.Client.ApiResponse, IGetPlacementgroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlacementgroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlacementgroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlacementgroupApiResponse(ILogger<GetPlacementgroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.GetPlacementgroupResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.GetPlacementgroupResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.GetPlacementgroupResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPlacementgroups(ref Option<string> sort, ref Option<string> name, ref Option<string> labelSelector, ref Option<string> type, ref Option<long> page, ref Option<long> perPage);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateListPlacementgroups(Option<string> sort, Option<string> name, Option<string> labelSelector, Option<string> type)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));

            if (labelSelector.IsSet && labelSelector.Value == null)
                throw new ArgumentNullException(nameof(labelSelector));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        private void AfterListPlacementgroupsDefaultImplementation(IListPlacementgroupsApiResponse apiResponseLocalVar, Option<string> sort, Option<string> name, Option<string> labelSelector, Option<string> type, Option<long> page, Option<long> perPage)
        {
            bool suppressDefaultLog = false;
            AfterListPlacementgroups(ref suppressDefaultLog, apiResponseLocalVar, sort, name, labelSelector, type, page, perPage);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        partial void AfterListPlacementgroups(ref bool suppressDefaultLog, IListPlacementgroupsApiResponse apiResponseLocalVar, Option<string> sort, Option<string> name, Option<string> labelSelector, Option<string> type, Option<long> page, Option<long> perPage);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        private void OnErrorListPlacementgroupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> sort, Option<string> name, Option<string> labelSelector, Option<string> type, Option<long> page, Option<long> perPage)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPlacementgroups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sort, name, labelSelector, type, page, perPage);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="name"></param>
        /// <param name="labelSelector"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        partial void OnErrorListPlacementgroups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> sort, Option<string> name, Option<string> labelSelector, Option<string> type, Option<long> page, Option<long> perPage);

        /// <summary>
        /// Get all PlacementGroups Returns all PlacementGroup objects.
        /// </summary>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="type">Can be used multiple times. The response will only contain PlacementGroups matching the type. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPlacementgroupsApiResponse"/>&gt;</returns>
        public async Task<IListPlacementgroupsApiResponse?> ListPlacementgroupsOrDefaultAsync(Option<string> sort = default, Option<string> name = default, Option<string> labelSelector = default, Option<string> type = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPlacementgroupsAsync(sort, name, labelSelector, type, page, perPage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all PlacementGroups Returns all PlacementGroup objects.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sort resources by field and direction. Can be used multiple times. For more information, see \&quot;[Sorting](#sorting)\&quot;.  (optional)</param>
        /// <param name="name">Filter resources by their name. The response will only contain the resources matching the specified name.  (optional)</param>
        /// <param name="labelSelector">Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \&quot;[Label Selector](#label-selector)\&quot;.  (optional)</param>
        /// <param name="type">Can be used multiple times. The response will only contain PlacementGroups matching the type. (optional)</param>
        /// <param name="page">Page number to return. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 1)</param>
        /// <param name="perPage">Maximum number of entries returned per page. For more information, see \&quot;[Pagination](#pagination)\&quot;. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPlacementgroupsApiResponse"/>&gt;</returns>
        public async Task<IListPlacementgroupsApiResponse> ListPlacementgroupsAsync(Option<string> sort = default, Option<string> name = default, Option<string> labelSelector = default, Option<string> type = default, Option<long> page = default, Option<long> perPage = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPlacementgroups(sort, name, labelSelector, type);

                FormatListPlacementgroups(ref sort, ref name, ref labelSelector, ref type, ref page, ref perPage);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/placement_groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/placement_groups");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (labelSelector.IsSet)
                        parseQueryStringLocalVar["label_selector"] = ClientUtils.ParameterToString(labelSelector.Value);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPlacementgroupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPlacementgroupsApiResponse>();

                        ListPlacementgroupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/placement_groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPlacementgroupsDefaultImplementation(apiResponseLocalVar, sort, name, labelSelector, type, page, perPage);

                        Events.ExecuteOnListPlacementgroups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPlacementgroupsDefaultImplementation(e, "/placement_groups", uriBuilderLocalVar.Path, sort, name, labelSelector, type, page, perPage);
                Events.ExecuteOnErrorListPlacementgroups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPlacementgroupsApiResponse"/>
        /// </summary>
        public partial class ListPlacementgroupsApiResponse : Hetzner.Cloud.Client.ApiResponse, IListPlacementgroupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPlacementgroupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPlacementgroupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPlacementgroupsApiResponse(ILogger<ListPlacementgroupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ListPlacementgroupsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ListPlacementgroupsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.ListPlacementgroupsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplacePlacementgroup(ref long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="replacePlacementgroupRequest"></param>
        /// <returns></returns>
        private void ValidateReplacePlacementgroup(Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest)
        {
            if (replacePlacementgroupRequest.IsSet && replacePlacementgroupRequest.Value == null)
                throw new ArgumentNullException(nameof(replacePlacementgroupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePlacementgroupRequest"></param>
        private void AfterReplacePlacementgroupDefaultImplementation(IReplacePlacementgroupApiResponse apiResponseLocalVar, long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest)
        {
            bool suppressDefaultLog = false;
            AfterReplacePlacementgroup(ref suppressDefaultLog, apiResponseLocalVar, id, replacePlacementgroupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePlacementgroupRequest"></param>
        partial void AfterReplacePlacementgroup(ref bool suppressDefaultLog, IReplacePlacementgroupApiResponse apiResponseLocalVar, long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePlacementgroupRequest"></param>
        private void OnErrorReplacePlacementgroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplacePlacementgroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, replacePlacementgroupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="replacePlacementgroupRequest"></param>
        partial void OnErrorReplacePlacementgroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest);

        /// <summary>
        /// Update a PlacementGroup Updates the PlacementGroup properties.  Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.  Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error. 
        /// </summary>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="replacePlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IReplacePlacementgroupApiResponse?> ReplacePlacementgroupOrDefaultAsync(long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplacePlacementgroupAsync(id, replacePlacementgroupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a PlacementGroup Updates the PlacementGroup properties.  Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.  Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Placement Group.</param>
        /// <param name="replacePlacementgroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplacePlacementgroupApiResponse"/>&gt;</returns>
        public async Task<IReplacePlacementgroupApiResponse> ReplacePlacementgroupAsync(long id, Option<ReplacePlacementgroupRequest> replacePlacementgroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplacePlacementgroup(replacePlacementgroupRequest);

                FormatReplacePlacementgroup(ref id, replacePlacementgroupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/placement_groups/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/placement_groups/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (replacePlacementgroupRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (replacePlacementgroupRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replacePlacementgroupRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReplacePlacementgroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplacePlacementgroupApiResponse>();

                        ReplacePlacementgroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/placement_groups/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReplacePlacementgroupDefaultImplementation(apiResponseLocalVar, id, replacePlacementgroupRequest);

                        Events.ExecuteOnReplacePlacementgroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplacePlacementgroupDefaultImplementation(e, "/placement_groups/{id}", uriBuilderLocalVar.Path, id, replacePlacementgroupRequest);
                Events.ExecuteOnErrorReplacePlacementgroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplacePlacementgroupApiResponse"/>
        /// </summary>
        public partial class ReplacePlacementgroupApiResponse : Hetzner.Cloud.Client.ApiResponse, IReplacePlacementgroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplacePlacementgroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplacePlacementgroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplacePlacementgroupApiResponse(ILogger<ReplacePlacementgroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Hetzner.Cloud.Model.ReplacePlacementgroupResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Hetzner.Cloud.Model.ReplacePlacementgroupResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Hetzner.Cloud.Model.ReplacePlacementgroupResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
