/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Hetzner.Cloud.Model;
using System.Runtime.CompilerServices;
using Action = Hetzner.Cloud.Model.Action;

[assembly: InternalsVisibleTo("Hetzner.Cloud.Test")]

namespace Hetzner.Cloud.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is Action.StatusEnum actionStatusEnum)
                return Action.StatusEnumToJsonValue(actionStatusEnum);
            if (obj is ActionOptional.StatusEnum actionOptionalStatusEnum)
                return ActionOptional.StatusEnumToJsonValue(actionOptionalStatusEnum);
            if (obj is Architecture architecture)
                return ArchitectureValueConverter.ToJsonValue(architecture);
            if (obj is ArchitectureOptional architectureOptional)
                return ArchitectureOptionalValueConverter.ToJsonValue(architectureOptional);
            if (obj is AssignPrimaryIpToResourceRequest.AssigneeTypeEnum assignPrimaryIpToResourceRequestAssigneeTypeEnum)
                return AssignPrimaryIpToResourceRequest.AssigneeTypeEnumToJsonValue(assignPrimaryIpToResourceRequestAssigneeTypeEnum);
            if (obj is Certificate.TypeEnum certificateTypeEnum)
                return Certificate.TypeEnumToJsonValue(certificateTypeEnum);
            if (obj is CertificateStatus.IssuanceEnum certificateStatusIssuanceEnum)
                return CertificateStatus.IssuanceEnumToJsonValue(certificateStatusIssuanceEnum);
            if (obj is CertificateStatus.RenewalEnum certificateStatusRenewalEnum)
                return CertificateStatus.RenewalEnumToJsonValue(certificateStatusRenewalEnum);
            if (obj is CreateCertificateRequest.TypeEnum createCertificateRequestTypeEnum)
                return CreateCertificateRequest.TypeEnumToJsonValue(createCertificateRequestTypeEnum);
            if (obj is CreateImageFromServerRequest.TypeEnum createImageFromServerRequestTypeEnum)
                return CreateImageFromServerRequest.TypeEnumToJsonValue(createImageFromServerRequestTypeEnum);
            if (obj is CreatePlacementgroupRequest.TypeEnum createPlacementgroupRequestTypeEnum)
                return CreatePlacementgroupRequest.TypeEnumToJsonValue(createPlacementgroupRequestTypeEnum);
            if (obj is CreatePrimaryIpRequest.AssigneeTypeEnum createPrimaryIpRequestAssigneeTypeEnum)
                return CreatePrimaryIpRequest.AssigneeTypeEnumToJsonValue(createPrimaryIpRequestAssigneeTypeEnum);
            if (obj is EnableRescueModeForServerRequest.TypeEnum enableRescueModeForServerRequestTypeEnum)
                return EnableRescueModeForServerRequest.TypeEnumToJsonValue(enableRescueModeForServerRequestTypeEnum);
            if (obj is FirewallResource.TypeEnum firewallResourceTypeEnum)
                return FirewallResource.TypeEnumToJsonValue(firewallResourceTypeEnum);
            if (obj is FirewallResourceId.TypeEnum firewallResourceIdTypeEnum)
                return FirewallResourceId.TypeEnumToJsonValue(firewallResourceIdTypeEnum);
            if (obj is FirewallResourceIdAppliedToResources.TypeEnum firewallResourceIdAppliedToResourcesTypeEnum)
                return FirewallResourceIdAppliedToResources.TypeEnumToJsonValue(firewallResourceIdAppliedToResourcesTypeEnum);
            if (obj is Image.OsFlavorEnum imageOsFlavorEnum)
                return Image.OsFlavorEnumToJsonValue(imageOsFlavorEnum);
            if (obj is Image.StatusEnum imageStatusEnum)
                return Image.StatusEnumToJsonValue(imageStatusEnum);
            if (obj is Image.TypeEnum imageTypeEnum)
                return Image.TypeEnumToJsonValue(imageTypeEnum);
            if (obj is ImageOptional.OsFlavorEnum imageOptionalOsFlavorEnum)
                return ImageOptional.OsFlavorEnumToJsonValue(imageOptionalOsFlavorEnum);
            if (obj is ImageOptional.StatusEnum imageOptionalStatusEnum)
                return ImageOptional.StatusEnumToJsonValue(imageOptionalStatusEnum);
            if (obj is ImageOptional.TypeEnum imageOptionalTypeEnum)
                return ImageOptional.TypeEnumToJsonValue(imageOptionalTypeEnum);
            if (obj is IpType ipType)
                return IpTypeValueConverter.ToJsonValue(ipType);
            if (obj is Iso.TypeEnum isoTypeEnum)
                return Iso.TypeEnumToJsonValue(isoTypeEnum);
            if (obj is IsoOptional.TypeEnum isoOptionalTypeEnum)
                return IsoOptional.TypeEnumToJsonValue(isoOptionalTypeEnum);
            if (obj is LoadBalancerAddTarget.TypeEnum loadBalancerAddTargetTypeEnum)
                return LoadBalancerAddTarget.TypeEnumToJsonValue(loadBalancerAddTargetTypeEnum);
            if (obj is LoadBalancerAlgorithm.TypeEnum loadBalancerAlgorithmTypeEnum)
                return LoadBalancerAlgorithm.TypeEnumToJsonValue(loadBalancerAlgorithmTypeEnum);
            if (obj is LoadBalancerService.ProtocolEnum loadBalancerServiceProtocolEnum)
                return LoadBalancerService.ProtocolEnumToJsonValue(loadBalancerServiceProtocolEnum);
            if (obj is LoadBalancerServiceHealthCheck.ProtocolEnum loadBalancerServiceHealthCheckProtocolEnum)
                return LoadBalancerServiceHealthCheck.ProtocolEnumToJsonValue(loadBalancerServiceHealthCheckProtocolEnum);
            if (obj is LoadBalancerTarget.TypeEnum loadBalancerTargetTypeEnum)
                return LoadBalancerTarget.TypeEnumToJsonValue(loadBalancerTargetTypeEnum);
            if (obj is LoadBalancerTargetHealthStatus.StatusEnum loadBalancerTargetHealthStatusStatusEnum)
                return LoadBalancerTargetHealthStatus.StatusEnumToJsonValue(loadBalancerTargetHealthStatusStatusEnum);
            if (obj is PlacementGroup.TypeEnum placementGroupTypeEnum)
                return PlacementGroup.TypeEnumToJsonValue(placementGroupTypeEnum);
            if (obj is PlacementGroupNullable.TypeEnum placementGroupNullableTypeEnum)
                return PlacementGroupNullable.TypeEnumToJsonValue(placementGroupNullableTypeEnum);
            if (obj is PrimaryIP.AssigneeTypeEnum primaryIPAssigneeTypeEnum)
                return PrimaryIP.AssigneeTypeEnumToJsonValue(primaryIPAssigneeTypeEnum);
            if (obj is RemoveTargetRequest.TypeEnum removeTargetRequestTypeEnum)
                return RemoveTargetRequest.TypeEnumToJsonValue(removeTargetRequestTypeEnum);
            if (obj is ReplaceImageRequest.TypeEnum replaceImageRequestTypeEnum)
                return ReplaceImageRequest.TypeEnumToJsonValue(replaceImageRequestTypeEnum);
            if (obj is Rule.DirectionEnum ruleDirectionEnum)
                return Rule.DirectionEnumToJsonValue(ruleDirectionEnum);
            if (obj is Rule.ProtocolEnum ruleProtocolEnum)
                return Rule.ProtocolEnumToJsonValue(ruleProtocolEnum);
            if (obj is RuleResponse.DirectionEnum ruleResponseDirectionEnum)
                return RuleResponse.DirectionEnumToJsonValue(ruleResponseDirectionEnum);
            if (obj is RuleResponse.ProtocolEnum ruleResponseProtocolEnum)
                return RuleResponse.ProtocolEnumToJsonValue(ruleResponseProtocolEnum);
            if (obj is Server.StatusEnum serverStatusEnum)
                return Server.StatusEnumToJsonValue(serverStatusEnum);
            if (obj is ServerPublicNetFirewall.StatusEnum serverPublicNetFirewallStatusEnum)
                return ServerPublicNetFirewall.StatusEnumToJsonValue(serverPublicNetFirewallStatusEnum);
            if (obj is ServerType.CpuTypeEnum serverTypeCpuTypeEnum)
                return ServerType.CpuTypeEnumToJsonValue(serverTypeCpuTypeEnum);
            if (obj is ServerType.StorageTypeEnum serverTypeStorageTypeEnum)
                return ServerType.StorageTypeEnumToJsonValue(serverTypeStorageTypeEnum);
            if (obj is Subnet.TypeEnum subnetTypeEnum)
                return Subnet.TypeEnumToJsonValue(subnetTypeEnum);
            if (obj is SubnetWithGateway.TypeEnum subnetWithGatewayTypeEnum)
                return SubnetWithGateway.TypeEnumToJsonValue(subnetWithGatewayTypeEnum);
            if (obj is UpdateLoadBalancerService.ProtocolEnum updateLoadBalancerServiceProtocolEnum)
                return UpdateLoadBalancerService.ProtocolEnumToJsonValue(updateLoadBalancerServiceProtocolEnum);
            if (obj is UpdateLoadBalancerServiceHealthCheck.ProtocolEnum updateLoadBalancerServiceHealthCheckProtocolEnum)
                return UpdateLoadBalancerServiceHealthCheck.ProtocolEnumToJsonValue(updateLoadBalancerServiceHealthCheckProtocolEnum);
            if (obj is Volume.StatusEnum volumeStatusEnum)
                return Volume.StatusEnumToJsonValue(volumeStatusEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://api.hetzner.cloud/v1";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "/v1";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "api.hetzner.cloud";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
