// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route | Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route
    /// </summary>
    public partial class Route : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        /// <param name="destination">Destination network or host of the route.  Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.  Must be one of * private IPv4 ranges of RFC1918 * or &#x60;0.0.0.0/0&#x60;.  Must not overlap with * an existing ip_range in any subnets * or with any destinations in other routes * or with &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). </param>
        /// <param name="gateway">Gateway of the route.  Packages addressed for the specified destination will be send to this IP address.  Cannot be * the first IP of the networks ip_range, * an IP behind a vSwitch or * &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). </param>
        [JsonConstructor]
        public Route(string destination, string gateway)
        {
            Destination = destination;
            Gateway = gateway;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Destination network or host of the route.  Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.  Must be one of * private IPv4 ranges of RFC1918 * or &#x60;0.0.0.0/0&#x60;.  Must not overlap with * an existing ip_range in any subnets * or with any destinations in other routes * or with &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). 
        /// </summary>
        /// <value>Destination network or host of the route.  Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.  Must be one of * private IPv4 ranges of RFC1918 * or &#x60;0.0.0.0/0&#x60;.  Must not overlap with * an existing ip_range in any subnets * or with any destinations in other routes * or with &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). </value>
        /* <example>10.100.1.0/24</example> */
        [JsonPropertyName("destination")]
        public string Destination { get; set; }

        /// <summary>
        /// Gateway of the route.  Packages addressed for the specified destination will be send to this IP address.  Cannot be * the first IP of the networks ip_range, * an IP behind a vSwitch or * &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). 
        /// </summary>
        /// <value>Gateway of the route.  Packages addressed for the specified destination will be send to this IP address.  Cannot be * the first IP of the networks ip_range, * an IP behind a vSwitch or * &#x60;172.31.1.1&#x60;.  &#x60;172.31.1.1&#x60; is being used as a gateway for the public network interface of [Servers](#servers). </value>
        /* <example>10.0.1.1</example> */
        [JsonPropertyName("gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Route" />
    /// </summary>
    public class RouteJsonConverter : JsonConverter<Route>
    {
        /// <summary>
        /// Deserializes json to <see cref="Route" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Route Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> destination = default;
            Option<string?> gateway = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "destination":
                            destination = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gateway":
                            gateway = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!destination.IsSet)
                throw new ArgumentException("Property is required for class Route.", nameof(destination));

            if (!gateway.IsSet)
                throw new ArgumentException("Property is required for class Route.", nameof(gateway));

            if (destination.IsSet && destination.Value == null)
                throw new ArgumentNullException(nameof(destination), "Property is not nullable for class Route.");

            if (gateway.IsSet && gateway.Value == null)
                throw new ArgumentNullException(nameof(gateway), "Property is not nullable for class Route.");

            return new Route(destination.Value!, gateway.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Route" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="route"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Route route, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, route, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Route" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="route"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Route route, JsonSerializerOptions jsonSerializerOptions)
        {
            if (route.Destination == null)
                throw new ArgumentNullException(nameof(route.Destination), "Property is required for class Route.");

            if (route.Gateway == null)
                throw new ArgumentNullException(nameof(route.Gateway), "Property is required for class Route.");

            writer.WriteString("destination", route.Destination);

            writer.WriteString("gateway", route.Gateway);
        }
    }

    /// <summary>
    /// The RouteSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Route))]
    public partial class RouteSerializationContext : JsonSerializerContext { }
}
