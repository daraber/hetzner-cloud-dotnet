// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Resolved label selector target Servers. Only present for type \&quot;label_selector\&quot;.
    /// </summary>
    public partial class LoadBalancerSelectedTarget : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerSelectedTarget" /> class.
        /// </summary>
        /// <param name="healthStatus">List of health statuses of the services on this target. Only present for target types \&quot;server\&quot; and \&quot;ip\&quot;.</param>
        /// <param name="server">server</param>
        /// <param name="type">Type of the resource. Here always \&quot;server\&quot;.</param>
        /// <param name="usePrivateIp">Use the private network IP instead of the public IP. Only present for target types \&quot;server\&quot; and \&quot;label_selector\&quot;. (default to false)</param>
        [JsonConstructor]
        public LoadBalancerSelectedTarget(Option<List<LoadBalancerTargetHealthStatus>?> healthStatus = default, Option<ResourceId?> server = default, Option<string?> type = default, Option<bool?> usePrivateIp = default)
        {
            HealthStatusOption = healthStatus;
            ServerOption = server;
            TypeOption = type;
            UsePrivateIpOption = usePrivateIp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HealthStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LoadBalancerTargetHealthStatus>?> HealthStatusOption { get; private set; }

        /// <summary>
        /// List of health statuses of the services on this target. Only present for target types \&quot;server\&quot; and \&quot;ip\&quot;.
        /// </summary>
        /// <value>List of health statuses of the services on this target. Only present for target types \&quot;server\&quot; and \&quot;ip\&quot;.</value>
        [JsonPropertyName("health_status")]
        public List<LoadBalancerTargetHealthStatus>? HealthStatus { get { return this.HealthStatusOption; } set { this.HealthStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResourceId?> ServerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [JsonPropertyName("server")]
        public ResourceId? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Type of the resource. Here always \&quot;server\&quot;.
        /// </summary>
        /// <value>Type of the resource. Here always \&quot;server\&quot;.</value>
        /* <example>server</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsePrivateIp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UsePrivateIpOption { get; private set; }

        /// <summary>
        /// Use the private network IP instead of the public IP. Only present for target types \&quot;server\&quot; and \&quot;label_selector\&quot;.
        /// </summary>
        /// <value>Use the private network IP instead of the public IP. Only present for target types \&quot;server\&quot; and \&quot;label_selector\&quot;.</value>
        [JsonPropertyName("use_private_ip")]
        public bool? UsePrivateIp { get { return this.UsePrivateIpOption; } set { this.UsePrivateIpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerSelectedTarget {\n");
            sb.Append("  HealthStatus: ").Append(HealthStatus).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UsePrivateIp: ").Append(UsePrivateIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerSelectedTarget" />
    /// </summary>
    public class LoadBalancerSelectedTargetJsonConverter : JsonConverter<LoadBalancerSelectedTarget>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerSelectedTarget" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerSelectedTarget Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<LoadBalancerTargetHealthStatus>?> healthStatus = default;
            Option<ResourceId?> server = default;
            Option<string?> type = default;
            Option<bool?> usePrivateIp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "health_status":
                            healthStatus = new Option<List<LoadBalancerTargetHealthStatus>?>(JsonSerializer.Deserialize<List<LoadBalancerTargetHealthStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server":
                            server = new Option<ResourceId?>(JsonSerializer.Deserialize<ResourceId>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "use_private_ip":
                            usePrivateIp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (healthStatus.IsSet && healthStatus.Value == null)
                throw new ArgumentNullException(nameof(healthStatus), "Property is not nullable for class LoadBalancerSelectedTarget.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class LoadBalancerSelectedTarget.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class LoadBalancerSelectedTarget.");

            if (usePrivateIp.IsSet && usePrivateIp.Value == null)
                throw new ArgumentNullException(nameof(usePrivateIp), "Property is not nullable for class LoadBalancerSelectedTarget.");

            return new LoadBalancerSelectedTarget(healthStatus, server, type, usePrivateIp);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerSelectedTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerSelectedTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerSelectedTarget loadBalancerSelectedTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerSelectedTarget, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerSelectedTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerSelectedTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerSelectedTarget loadBalancerSelectedTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerSelectedTarget.HealthStatusOption.IsSet && loadBalancerSelectedTarget.HealthStatus == null)
                throw new ArgumentNullException(nameof(loadBalancerSelectedTarget.HealthStatus), "Property is required for class LoadBalancerSelectedTarget.");

            if (loadBalancerSelectedTarget.ServerOption.IsSet && loadBalancerSelectedTarget.Server == null)
                throw new ArgumentNullException(nameof(loadBalancerSelectedTarget.Server), "Property is required for class LoadBalancerSelectedTarget.");

            if (loadBalancerSelectedTarget.TypeOption.IsSet && loadBalancerSelectedTarget.Type == null)
                throw new ArgumentNullException(nameof(loadBalancerSelectedTarget.Type), "Property is required for class LoadBalancerSelectedTarget.");

            if (loadBalancerSelectedTarget.HealthStatusOption.IsSet)
            {
                writer.WritePropertyName("health_status");
                JsonSerializer.Serialize(writer, loadBalancerSelectedTarget.HealthStatus, jsonSerializerOptions);
            }
            if (loadBalancerSelectedTarget.ServerOption.IsSet)
            {
                writer.WritePropertyName("server");
                JsonSerializer.Serialize(writer, loadBalancerSelectedTarget.Server, jsonSerializerOptions);
            }
            if (loadBalancerSelectedTarget.TypeOption.IsSet)
                writer.WriteString("type", loadBalancerSelectedTarget.Type);

            if (loadBalancerSelectedTarget.UsePrivateIpOption.IsSet)
                writer.WriteBoolean("use_private_ip", loadBalancerSelectedTarget.UsePrivateIpOption.Value!.Value);
        }
    }

    /// <summary>
    /// The LoadBalancerSelectedTargetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerSelectedTarget))]
    public partial class LoadBalancerSelectedTargetSerializationContext : JsonSerializerContext { }
}
