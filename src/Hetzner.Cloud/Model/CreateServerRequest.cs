// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/servers
    /// </summary>
    internal partial class CreateServerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateServerRequest" /> class.
        /// </summary>
        /// <param name="image">ID or name of the Image the Server is created from</param>
        /// <param name="name">Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)</param>
        /// <param name="serverType">ID or name of the Server type this Server should be created with</param>
        /// <param name="automount">Auto-mount Volumes after attach</param>
        /// <param name="datacenter">ID or name of Datacenter to create Server in (must not be used together with location)</param>
        /// <param name="firewalls">Firewalls which should be applied on the Server&#39;s public network interface at creation time</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="location">ID or name of Location to create Server in (must not be used together with datacenter)</param>
        /// <param name="networks">Network IDs which should be attached to the Server private network interface at the creation time</param>
        /// <param name="placementGroup">ID of the Placement Group the server should be in</param>
        /// <param name="publicNet">publicNet</param>
        /// <param name="sshKeys">SSH key IDs (&#x60;integer&#x60;) or names (&#x60;string&#x60;) which should be injected into the Server at creation time</param>
        /// <param name="startAfterCreate">This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the &#x60;next_actions&#x60; response object. (default to true)</param>
        /// <param name="userData">Cloud-Init user data to use during Server creation. This field is limited to 32KiB.</param>
        /// <param name="volumes">Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.</param>
        [JsonConstructor]
        internal CreateServerRequest(string image, string name, string serverType, Option<bool?> automount = default, Option<string?> datacenter = default, Option<List<CreateServerRequestFirewalls>?> firewalls = default, Option<Dictionary<string, string>?> labels = default, Option<string?> location = default, Option<List<long>?> networks = default, Option<long?> placementGroup = default, Option<CreateServerRequestPublicNet?> publicNet = default, Option<List<string>?> sshKeys = default, Option<bool?> startAfterCreate = default, Option<string?> userData = default, Option<List<long>?> volumes = default)
        {
            Image = image;
            Name = name;
            ServerType = serverType;
            AutomountOption = automount;
            DatacenterOption = datacenter;
            FirewallsOption = firewalls;
            LabelsOption = labels;
            LocationOption = location;
            NetworksOption = networks;
            PlacementGroupOption = placementGroup;
            PublicNetOption = publicNet;
            SshKeysOption = sshKeys;
            StartAfterCreateOption = startAfterCreate;
            UserDataOption = userData;
            VolumesOption = volumes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID or name of the Image the Server is created from
        /// </summary>
        /// <value>ID or name of the Image the Server is created from</value>
        /* <example>ubuntu-20.04</example> */
        [JsonPropertyName("image")]
        public string Image { get; set; }

        /// <summary>
        /// Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)
        /// </summary>
        /// <value>Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)</value>
        /* <example>my-server</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ID or name of the Server type this Server should be created with
        /// </summary>
        /// <value>ID or name of the Server type this Server should be created with</value>
        /* <example>cpx11</example> */
        [JsonPropertyName("server_type")]
        public string ServerType { get; set; }

        /// <summary>
        /// Used to track the state of Automount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AutomountOption { get; private set; }

        /// <summary>
        /// Auto-mount Volumes after attach
        /// </summary>
        /// <value>Auto-mount Volumes after attach</value>
        /* <example>false</example> */
        [JsonPropertyName("automount")]
        public bool? Automount { get { return this.AutomountOption; } set { this.AutomountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Datacenter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DatacenterOption { get; private set; }

        /// <summary>
        /// ID or name of Datacenter to create Server in (must not be used together with location)
        /// </summary>
        /// <value>ID or name of Datacenter to create Server in (must not be used together with location)</value>
        /* <example>nbg1-dc3</example> */
        [JsonPropertyName("datacenter")]
        public string? Datacenter { get { return this.DatacenterOption; } set { this.DatacenterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Firewalls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CreateServerRequestFirewalls>?> FirewallsOption { get; private set; }

        /// <summary>
        /// Firewalls which should be applied on the Server&#39;s public network interface at creation time
        /// </summary>
        /// <value>Firewalls which should be applied on the Server&#39;s public network interface at creation time</value>
        /* <example>[{&quot;firewall&quot;:38}]</example> */
        [JsonPropertyName("firewalls")]
        public List<CreateServerRequestFirewalls>? Firewalls { get { return this.FirewallsOption; } set { this.FirewallsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// ID or name of Location to create Server in (must not be used together with datacenter)
        /// </summary>
        /// <value>ID or name of Location to create Server in (must not be used together with datacenter)</value>
        /* <example>nbg1</example> */
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Networks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> NetworksOption { get; private set; }

        /// <summary>
        /// Network IDs which should be attached to the Server private network interface at the creation time
        /// </summary>
        /// <value>Network IDs which should be attached to the Server private network interface at the creation time</value>
        /* <example>[456]</example> */
        [JsonPropertyName("networks")]
        public List<long>? Networks { get { return this.NetworksOption; } set { this.NetworksOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlacementGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PlacementGroupOption { get; private set; }

        /// <summary>
        /// ID of the Placement Group the server should be in
        /// </summary>
        /// <value>ID of the Placement Group the server should be in</value>
        /* <example>1</example> */
        [JsonPropertyName("placement_group")]
        public long? PlacementGroup { get { return this.PlacementGroupOption; } set { this.PlacementGroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateServerRequestPublicNet?> PublicNetOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicNet
        /// </summary>
        [JsonPropertyName("public_net")]
        public CreateServerRequestPublicNet? PublicNet { get { return this.PublicNetOption; } set { this.PublicNetOption = new(value); } }

        /// <summary>
        /// Used to track the state of SshKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SshKeysOption { get; private set; }

        /// <summary>
        /// SSH key IDs (&#x60;integer&#x60;) or names (&#x60;string&#x60;) which should be injected into the Server at creation time
        /// </summary>
        /// <value>SSH key IDs (&#x60;integer&#x60;) or names (&#x60;string&#x60;) which should be injected into the Server at creation time</value>
        /* <example>[&quot;my-ssh-key&quot;]</example> */
        [JsonPropertyName("ssh_keys")]
        public List<string>? SshKeys { get { return this.SshKeysOption; } set { this.SshKeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartAfterCreate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StartAfterCreateOption { get; private set; }

        /// <summary>
        /// This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the &#x60;next_actions&#x60; response object.
        /// </summary>
        /// <value>This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the &#x60;next_actions&#x60; response object.</value>
        /* <example>true</example> */
        [JsonPropertyName("start_after_create")]
        public bool? StartAfterCreate { get { return this.StartAfterCreateOption; } set { this.StartAfterCreateOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserDataOption { get; private set; }

        /// <summary>
        /// Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
        /// </summary>
        /// <value>Cloud-Init user data to use during Server creation. This field is limited to 32KiB.</value>
        /* <example>#cloud-config
runcmd:
- [touch, /root/cloud-init-worked]
</example> */
        [JsonPropertyName("user_data")]
        public string? UserData { get { return this.UserDataOption; } set { this.UserDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volumes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> VolumesOption { get; private set; }

        /// <summary>
        /// Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
        /// </summary>
        /// <value>Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.</value>
        /* <example>[123]</example> */
        [JsonPropertyName("volumes")]
        public List<long>? Volumes { get { return this.VolumesOption; } set { this.VolumesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateServerRequest {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServerType: ").Append(ServerType).Append("\n");
            sb.Append("  Automount: ").Append(Automount).Append("\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  Firewalls: ").Append(Firewalls).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  PublicNet: ").Append(PublicNet).Append("\n");
            sb.Append("  SshKeys: ").Append(SshKeys).Append("\n");
            sb.Append("  StartAfterCreate: ").Append(StartAfterCreate).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateServerRequest" />
    /// </summary>
    internal class CreateServerRequestJsonConverter : JsonConverter<CreateServerRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateServerRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateServerRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> image = default;
            Option<string?> name = default;
            Option<string?> serverType = default;
            Option<bool?> automount = default;
            Option<string?> datacenter = default;
            Option<List<CreateServerRequestFirewalls>?> firewalls = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> location = default;
            Option<List<long>?> networks = default;
            Option<long?> placementGroup = default;
            Option<CreateServerRequestPublicNet?> publicNet = default;
            Option<List<string>?> sshKeys = default;
            Option<bool?> startAfterCreate = default;
            Option<string?> userData = default;
            Option<List<long>?> volumes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "image":
                            image = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "server_type":
                            serverType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "automount":
                            automount = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "datacenter":
                            datacenter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firewalls":
                            firewalls = new Option<List<CreateServerRequestFirewalls>?>(JsonSerializer.Deserialize<List<CreateServerRequestFirewalls>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "networks":
                            networks = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "placement_group":
                            placementGroup = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "public_net":
                            publicNet = new Option<CreateServerRequestPublicNet?>(JsonSerializer.Deserialize<CreateServerRequestPublicNet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ssh_keys":
                            sshKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "start_after_create":
                            startAfterCreate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "user_data":
                            userData = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "volumes":
                            volumes = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class CreateServerRequest.", nameof(image));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateServerRequest.", nameof(name));

            if (!serverType.IsSet)
                throw new ArgumentException("Property is required for class CreateServerRequest.", nameof(serverType));

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class CreateServerRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateServerRequest.");

            if (serverType.IsSet && serverType.Value == null)
                throw new ArgumentNullException(nameof(serverType), "Property is not nullable for class CreateServerRequest.");

            if (automount.IsSet && automount.Value == null)
                throw new ArgumentNullException(nameof(automount), "Property is not nullable for class CreateServerRequest.");

            if (datacenter.IsSet && datacenter.Value == null)
                throw new ArgumentNullException(nameof(datacenter), "Property is not nullable for class CreateServerRequest.");

            if (firewalls.IsSet && firewalls.Value == null)
                throw new ArgumentNullException(nameof(firewalls), "Property is not nullable for class CreateServerRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateServerRequest.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class CreateServerRequest.");

            if (networks.IsSet && networks.Value == null)
                throw new ArgumentNullException(nameof(networks), "Property is not nullable for class CreateServerRequest.");

            if (placementGroup.IsSet && placementGroup.Value == null)
                throw new ArgumentNullException(nameof(placementGroup), "Property is not nullable for class CreateServerRequest.");

            if (publicNet.IsSet && publicNet.Value == null)
                throw new ArgumentNullException(nameof(publicNet), "Property is not nullable for class CreateServerRequest.");

            if (sshKeys.IsSet && sshKeys.Value == null)
                throw new ArgumentNullException(nameof(sshKeys), "Property is not nullable for class CreateServerRequest.");

            if (startAfterCreate.IsSet && startAfterCreate.Value == null)
                throw new ArgumentNullException(nameof(startAfterCreate), "Property is not nullable for class CreateServerRequest.");

            if (userData.IsSet && userData.Value == null)
                throw new ArgumentNullException(nameof(userData), "Property is not nullable for class CreateServerRequest.");

            if (volumes.IsSet && volumes.Value == null)
                throw new ArgumentNullException(nameof(volumes), "Property is not nullable for class CreateServerRequest.");

            return new CreateServerRequest(image.Value!, name.Value!, serverType.Value!, automount, datacenter, firewalls, labels, location, networks, placementGroup, publicNet, sshKeys, startAfterCreate, userData, volumes);
        }

        /// <summary>
        /// Serializes a <see cref="CreateServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateServerRequest createServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createServerRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateServerRequest createServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createServerRequest.Image == null)
                throw new ArgumentNullException(nameof(createServerRequest.Image), "Property is required for class CreateServerRequest.");

            if (createServerRequest.Name == null)
                throw new ArgumentNullException(nameof(createServerRequest.Name), "Property is required for class CreateServerRequest.");

            if (createServerRequest.ServerType == null)
                throw new ArgumentNullException(nameof(createServerRequest.ServerType), "Property is required for class CreateServerRequest.");

            if (createServerRequest.DatacenterOption.IsSet && createServerRequest.Datacenter == null)
                throw new ArgumentNullException(nameof(createServerRequest.Datacenter), "Property is required for class CreateServerRequest.");

            if (createServerRequest.FirewallsOption.IsSet && createServerRequest.Firewalls == null)
                throw new ArgumentNullException(nameof(createServerRequest.Firewalls), "Property is required for class CreateServerRequest.");

            if (createServerRequest.LabelsOption.IsSet && createServerRequest.Labels == null)
                throw new ArgumentNullException(nameof(createServerRequest.Labels), "Property is required for class CreateServerRequest.");

            if (createServerRequest.LocationOption.IsSet && createServerRequest.Location == null)
                throw new ArgumentNullException(nameof(createServerRequest.Location), "Property is required for class CreateServerRequest.");

            if (createServerRequest.NetworksOption.IsSet && createServerRequest.Networks == null)
                throw new ArgumentNullException(nameof(createServerRequest.Networks), "Property is required for class CreateServerRequest.");

            if (createServerRequest.PublicNetOption.IsSet && createServerRequest.PublicNet == null)
                throw new ArgumentNullException(nameof(createServerRequest.PublicNet), "Property is required for class CreateServerRequest.");

            if (createServerRequest.SshKeysOption.IsSet && createServerRequest.SshKeys == null)
                throw new ArgumentNullException(nameof(createServerRequest.SshKeys), "Property is required for class CreateServerRequest.");

            if (createServerRequest.UserDataOption.IsSet && createServerRequest.UserData == null)
                throw new ArgumentNullException(nameof(createServerRequest.UserData), "Property is required for class CreateServerRequest.");

            if (createServerRequest.VolumesOption.IsSet && createServerRequest.Volumes == null)
                throw new ArgumentNullException(nameof(createServerRequest.Volumes), "Property is required for class CreateServerRequest.");

            writer.WriteString("image", createServerRequest.Image);

            writer.WriteString("name", createServerRequest.Name);

            writer.WriteString("server_type", createServerRequest.ServerType);

            if (createServerRequest.AutomountOption.IsSet)
                writer.WriteBoolean("automount", createServerRequest.AutomountOption.Value!.Value);

            if (createServerRequest.DatacenterOption.IsSet)
                writer.WriteString("datacenter", createServerRequest.Datacenter);

            if (createServerRequest.FirewallsOption.IsSet)
            {
                writer.WritePropertyName("firewalls");
                JsonSerializer.Serialize(writer, createServerRequest.Firewalls, jsonSerializerOptions);
            }
            if (createServerRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createServerRequest.Labels, jsonSerializerOptions);
            }
            if (createServerRequest.LocationOption.IsSet)
                writer.WriteString("location", createServerRequest.Location);

            if (createServerRequest.NetworksOption.IsSet)
            {
                writer.WritePropertyName("networks");
                JsonSerializer.Serialize(writer, createServerRequest.Networks, jsonSerializerOptions);
            }
            if (createServerRequest.PlacementGroupOption.IsSet)
                writer.WriteNumber("placement_group", createServerRequest.PlacementGroupOption.Value!.Value);

            if (createServerRequest.PublicNetOption.IsSet)
            {
                writer.WritePropertyName("public_net");
                JsonSerializer.Serialize(writer, createServerRequest.PublicNet, jsonSerializerOptions);
            }
            if (createServerRequest.SshKeysOption.IsSet)
            {
                writer.WritePropertyName("ssh_keys");
                JsonSerializer.Serialize(writer, createServerRequest.SshKeys, jsonSerializerOptions);
            }
            if (createServerRequest.StartAfterCreateOption.IsSet)
                writer.WriteBoolean("start_after_create", createServerRequest.StartAfterCreateOption.Value!.Value);

            if (createServerRequest.UserDataOption.IsSet)
                writer.WriteString("user_data", createServerRequest.UserData);

            if (createServerRequest.VolumesOption.IsSet)
            {
                writer.WritePropertyName("volumes");
                JsonSerializer.Serialize(writer, createServerRequest.Volumes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreateServerRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateServerRequest))]
    internal partial class CreateServerRequestSerializationContext : JsonSerializerContext { }
}
