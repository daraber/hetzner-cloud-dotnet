// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize
    /// </summary>
    internal partial class ResizeVolumeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResizeVolumeRequest" /> class.
        /// </summary>
        /// <param name="size">New Volume size in GB (must be greater than current size)</param>
        [JsonConstructor]
        internal ResizeVolumeRequest(decimal size)
        {
            Size = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// New Volume size in GB (must be greater than current size)
        /// </summary>
        /// <value>New Volume size in GB (must be greater than current size)</value>
        /* <example>50</example> */
        [JsonPropertyName("size")]
        public decimal Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResizeVolumeRequest {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResizeVolumeRequest" />
    /// </summary>
    internal class ResizeVolumeRequestJsonConverter : JsonConverter<ResizeVolumeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResizeVolumeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResizeVolumeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            size = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class ResizeVolumeRequest.", nameof(size));

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ResizeVolumeRequest.");

            return new ResizeVolumeRequest(size.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ResizeVolumeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resizeVolumeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResizeVolumeRequest resizeVolumeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resizeVolumeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResizeVolumeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resizeVolumeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResizeVolumeRequest resizeVolumeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("size", resizeVolumeRequest.Size);
        }
    }

    /// <summary>
    /// The ResizeVolumeRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ResizeVolumeRequest))]
    internal partial class ResizeVolumeRequestSerializationContext : JsonSerializerContext { }
}
