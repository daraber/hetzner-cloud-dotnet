// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// FloatingIp
    /// </summary>
    public partial class FloatingIp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FloatingIp" /> class.
        /// </summary>
        /// <param name="blocked">Indicates whether the [Floating IP](#floating-ips) is blocked.</param>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="dnsPtr">List of reverse DNS entries for the [Floating IP](#floating-ips). </param>
        /// <param name="homeLocation">homeLocation</param>
        /// <param name="id">ID of the Floating IP.</param>
        /// <param name="ip">IP address.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="protection">protection</param>
        /// <param name="type">type</param>
        /// <param name="description">Description of the Resource.</param>
        /// <param name="server">[Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. </param>
        [JsonConstructor]
        public FloatingIp(bool blocked, string created, List<DnsPtr> dnsPtr, Location homeLocation, long id, string ip, Dictionary<string, string> labels, string name, Protection protection, IpType type, string? description = default, long? server = default)
        {
            Blocked = blocked;
            Created = created;
            DnsPtr = dnsPtr;
            HomeLocation = homeLocation;
            Id = id;
            Ip = ip;
            Labels = labels;
            Name = name;
            Protection = protection;
            Type = type;
            Description = description;
            Server = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public IpType Type { get; set; }

        /// <summary>
        /// Indicates whether the [Floating IP](#floating-ips) is blocked.
        /// </summary>
        /// <value>Indicates whether the [Floating IP](#floating-ips) is blocked.</value>
        /* <example>false</example> */
        [JsonPropertyName("blocked")]
        public bool Blocked { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// List of reverse DNS entries for the [Floating IP](#floating-ips). 
        /// </summary>
        /// <value>List of reverse DNS entries for the [Floating IP](#floating-ips). </value>
        [JsonPropertyName("dns_ptr")]
        public List<DnsPtr> DnsPtr { get; set; }

        /// <summary>
        /// Gets or Sets HomeLocation
        /// </summary>
        [JsonPropertyName("home_location")]
        public Location HomeLocation { get; set; }

        /// <summary>
        /// ID of the Floating IP.
        /// </summary>
        /// <value>ID of the Floating IP.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// IP address.
        /// </summary>
        /// <value>IP address.</value>
        /* <example>131.232.99.1</example> */
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// Description of the Resource.
        /// </summary>
        /// <value>Description of the Resource.</value>
        /* <example>This describes my resource</example> */
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// [Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. 
        /// </summary>
        /// <value>[Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. </value>
        /* <example>42</example> */
        [JsonPropertyName("server")]
        public long? Server { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FloatingIp {\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DnsPtr: ").Append(DnsPtr).Append("\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FloatingIp" />
    /// </summary>
    public class FloatingIpJsonConverter : JsonConverter<FloatingIp>
    {
        /// <summary>
        /// Deserializes json to <see cref="FloatingIp" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FloatingIp Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> blocked = default;
            Option<string?> created = default;
            Option<List<DnsPtr>?> dnsPtr = default;
            Option<Location?> homeLocation = default;
            Option<long?> id = default;
            Option<string?> ip = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<Protection?> protection = default;
            Option<IpType?> type = default;
            Option<string?> description = default;
            Option<long?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "blocked":
                            blocked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dns_ptr":
                            dnsPtr = new Option<List<DnsPtr>?>(JsonSerializer.Deserialize<List<DnsPtr>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "home_location":
                            homeLocation = new Option<Location?>(JsonSerializer.Deserialize<Location>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IpType?>(IpTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "server":
                            server = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!blocked.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(blocked));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(created));

            if (!dnsPtr.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(dnsPtr));

            if (!homeLocation.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(homeLocation));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(id));

            if (!ip.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(ip));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(name));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(protection));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(type));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(description));

            if (!server.IsSet)
                throw new ArgumentException("Property is required for class FloatingIp.", nameof(server));

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class FloatingIp.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class FloatingIp.");

            if (dnsPtr.IsSet && dnsPtr.Value == null)
                throw new ArgumentNullException(nameof(dnsPtr), "Property is not nullable for class FloatingIp.");

            if (homeLocation.IsSet && homeLocation.Value == null)
                throw new ArgumentNullException(nameof(homeLocation), "Property is not nullable for class FloatingIp.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FloatingIp.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class FloatingIp.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class FloatingIp.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FloatingIp.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class FloatingIp.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FloatingIp.");

            return new FloatingIp(blocked.Value!.Value!, created.Value!, dnsPtr.Value!, homeLocation.Value!, id.Value!.Value!, ip.Value!, labels.Value!, name.Value!, protection.Value!, type.Value!.Value!, description.Value!, server.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FloatingIp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="floatingIp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FloatingIp floatingIp, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, floatingIp, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FloatingIp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="floatingIp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FloatingIp floatingIp, JsonSerializerOptions jsonSerializerOptions)
        {
            if (floatingIp.Created == null)
                throw new ArgumentNullException(nameof(floatingIp.Created), "Property is required for class FloatingIp.");

            if (floatingIp.DnsPtr == null)
                throw new ArgumentNullException(nameof(floatingIp.DnsPtr), "Property is required for class FloatingIp.");

            if (floatingIp.HomeLocation == null)
                throw new ArgumentNullException(nameof(floatingIp.HomeLocation), "Property is required for class FloatingIp.");

            if (floatingIp.Ip == null)
                throw new ArgumentNullException(nameof(floatingIp.Ip), "Property is required for class FloatingIp.");

            if (floatingIp.Labels == null)
                throw new ArgumentNullException(nameof(floatingIp.Labels), "Property is required for class FloatingIp.");

            if (floatingIp.Name == null)
                throw new ArgumentNullException(nameof(floatingIp.Name), "Property is required for class FloatingIp.");

            if (floatingIp.Protection == null)
                throw new ArgumentNullException(nameof(floatingIp.Protection), "Property is required for class FloatingIp.");

            writer.WriteBoolean("blocked", floatingIp.Blocked);

            writer.WriteString("created", floatingIp.Created);

            writer.WritePropertyName("dns_ptr");
            JsonSerializer.Serialize(writer, floatingIp.DnsPtr, jsonSerializerOptions);
            writer.WritePropertyName("home_location");
            JsonSerializer.Serialize(writer, floatingIp.HomeLocation, jsonSerializerOptions);
            writer.WriteNumber("id", floatingIp.Id);

            writer.WriteString("ip", floatingIp.Ip);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, floatingIp.Labels, jsonSerializerOptions);
            writer.WriteString("name", floatingIp.Name);

            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, floatingIp.Protection, jsonSerializerOptions);
            var typeRawValue = IpTypeValueConverter.ToJsonValue(floatingIp.Type);
            writer.WriteString("type", typeRawValue);

            if (floatingIp.Description != null)
                writer.WriteString("description", floatingIp.Description);
            else
                writer.WriteNull("description");

            if (floatingIp.Server != null)
                writer.WriteNumber("server", floatingIp.Server.Value);
            else
                writer.WriteNull("server");
        }
    }

    /// <summary>
    /// The FloatingIpSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FloatingIp))]
    public partial class FloatingIpSerializationContext : JsonSerializerContext { }
}
