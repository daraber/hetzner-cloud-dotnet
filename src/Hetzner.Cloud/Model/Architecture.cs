// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Type of cpu architecture this image is compatible with. | Type of cpu architecture
    /// </summary>
    /// <value>Type of cpu architecture this image is compatible with. | Type of cpu architecture</value>
    public enum Architecture
    {
        /// <summary>
        /// Enum Arm for value: arm
        /// </summary>
        Arm = 1,

        /// <summary>
        /// Enum X86 for value: x86
        /// </summary>
        X86 = 2
    }

    /// <summary>
    /// Converts <see cref="Architecture"/> to and from the JSON value
    /// </summary>
    public static class ArchitectureValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Architecture"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Architecture FromString(string value)
        {
            if (value.Equals("arm"))
                return Architecture.Arm;

            if (value.Equals("x86"))
                return Architecture.X86;

            throw new NotImplementedException($"Could not convert value to type Architecture: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Architecture"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Architecture? FromStringOrDefault(string value)
        {
            if (value.Equals("arm"))
                return Architecture.Arm;

            if (value.Equals("x86"))
                return Architecture.X86;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Architecture"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Architecture value)
        {
            if (value == Architecture.Arm)
                return "arm";

            if (value == Architecture.X86)
                return "x86";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Architecture"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ArchitectureJsonConverter : JsonConverter<Architecture>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Architecture Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Architecture? result = rawValue == null
                ? null
                : ArchitectureValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Architecture to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="architecture"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Architecture architecture, JsonSerializerOptions options)
        {
            writer.WriteStringValue(architecture.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Architecture"/>
    /// </summary>
    public class ArchitectureNullableJsonConverter : JsonConverter<Architecture?>
    {
        /// <summary>
        /// Returns a Architecture from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Architecture? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Architecture? result = rawValue == null
                ? null
                : ArchitectureValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="architecture"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Architecture? architecture, JsonSerializerOptions options)
        {
            writer.WriteStringValue(architecture?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The ArchitectureSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Architecture))]
    internal partial class ArchitectureSerializationContext : JsonSerializerContext { }
}
