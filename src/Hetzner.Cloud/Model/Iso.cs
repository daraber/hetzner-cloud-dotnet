// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Iso
    /// </summary>
    internal partial class Iso : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Iso" /> class.
        /// </summary>
        /// <param name="description">Description of the ISO</param>
        /// <param name="id">ID of the ISO.</param>
        /// <param name="architecture">architecture</param>
        /// <param name="deprecation">deprecation</param>
        /// <param name="name">Unique identifier of the ISO. Only set for public ISOs</param>
        /// <param name="type">Type of the ISO</param>
        [JsonConstructor]
        internal Iso(string description, long id, ArchitectureOptional? architecture = default, DeprecationInfo? deprecation = default, string? name = default, TypeEnum? type = default)
        {
            Description = description;
            Id = id;
            Architecture = architecture;
            Deprecation = deprecation;
            Name = name;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Architecture
        /// </summary>
        [JsonPropertyName("architecture")]
        public ArchitectureOptional? Architecture { get; set; }

        /// <summary>
        /// Type of the ISO
        /// </summary>
        /// <value>Type of the ISO</value>
        internal enum TypeEnum
        {
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            Private = 1,

            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            Public = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("private"))
                return TypeEnum.Private;

            if (value.Equals("public"))
                return TypeEnum.Public;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("private"))
                return TypeEnum.Private;

            if (value.Equals("public"))
                return TypeEnum.Public;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == TypeEnum.Private)
                return "private";

            if (value == TypeEnum.Public)
                return "public";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of the ISO
        /// </summary>
        /// <value>Type of the ISO</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Description of the ISO
        /// </summary>
        /// <value>Description of the ISO</value>
        /* <example>FreeBSD 11.0 x64</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// ID of the ISO.
        /// </summary>
        /// <value>ID of the ISO.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Deprecation
        /// </summary>
        [JsonPropertyName("deprecation")]
        public DeprecationInfo? Deprecation { get; set; }

        /// <summary>
        /// Unique identifier of the ISO. Only set for public ISOs
        /// </summary>
        /// <value>Unique identifier of the ISO. Only set for public ISOs</value>
        /* <example>FreeBSD-11.0-RELEASE-amd64-dvd1</example> */
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Iso {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  Deprecation: ").Append(Deprecation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Iso" />
    /// </summary>
    internal class IsoJsonConverter : JsonConverter<Iso>
    {
        /// <summary>
        /// Deserializes json to <see cref="Iso" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Iso Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<long?> id = default;
            Option<ArchitectureOptional?> architecture = default;
            Option<DeprecationInfo?> deprecation = default;
            Option<string?> name = default;
            Option<Iso.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "architecture":
                            string? architectureRawValue = utf8JsonReader.GetString();
                            if (architectureRawValue != null)
                                architecture = new Option<ArchitectureOptional?>(ArchitectureOptionalValueConverter.FromStringOrDefault(architectureRawValue));
                            break;
                        case "deprecation":
                            deprecation = new Option<DeprecationInfo?>(JsonSerializer.Deserialize<DeprecationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Iso.TypeEnum?>(Iso.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(description));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(id));

            if (!architecture.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(architecture));

            if (!deprecation.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(deprecation));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Iso.", nameof(type));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Iso.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Iso.");

            return new Iso(description.Value!, id.Value!.Value!, architecture.Value!, deprecation.Value!, name.Value!, type.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Iso" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iso"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Iso iso, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, iso, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Iso" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iso"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Iso iso, JsonSerializerOptions jsonSerializerOptions)
        {
            if (iso.Description == null)
                throw new ArgumentNullException(nameof(iso.Description), "Property is required for class Iso.");

            writer.WriteString("description", iso.Description);

            writer.WriteNumber("id", iso.Id);

            if (iso.Architecture == null)
                writer.WriteNull("architecture");
            else
            {
                var architectureRawValue = ArchitectureOptionalValueConverter.ToJsonValue(iso.Architecture.Value);
                if (architectureRawValue != null)
                    writer.WriteString("architecture", architectureRawValue);
                else
                    writer.WriteNull("architecture");
            }

            if (iso.Deprecation != null)
            {
                writer.WritePropertyName("deprecation");
                JsonSerializer.Serialize(writer, iso.Deprecation, jsonSerializerOptions);
            }
            else
                writer.WriteNull("deprecation");
            if (iso.Name != null)
                writer.WriteString("name", iso.Name);
            else
                writer.WriteNull("name");

            var typeRawValue = Iso.TypeEnumToJsonValue(iso.Type!.Value);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");
        }
    }

    /// <summary>
    /// The IsoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Iso))]
    internal partial class IsoSerializationContext : JsonSerializerContext { }
}
