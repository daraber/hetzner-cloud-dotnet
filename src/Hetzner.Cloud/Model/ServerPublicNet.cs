// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Public network information. The Server&#39;s IPv4 address can be found in &#x60;public_net-&gt;ipv4-&gt;ip&#x60;
    /// </summary>
    internal partial class ServerPublicNet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerPublicNet" /> class.
        /// </summary>
        /// <param name="floatingIps">IDs of Floating IPs assigned to this Server</param>
        /// <param name="firewalls">Firewalls applied to the public network interface of this Server</param>
        /// <param name="ipv4">ipv4</param>
        /// <param name="ipv6">ipv6</param>
        [JsonConstructor]
        internal ServerPublicNet(List<long> floatingIps, Option<List<ServerPublicNetFirewall>?> firewalls = default, Ipv4? ipv4 = default, Ipv6? ipv6 = default)
        {
            FloatingIps = floatingIps;
            FirewallsOption = firewalls;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// IDs of Floating IPs assigned to this Server
        /// </summary>
        /// <value>IDs of Floating IPs assigned to this Server</value>
        /* <example>[478]</example> */
        [JsonPropertyName("floating_ips")]
        public List<long> FloatingIps { get; set; }

        /// <summary>
        /// Used to track the state of Firewalls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ServerPublicNetFirewall>?> FirewallsOption { get; private set; }

        /// <summary>
        /// Firewalls applied to the public network interface of this Server
        /// </summary>
        /// <value>Firewalls applied to the public network interface of this Server</value>
        [JsonPropertyName("firewalls")]
        public List<ServerPublicNetFirewall>? Firewalls { get { return this.FirewallsOption; } set { this.FirewallsOption = new(value); } }

        /// <summary>
        /// Gets or Sets Ipv4
        /// </summary>
        [JsonPropertyName("ipv4")]
        public Ipv4? Ipv4 { get; set; }

        /// <summary>
        /// Gets or Sets Ipv6
        /// </summary>
        [JsonPropertyName("ipv6")]
        public Ipv6? Ipv6 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerPublicNet {\n");
            sb.Append("  FloatingIps: ").Append(FloatingIps).Append("\n");
            sb.Append("  Firewalls: ").Append(Firewalls).Append("\n");
            sb.Append("  Ipv4: ").Append(Ipv4).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerPublicNet" />
    /// </summary>
    internal class ServerPublicNetJsonConverter : JsonConverter<ServerPublicNet>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerPublicNet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerPublicNet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<long>?> floatingIps = default;
            Option<List<ServerPublicNetFirewall>?> firewalls = default;
            Option<Ipv4?> ipv4 = default;
            Option<Ipv6?> ipv6 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "floating_ips":
                            floatingIps = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "firewalls":
                            firewalls = new Option<List<ServerPublicNetFirewall>?>(JsonSerializer.Deserialize<List<ServerPublicNetFirewall>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ipv4":
                            ipv4 = new Option<Ipv4?>(JsonSerializer.Deserialize<Ipv4>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ipv6":
                            ipv6 = new Option<Ipv6?>(JsonSerializer.Deserialize<Ipv6>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!floatingIps.IsSet)
                throw new ArgumentException("Property is required for class ServerPublicNet.", nameof(floatingIps));

            if (!ipv4.IsSet)
                throw new ArgumentException("Property is required for class ServerPublicNet.", nameof(ipv4));

            if (!ipv6.IsSet)
                throw new ArgumentException("Property is required for class ServerPublicNet.", nameof(ipv6));

            if (floatingIps.IsSet && floatingIps.Value == null)
                throw new ArgumentNullException(nameof(floatingIps), "Property is not nullable for class ServerPublicNet.");

            if (firewalls.IsSet && firewalls.Value == null)
                throw new ArgumentNullException(nameof(firewalls), "Property is not nullable for class ServerPublicNet.");

            return new ServerPublicNet(floatingIps.Value!, firewalls, ipv4.Value!, ipv6.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerPublicNet serverPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverPublicNet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerPublicNet serverPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverPublicNet.FloatingIps == null)
                throw new ArgumentNullException(nameof(serverPublicNet.FloatingIps), "Property is required for class ServerPublicNet.");

            if (serverPublicNet.FirewallsOption.IsSet && serverPublicNet.Firewalls == null)
                throw new ArgumentNullException(nameof(serverPublicNet.Firewalls), "Property is required for class ServerPublicNet.");

            writer.WritePropertyName("floating_ips");
            JsonSerializer.Serialize(writer, serverPublicNet.FloatingIps, jsonSerializerOptions);
            if (serverPublicNet.FirewallsOption.IsSet)
            {
                writer.WritePropertyName("firewalls");
                JsonSerializer.Serialize(writer, serverPublicNet.Firewalls, jsonSerializerOptions);
            }
            if (serverPublicNet.Ipv4 != null)
            {
                writer.WritePropertyName("ipv4");
                JsonSerializer.Serialize(writer, serverPublicNet.Ipv4, jsonSerializerOptions);
            }
            else
                writer.WriteNull("ipv4");
            if (serverPublicNet.Ipv6 != null)
            {
                writer.WritePropertyName("ipv6");
                JsonSerializer.Serialize(writer, serverPublicNet.Ipv6, jsonSerializerOptions);
            }
            else
                writer.WriteNull("ipv6");
        }
    }

    /// <summary>
    /// The ServerPublicNetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ServerPublicNet))]
    internal partial class ServerPublicNetSerializationContext : JsonSerializerContext { }
}
