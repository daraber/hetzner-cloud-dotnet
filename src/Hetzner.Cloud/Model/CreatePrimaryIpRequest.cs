// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/primary_ips
    /// </summary>
    public partial class CreatePrimaryIpRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePrimaryIpRequest" /> class.
        /// </summary>
        /// <param name="assigneeType">Type of resource the [Primary IP](#primary-ips) can get assigned to.  Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers), therefore this field must be set to &#x60;server&#x60;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="type">type</param>
        /// <param name="assigneeId">ID of resource to assign the [Primary IP](#primary-ips) to.  Omitted if the [Primary IP](#primary-ips) should not get assigned. </param>
        /// <param name="autoDelete">Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.  (default to false)</param>
        /// <param name="datacenter">[Datacenter](#datacenters) ID or name.  The  [Primary IP](#primary-ips) will be bound to this [Datacenter](#datacenters). Omit if &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; is provided. </param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        [JsonConstructor]
        public CreatePrimaryIpRequest(AssigneeTypeEnum assigneeType, string name, IpType type, Option<long?> assigneeId = default, Option<bool?> autoDelete = default, Option<string?> datacenter = default, Option<Dictionary<string, string>?> labels = default)
        {
            AssigneeType = assigneeType;
            Name = name;
            Type = type;
            AssigneeIdOption = assigneeId;
            AutoDeleteOption = autoDelete;
            DatacenterOption = datacenter;
            LabelsOption = labels;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of resource the [Primary IP](#primary-ips) can get assigned to.  Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers), therefore this field must be set to &#x60;server&#x60;. 
        /// </summary>
        /// <value>Type of resource the [Primary IP](#primary-ips) can get assigned to.  Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers), therefore this field must be set to &#x60;server&#x60;. </value>
        public enum AssigneeTypeEnum
        {
            /// <summary>
            /// Enum Server for value: server
            /// </summary>
            Server = 1
        }

        /// <summary>
        /// Returns a <see cref="AssigneeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AssigneeTypeEnum AssigneeTypeEnumFromString(string value)
        {
            if (value.Equals("server"))
                return AssigneeTypeEnum.Server;

            throw new NotImplementedException($"Could not convert value to type AssigneeTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AssigneeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssigneeTypeEnum? AssigneeTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("server"))
                return AssigneeTypeEnum.Server;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssigneeTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AssigneeTypeEnumToJsonValue(AssigneeTypeEnum value)
        {
            if (value == AssigneeTypeEnum.Server)
                return "server";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of resource the [Primary IP](#primary-ips) can get assigned to.  Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers), therefore this field must be set to &#x60;server&#x60;. 
        /// </summary>
        /// <value>Type of resource the [Primary IP](#primary-ips) can get assigned to.  Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers), therefore this field must be set to &#x60;server&#x60;. </value>
        /* <example>server</example> */
        [JsonPropertyName("assignee_type")]
        public AssigneeTypeEnum AssigneeType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public IpType Type { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of AssigneeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AssigneeIdOption { get; private set; }

        /// <summary>
        /// ID of resource to assign the [Primary IP](#primary-ips) to.  Omitted if the [Primary IP](#primary-ips) should not get assigned. 
        /// </summary>
        /// <value>ID of resource to assign the [Primary IP](#primary-ips) to.  Omitted if the [Primary IP](#primary-ips) should not get assigned. </value>
        /* <example>17</example> */
        [JsonPropertyName("assignee_id")]
        public long? AssigneeId { get { return this.AssigneeIdOption; } set { this.AssigneeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoDelete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AutoDeleteOption { get; private set; }

        /// <summary>
        /// Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted. 
        /// </summary>
        /// <value>Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted. </value>
        /* <example>false</example> */
        [JsonPropertyName("auto_delete")]
        public bool? AutoDelete { get { return this.AutoDeleteOption; } set { this.AutoDeleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Datacenter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DatacenterOption { get; private set; }

        /// <summary>
        /// [Datacenter](#datacenters) ID or name.  The  [Primary IP](#primary-ips) will be bound to this [Datacenter](#datacenters). Omit if &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; is provided. 
        /// </summary>
        /// <value>[Datacenter](#datacenters) ID or name.  The  [Primary IP](#primary-ips) will be bound to this [Datacenter](#datacenters). Omit if &#x60;assignee_id&#x60;/&#x60;assignee_type&#x60; is provided. </value>
        /* <example>fsn1-dc8</example> */
        [JsonPropertyName("datacenter")]
        public string? Datacenter { get { return this.DatacenterOption; } set { this.DatacenterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePrimaryIpRequest {\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssigneeId: ").Append(AssigneeId).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePrimaryIpRequest" />
    /// </summary>
    public class CreatePrimaryIpRequestJsonConverter : JsonConverter<CreatePrimaryIpRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePrimaryIpRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePrimaryIpRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreatePrimaryIpRequest.AssigneeTypeEnum?> assigneeType = default;
            Option<string?> name = default;
            Option<IpType?> type = default;
            Option<long?> assigneeId = default;
            Option<bool?> autoDelete = default;
            Option<string?> datacenter = default;
            Option<Dictionary<string, string>?> labels = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignee_type":
                            string? assigneeTypeRawValue = utf8JsonReader.GetString();
                            if (assigneeTypeRawValue != null)
                                assigneeType = new Option<CreatePrimaryIpRequest.AssigneeTypeEnum?>(CreatePrimaryIpRequest.AssigneeTypeEnumFromStringOrDefault(assigneeTypeRawValue));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IpType?>(IpTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "assignee_id":
                            assigneeId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "auto_delete":
                            autoDelete = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "datacenter":
                            datacenter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assigneeType.IsSet)
                throw new ArgumentException("Property is required for class CreatePrimaryIpRequest.", nameof(assigneeType));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreatePrimaryIpRequest.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreatePrimaryIpRequest.", nameof(type));

            if (assigneeType.IsSet && assigneeType.Value == null)
                throw new ArgumentNullException(nameof(assigneeType), "Property is not nullable for class CreatePrimaryIpRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreatePrimaryIpRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreatePrimaryIpRequest.");

            if (autoDelete.IsSet && autoDelete.Value == null)
                throw new ArgumentNullException(nameof(autoDelete), "Property is not nullable for class CreatePrimaryIpRequest.");

            if (datacenter.IsSet && datacenter.Value == null)
                throw new ArgumentNullException(nameof(datacenter), "Property is not nullable for class CreatePrimaryIpRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreatePrimaryIpRequest.");

            return new CreatePrimaryIpRequest(assigneeType.Value!.Value!, name.Value!, type.Value!.Value!, assigneeId, autoDelete, datacenter, labels);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePrimaryIpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPrimaryIpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePrimaryIpRequest createPrimaryIpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPrimaryIpRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePrimaryIpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPrimaryIpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePrimaryIpRequest createPrimaryIpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPrimaryIpRequest.Name == null)
                throw new ArgumentNullException(nameof(createPrimaryIpRequest.Name), "Property is required for class CreatePrimaryIpRequest.");

            if (createPrimaryIpRequest.DatacenterOption.IsSet && createPrimaryIpRequest.Datacenter == null)
                throw new ArgumentNullException(nameof(createPrimaryIpRequest.Datacenter), "Property is required for class CreatePrimaryIpRequest.");

            if (createPrimaryIpRequest.LabelsOption.IsSet && createPrimaryIpRequest.Labels == null)
                throw new ArgumentNullException(nameof(createPrimaryIpRequest.Labels), "Property is required for class CreatePrimaryIpRequest.");

            var assigneeTypeRawValue = CreatePrimaryIpRequest.AssigneeTypeEnumToJsonValue(createPrimaryIpRequest.AssigneeType);
            writer.WriteString("assignee_type", assigneeTypeRawValue);
            writer.WriteString("name", createPrimaryIpRequest.Name);

            var typeRawValue = IpTypeValueConverter.ToJsonValue(createPrimaryIpRequest.Type);
            writer.WriteString("type", typeRawValue);

            if (createPrimaryIpRequest.AssigneeIdOption.IsSet)
                if (createPrimaryIpRequest.AssigneeIdOption.Value != null)
                    writer.WriteNumber("assignee_id", createPrimaryIpRequest.AssigneeIdOption.Value!.Value);
                else
                    writer.WriteNull("assignee_id");

            if (createPrimaryIpRequest.AutoDeleteOption.IsSet)
                writer.WriteBoolean("auto_delete", createPrimaryIpRequest.AutoDeleteOption.Value!.Value);

            if (createPrimaryIpRequest.DatacenterOption.IsSet)
                writer.WriteString("datacenter", createPrimaryIpRequest.Datacenter);

            if (createPrimaryIpRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createPrimaryIpRequest.Labels, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreatePrimaryIpRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreatePrimaryIpRequest))]
    public partial class CreatePrimaryIpRequestSerializationContext : JsonSerializerContext { }
}
