// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// ListPricesResponsePricing
    /// </summary>
    internal partial class ListPricesResponsePricing : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListPricesResponsePricing" /> class.
        /// </summary>
        /// <param name="currency">Currency the returned prices are expressed in, coded according to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).</param>
        /// <param name="floatingIp">floatingIp</param>
        /// <param name="floatingIps">Price of [Floating IPs](#floating-ips) per type and per [Location](#locations).</param>
        /// <param name="image">image</param>
        /// <param name="loadBalancerTypes">Price of Load Balancer per [type](#load-balancer-types) and per [Location](#locations).</param>
        /// <param name="primaryIps">Price of [Primary IPs](#primary-ips) per type and per [Location](#locations).</param>
        /// <param name="serverBackup">serverBackup</param>
        /// <param name="serverTypes">Price of Server per [type](#server-types) and per [Location](#locations).</param>
        /// <param name="vatRate">VAT rate used for calculating prices with VAT.</param>
        /// <param name="volume">volume</param>
        [JsonConstructor]
        internal ListPricesResponsePricing(string currency, ListPricesResponsePricingFloatingIp floatingIp, List<ListPricesResponsePricingFloatingIps> floatingIps, ListPricesResponsePricingImage image, List<ListPricesResponsePricingLoadBalancerTypes> loadBalancerTypes, List<ListPricesResponsePricingPrimaryIps> primaryIps, ListPricesResponsePricingServerBackup serverBackup, List<ListPricesResponsePricingServerTypes> serverTypes, decimal vatRate, ListPricesResponsePricingVolume volume)
        {
            Currency = currency;
            FloatingIp = floatingIp;
            FloatingIps = floatingIps;
            Image = image;
            LoadBalancerTypes = loadBalancerTypes;
            PrimaryIps = primaryIps;
            ServerBackup = serverBackup;
            ServerTypes = serverTypes;
            VatRate = vatRate;
            Volume = volume;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Currency the returned prices are expressed in, coded according to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
        /// </summary>
        /// <value>Currency the returned prices are expressed in, coded according to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets FloatingIp
        /// </summary>
        [JsonPropertyName("floating_ip")]
        [Obsolete]
        public ListPricesResponsePricingFloatingIp FloatingIp { get; set; }

        /// <summary>
        /// Price of [Floating IPs](#floating-ips) per type and per [Location](#locations).
        /// </summary>
        /// <value>Price of [Floating IPs](#floating-ips) per type and per [Location](#locations).</value>
        [JsonPropertyName("floating_ips")]
        public List<ListPricesResponsePricingFloatingIps> FloatingIps { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("image")]
        public ListPricesResponsePricingImage Image { get; set; }

        /// <summary>
        /// Price of Load Balancer per [type](#load-balancer-types) and per [Location](#locations).
        /// </summary>
        /// <value>Price of Load Balancer per [type](#load-balancer-types) and per [Location](#locations).</value>
        [JsonPropertyName("load_balancer_types")]
        public List<ListPricesResponsePricingLoadBalancerTypes> LoadBalancerTypes { get; set; }

        /// <summary>
        /// Price of [Primary IPs](#primary-ips) per type and per [Location](#locations).
        /// </summary>
        /// <value>Price of [Primary IPs](#primary-ips) per type and per [Location](#locations).</value>
        [JsonPropertyName("primary_ips")]
        public List<ListPricesResponsePricingPrimaryIps> PrimaryIps { get; set; }

        /// <summary>
        /// Gets or Sets ServerBackup
        /// </summary>
        [JsonPropertyName("server_backup")]
        public ListPricesResponsePricingServerBackup ServerBackup { get; set; }

        /// <summary>
        /// Price of Server per [type](#server-types) and per [Location](#locations).
        /// </summary>
        /// <value>Price of Server per [type](#server-types) and per [Location](#locations).</value>
        [JsonPropertyName("server_types")]
        public List<ListPricesResponsePricingServerTypes> ServerTypes { get; set; }

        /// <summary>
        /// VAT rate used for calculating prices with VAT.
        /// </summary>
        /// <value>VAT rate used for calculating prices with VAT.</value>
        /* <example>19.00</example> */
        [JsonPropertyName("vat_rate")]
        public decimal VatRate { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [JsonPropertyName("volume")]
        public ListPricesResponsePricingVolume Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListPricesResponsePricing {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FloatingIp: ").Append(FloatingIp).Append("\n");
            sb.Append("  FloatingIps: ").Append(FloatingIps).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  LoadBalancerTypes: ").Append(LoadBalancerTypes).Append("\n");
            sb.Append("  PrimaryIps: ").Append(PrimaryIps).Append("\n");
            sb.Append("  ServerBackup: ").Append(ServerBackup).Append("\n");
            sb.Append("  ServerTypes: ").Append(ServerTypes).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListPricesResponsePricing" />
    /// </summary>
    internal class ListPricesResponsePricingJsonConverter : JsonConverter<ListPricesResponsePricing>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListPricesResponsePricing" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListPricesResponsePricing Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> currency = default;
            Option<ListPricesResponsePricingFloatingIp?> floatingIp = default;
            Option<List<ListPricesResponsePricingFloatingIps>?> floatingIps = default;
            Option<ListPricesResponsePricingImage?> image = default;
            Option<List<ListPricesResponsePricingLoadBalancerTypes>?> loadBalancerTypes = default;
            Option<List<ListPricesResponsePricingPrimaryIps>?> primaryIps = default;
            Option<ListPricesResponsePricingServerBackup?> serverBackup = default;
            Option<List<ListPricesResponsePricingServerTypes>?> serverTypes = default;
            Option<decimal?> vatRate = default;
            Option<ListPricesResponsePricingVolume?> volume = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "floating_ip":
                            floatingIp = new Option<ListPricesResponsePricingFloatingIp?>(JsonSerializer.Deserialize<ListPricesResponsePricingFloatingIp>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "floating_ips":
                            floatingIps = new Option<List<ListPricesResponsePricingFloatingIps>?>(JsonSerializer.Deserialize<List<ListPricesResponsePricingFloatingIps>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "image":
                            image = new Option<ListPricesResponsePricingImage?>(JsonSerializer.Deserialize<ListPricesResponsePricingImage>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "load_balancer_types":
                            loadBalancerTypes = new Option<List<ListPricesResponsePricingLoadBalancerTypes>?>(JsonSerializer.Deserialize<List<ListPricesResponsePricingLoadBalancerTypes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "primary_ips":
                            primaryIps = new Option<List<ListPricesResponsePricingPrimaryIps>?>(JsonSerializer.Deserialize<List<ListPricesResponsePricingPrimaryIps>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server_backup":
                            serverBackup = new Option<ListPricesResponsePricingServerBackup?>(JsonSerializer.Deserialize<ListPricesResponsePricingServerBackup>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server_types":
                            serverTypes = new Option<List<ListPricesResponsePricingServerTypes>?>(JsonSerializer.Deserialize<List<ListPricesResponsePricingServerTypes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "vat_rate":
                            vatRate = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "volume":
                            volume = new Option<ListPricesResponsePricingVolume?>(JsonSerializer.Deserialize<ListPricesResponsePricingVolume>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(currency));

            if (!floatingIp.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(floatingIp));

            if (!floatingIps.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(floatingIps));

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(image));

            if (!loadBalancerTypes.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(loadBalancerTypes));

            if (!primaryIps.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(primaryIps));

            if (!serverBackup.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(serverBackup));

            if (!serverTypes.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(serverTypes));

            if (!vatRate.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(vatRate));

            if (!volume.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricing.", nameof(volume));

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class ListPricesResponsePricing.");

            if (floatingIp.IsSet && floatingIp.Value == null)
                throw new ArgumentNullException(nameof(floatingIp), "Property is not nullable for class ListPricesResponsePricing.");

            if (floatingIps.IsSet && floatingIps.Value == null)
                throw new ArgumentNullException(nameof(floatingIps), "Property is not nullable for class ListPricesResponsePricing.");

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class ListPricesResponsePricing.");

            if (loadBalancerTypes.IsSet && loadBalancerTypes.Value == null)
                throw new ArgumentNullException(nameof(loadBalancerTypes), "Property is not nullable for class ListPricesResponsePricing.");

            if (primaryIps.IsSet && primaryIps.Value == null)
                throw new ArgumentNullException(nameof(primaryIps), "Property is not nullable for class ListPricesResponsePricing.");

            if (serverBackup.IsSet && serverBackup.Value == null)
                throw new ArgumentNullException(nameof(serverBackup), "Property is not nullable for class ListPricesResponsePricing.");

            if (serverTypes.IsSet && serverTypes.Value == null)
                throw new ArgumentNullException(nameof(serverTypes), "Property is not nullable for class ListPricesResponsePricing.");

            if (vatRate.IsSet && vatRate.Value == null)
                throw new ArgumentNullException(nameof(vatRate), "Property is not nullable for class ListPricesResponsePricing.");

            if (volume.IsSet && volume.Value == null)
                throw new ArgumentNullException(nameof(volume), "Property is not nullable for class ListPricesResponsePricing.");

            return new ListPricesResponsePricing(currency.Value!, floatingIp.Value!, floatingIps.Value!, image.Value!, loadBalancerTypes.Value!, primaryIps.Value!, serverBackup.Value!, serverTypes.Value!, vatRate.Value!.Value!, volume.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ListPricesResponsePricing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listPricesResponsePricing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListPricesResponsePricing listPricesResponsePricing, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listPricesResponsePricing, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListPricesResponsePricing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listPricesResponsePricing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListPricesResponsePricing listPricesResponsePricing, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listPricesResponsePricing.Currency == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.Currency), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.FloatingIp == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.FloatingIp), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.FloatingIps == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.FloatingIps), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.Image == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.Image), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.LoadBalancerTypes == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.LoadBalancerTypes), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.PrimaryIps == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.PrimaryIps), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.ServerBackup == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.ServerBackup), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.ServerTypes == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.ServerTypes), "Property is required for class ListPricesResponsePricing.");

            if (listPricesResponsePricing.Volume == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricing.Volume), "Property is required for class ListPricesResponsePricing.");

            writer.WriteString("currency", listPricesResponsePricing.Currency);

            writer.WritePropertyName("floating_ip");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.FloatingIp, jsonSerializerOptions);
            writer.WritePropertyName("floating_ips");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.FloatingIps, jsonSerializerOptions);
            writer.WritePropertyName("image");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.Image, jsonSerializerOptions);
            writer.WritePropertyName("load_balancer_types");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.LoadBalancerTypes, jsonSerializerOptions);
            writer.WritePropertyName("primary_ips");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.PrimaryIps, jsonSerializerOptions);
            writer.WritePropertyName("server_backup");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.ServerBackup, jsonSerializerOptions);
            writer.WritePropertyName("server_types");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.ServerTypes, jsonSerializerOptions);
            writer.WriteString("vat_rate", listPricesResponsePricing.VatRate.ToString());

            writer.WritePropertyName("volume");
            JsonSerializer.Serialize(writer, listPricesResponsePricing.Volume, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The ListPricesResponsePricingSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ListPricesResponsePricing))]
    internal partial class ListPricesResponsePricingSerializationContext : JsonSerializerContext { }
}
