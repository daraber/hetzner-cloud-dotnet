// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// See \&quot;[Pagination](#pagination)\&quot; for more information.
    /// </summary>
    public partial class Pagination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pagination" /> class.
        /// </summary>
        /// <param name="page">Current page number.</param>
        /// <param name="perPage">Maximum number of entries returned per page.</param>
        /// <param name="lastPage">Page number of the last page available. Can be null if the current page is the last one.</param>
        /// <param name="nextPage">Page number of the next page. Can be null if the current page is the last one.</param>
        /// <param name="previousPage">Page number of the previous page. Can be null if the current page is the first one.</param>
        /// <param name="totalEntries">Total number of entries that exist for this query. Can be null if unknown.</param>
        [JsonConstructor]
        public Pagination(long page, long perPage, long? lastPage = default, long? nextPage = default, long? previousPage = default, long? totalEntries = default)
        {
            Page = page;
            PerPage = perPage;
            LastPage = lastPage;
            NextPage = nextPage;
            PreviousPage = previousPage;
            TotalEntries = totalEntries;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Current page number.
        /// </summary>
        /// <value>Current page number.</value>
        /* <example>3</example> */
        [JsonPropertyName("page")]
        public long Page { get; set; }

        /// <summary>
        /// Maximum number of entries returned per page.
        /// </summary>
        /// <value>Maximum number of entries returned per page.</value>
        /* <example>25</example> */
        [JsonPropertyName("per_page")]
        public long PerPage { get; set; }

        /// <summary>
        /// Page number of the last page available. Can be null if the current page is the last one.
        /// </summary>
        /// <value>Page number of the last page available. Can be null if the current page is the last one.</value>
        /* <example>4</example> */
        [JsonPropertyName("last_page")]
        public long? LastPage { get; set; }

        /// <summary>
        /// Page number of the next page. Can be null if the current page is the last one.
        /// </summary>
        /// <value>Page number of the next page. Can be null if the current page is the last one.</value>
        /* <example>4</example> */
        [JsonPropertyName("next_page")]
        public long? NextPage { get; set; }

        /// <summary>
        /// Page number of the previous page. Can be null if the current page is the first one.
        /// </summary>
        /// <value>Page number of the previous page. Can be null if the current page is the first one.</value>
        /* <example>2</example> */
        [JsonPropertyName("previous_page")]
        public long? PreviousPage { get; set; }

        /// <summary>
        /// Total number of entries that exist for this query. Can be null if unknown.
        /// </summary>
        /// <value>Total number of entries that exist for this query. Can be null if unknown.</value>
        /* <example>100</example> */
        [JsonPropertyName("total_entries")]
        public long? TotalEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pagination {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PreviousPage: ").Append(PreviousPage).Append("\n");
            sb.Append("  TotalEntries: ").Append(TotalEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Pagination" />
    /// </summary>
    public class PaginationJsonConverter : JsonConverter<Pagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="Pagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Pagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> page = default;
            Option<long?> perPage = default;
            Option<long?> lastPage = default;
            Option<long?> nextPage = default;
            Option<long?> previousPage = default;
            Option<long?> totalEntries = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "page":
                            page = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "per_page":
                            perPage = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "last_page":
                            lastPage = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "next_page":
                            nextPage = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "previous_page":
                            previousPage = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "total_entries":
                            totalEntries = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!page.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(page));

            if (!perPage.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(perPage));

            if (!lastPage.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(lastPage));

            if (!nextPage.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(nextPage));

            if (!previousPage.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(previousPage));

            if (!totalEntries.IsSet)
                throw new ArgumentException("Property is required for class Pagination.", nameof(totalEntries));

            if (page.IsSet && page.Value == null)
                throw new ArgumentNullException(nameof(page), "Property is not nullable for class Pagination.");

            if (perPage.IsSet && perPage.Value == null)
                throw new ArgumentNullException(nameof(perPage), "Property is not nullable for class Pagination.");

            return new Pagination(page.Value!.Value!, perPage.Value!.Value!, lastPage.Value!, nextPage.Value!, previousPage.Value!, totalEntries.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("page", pagination.Page);

            writer.WriteNumber("per_page", pagination.PerPage);

            if (pagination.LastPage != null)
                writer.WriteNumber("last_page", pagination.LastPage.Value);
            else
                writer.WriteNull("last_page");

            if (pagination.NextPage != null)
                writer.WriteNumber("next_page", pagination.NextPage.Value);
            else
                writer.WriteNull("next_page");

            if (pagination.PreviousPage != null)
                writer.WriteNumber("previous_page", pagination.PreviousPage.Value);
            else
                writer.WriteNull("previous_page");

            if (pagination.TotalEntries != null)
                writer.WriteNumber("total_entries", pagination.TotalEntries.Value);
            else
                writer.WriteNull("total_entries");
        }
    }

    /// <summary>
    /// The PaginationSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Pagination))]
    public partial class PaginationSerializationContext : JsonSerializerContext { }
}
