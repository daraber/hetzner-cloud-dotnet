// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// ServerPublicNetFirewall
    /// </summary>
    public partial class ServerPublicNetFirewall : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerPublicNetFirewall" /> class.
        /// </summary>
        /// <param name="id">ID of the Firewall.</param>
        /// <param name="status">Status of the Firewall on the Server</param>
        [JsonConstructor]
        public ServerPublicNetFirewall(Option<long?> id = default, Option<StatusEnum?> status = default)
        {
            IdOption = id;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the Firewall on the Server
        /// </summary>
        /// <value>Status of the Firewall on the Server</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Applied for value: applied
            /// </summary>
            Applied = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("applied"))
                return StatusEnum.Applied;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("applied"))
                return StatusEnum.Applied;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Applied)
                return "applied";

            if (value == StatusEnum.Pending)
                return "pending";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Status of the Firewall on the Server
        /// </summary>
        /// <value>Status of the Firewall on the Server</value>
        /* <example>applied</example> */
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// ID of the Firewall.
        /// </summary>
        /// <value>ID of the Firewall.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerPublicNetFirewall {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.IdOption.IsSet && this.IdOption.Value > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerPublicNetFirewall" />
    /// </summary>
    public class ServerPublicNetFirewallJsonConverter : JsonConverter<ServerPublicNetFirewall>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerPublicNetFirewall" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerPublicNetFirewall Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<ServerPublicNetFirewall.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ServerPublicNetFirewall.StatusEnum?>(ServerPublicNetFirewall.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ServerPublicNetFirewall.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ServerPublicNetFirewall.");

            return new ServerPublicNetFirewall(id, status);
        }

        /// <summary>
        /// Serializes a <see cref="ServerPublicNetFirewall" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPublicNetFirewall"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerPublicNetFirewall serverPublicNetFirewall, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverPublicNetFirewall, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerPublicNetFirewall" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPublicNetFirewall"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerPublicNetFirewall serverPublicNetFirewall, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverPublicNetFirewall.IdOption.IsSet)
                writer.WriteNumber("id", serverPublicNetFirewall.IdOption.Value!.Value);

            var statusRawValue = ServerPublicNetFirewall.StatusEnumToJsonValue(serverPublicNetFirewall.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
        }
    }

    /// <summary>
    /// The ServerPublicNetFirewallSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ServerPublicNetFirewall))]
    public partial class ServerPublicNetFirewallSerializationContext : JsonSerializerContext { }
}
