// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// ListPricesResponsePricingServerTypes
    /// </summary>
    internal partial class ListPricesResponsePricingServerTypes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListPricesResponsePricingServerTypes" /> class.
        /// </summary>
        /// <param name="id">ID of the [Server Types](#server-types) the price is for.</param>
        /// <param name="name">Name of the [Server Types](#server-types) the price is for.</param>
        /// <param name="prices">Price of the [Server Types](#server-types) per [Location](#locations).</param>
        [JsonConstructor]
        internal ListPricesResponsePricingServerTypes(long id, string name, List<PricePerTime> prices)
        {
            Id = id;
            Name = name;
            Prices = prices;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the [Server Types](#server-types) the price is for.
        /// </summary>
        /// <value>ID of the [Server Types](#server-types) the price is for.</value>
        /* <example>104</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the [Server Types](#server-types) the price is for.
        /// </summary>
        /// <value>Name of the [Server Types](#server-types) the price is for.</value>
        /* <example>cpx11</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Price of the [Server Types](#server-types) per [Location](#locations).
        /// </summary>
        /// <value>Price of the [Server Types](#server-types) per [Location](#locations).</value>
        [JsonPropertyName("prices")]
        public List<PricePerTime> Prices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListPricesResponsePricingServerTypes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListPricesResponsePricingServerTypes" />
    /// </summary>
    internal class ListPricesResponsePricingServerTypesJsonConverter : JsonConverter<ListPricesResponsePricingServerTypes>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListPricesResponsePricingServerTypes" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListPricesResponsePricingServerTypes Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<List<PricePerTime>?> prices = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prices":
                            prices = new Option<List<PricePerTime>?>(JsonSerializer.Deserialize<List<PricePerTime>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricingServerTypes.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricingServerTypes.", nameof(name));

            if (!prices.IsSet)
                throw new ArgumentException("Property is required for class ListPricesResponsePricingServerTypes.", nameof(prices));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ListPricesResponsePricingServerTypes.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ListPricesResponsePricingServerTypes.");

            if (prices.IsSet && prices.Value == null)
                throw new ArgumentNullException(nameof(prices), "Property is not nullable for class ListPricesResponsePricingServerTypes.");

            return new ListPricesResponsePricingServerTypes(id.Value!.Value!, name.Value!, prices.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ListPricesResponsePricingServerTypes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listPricesResponsePricingServerTypes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListPricesResponsePricingServerTypes listPricesResponsePricingServerTypes, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listPricesResponsePricingServerTypes, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListPricesResponsePricingServerTypes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listPricesResponsePricingServerTypes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListPricesResponsePricingServerTypes listPricesResponsePricingServerTypes, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listPricesResponsePricingServerTypes.Name == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricingServerTypes.Name), "Property is required for class ListPricesResponsePricingServerTypes.");

            if (listPricesResponsePricingServerTypes.Prices == null)
                throw new ArgumentNullException(nameof(listPricesResponsePricingServerTypes.Prices), "Property is required for class ListPricesResponsePricingServerTypes.");

            writer.WriteNumber("id", listPricesResponsePricingServerTypes.Id);

            writer.WriteString("name", listPricesResponsePricingServerTypes.Name);

            writer.WritePropertyName("prices");
            JsonSerializer.Serialize(writer, listPricesResponsePricingServerTypes.Prices, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The ListPricesResponsePricingServerTypesSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ListPricesResponsePricingServerTypes))]
    internal partial class ListPricesResponsePricingServerTypesSerializationContext : JsonSerializerContext { }
}
