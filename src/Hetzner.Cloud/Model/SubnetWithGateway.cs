// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// SubnetWithGateway
    /// </summary>
    public partial class SubnetWithGateway : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubnetWithGateway" /> class.
        /// </summary>
        /// <param name="gateway">Gateway for [Servers](#servers) attached to this subnet.  For subnets of type &#x60;server&#x60; this is always the first IP of the subnets IP range. </param>
        /// <param name="networkZone">Name of the [Network Zone](#network-zones).  The [Location](#locations) contains the &#x60;network_zone&#x60; property it belongs to. </param>
        /// <param name="type">Type of subnet.  - &#x60;cloud&#x60; - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers). - &#x60;server&#x60; - Same as the &#x60;cloud&#x60; type. **Deprecated**, use the &#x60;cloud&#x60; type instead. - &#x60;vswitch&#x60; - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). </param>
        /// <param name="ipRange">IP range of the subnet.  Uses CIDR notation. </param>
        /// <param name="vswitchId">ID of the robot vSwitch if the subnet is of type &#x60;vswitch&#x60;.</param>
        [JsonConstructor]
        public SubnetWithGateway(string gateway, string networkZone, TypeEnum type, Option<string?> ipRange = default, Option<long?> vswitchId = default)
        {
            Gateway = gateway;
            NetworkZone = networkZone;
            Type = type;
            IpRangeOption = ipRange;
            VswitchIdOption = vswitchId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of subnet.  - &#x60;cloud&#x60; - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers). - &#x60;server&#x60; - Same as the &#x60;cloud&#x60; type. **Deprecated**, use the &#x60;cloud&#x60; type instead. - &#x60;vswitch&#x60; - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). 
        /// </summary>
        /// <value>Type of subnet.  - &#x60;cloud&#x60; - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers). - &#x60;server&#x60; - Same as the &#x60;cloud&#x60; type. **Deprecated**, use the &#x60;cloud&#x60; type instead. - &#x60;vswitch&#x60; - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). </value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Cloud for value: cloud
            /// </summary>
            Cloud = 1,

            /// <summary>
            /// Enum Server for value: server
            /// </summary>
            Server = 2,

            /// <summary>
            /// Enum Vswitch for value: vswitch
            /// </summary>
            Vswitch = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("cloud"))
                return TypeEnum.Cloud;

            if (value.Equals("server"))
                return TypeEnum.Server;

            if (value.Equals("vswitch"))
                return TypeEnum.Vswitch;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("cloud"))
                return TypeEnum.Cloud;

            if (value.Equals("server"))
                return TypeEnum.Server;

            if (value.Equals("vswitch"))
                return TypeEnum.Vswitch;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Cloud)
                return "cloud";

            if (value == TypeEnum.Server)
                return "server";

            if (value == TypeEnum.Vswitch)
                return "vswitch";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of subnet.  - &#x60;cloud&#x60; - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers). - &#x60;server&#x60; - Same as the &#x60;cloud&#x60; type. **Deprecated**, use the &#x60;cloud&#x60; type instead. - &#x60;vswitch&#x60; - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). 
        /// </summary>
        /// <value>Type of subnet.  - &#x60;cloud&#x60; - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers). - &#x60;server&#x60; - Same as the &#x60;cloud&#x60; type. **Deprecated**, use the &#x60;cloud&#x60; type instead. - &#x60;vswitch&#x60; - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). </value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gateway for [Servers](#servers) attached to this subnet.  For subnets of type &#x60;server&#x60; this is always the first IP of the subnets IP range. 
        /// </summary>
        /// <value>Gateway for [Servers](#servers) attached to this subnet.  For subnets of type &#x60;server&#x60; this is always the first IP of the subnets IP range. </value>
        /* <example>10.0.0.1</example> */
        [JsonPropertyName("gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Name of the [Network Zone](#network-zones).  The [Location](#locations) contains the &#x60;network_zone&#x60; property it belongs to. 
        /// </summary>
        /// <value>Name of the [Network Zone](#network-zones).  The [Location](#locations) contains the &#x60;network_zone&#x60; property it belongs to. </value>
        /* <example>eu-central</example> */
        [JsonPropertyName("network_zone")]
        public string NetworkZone { get; set; }

        /// <summary>
        /// Used to track the state of IpRange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpRangeOption { get; private set; }

        /// <summary>
        /// IP range of the subnet.  Uses CIDR notation. 
        /// </summary>
        /// <value>IP range of the subnet.  Uses CIDR notation. </value>
        /* <example>10.0.1.0/24</example> */
        [JsonPropertyName("ip_range")]
        public string? IpRange { get { return this.IpRangeOption; } set { this.IpRangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VswitchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VswitchIdOption { get; private set; }

        /// <summary>
        /// ID of the robot vSwitch if the subnet is of type &#x60;vswitch&#x60;.
        /// </summary>
        /// <value>ID of the robot vSwitch if the subnet is of type &#x60;vswitch&#x60;.</value>
        /* <example>1000</example> */
        [JsonPropertyName("vswitch_id")]
        public long? VswitchId { get { return this.VswitchIdOption; } set { this.VswitchIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubnetWithGateway {\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  NetworkZone: ").Append(NetworkZone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IpRange: ").Append(IpRange).Append("\n");
            sb.Append("  VswitchId: ").Append(VswitchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubnetWithGateway" />
    /// </summary>
    public class SubnetWithGatewayJsonConverter : JsonConverter<SubnetWithGateway>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubnetWithGateway" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubnetWithGateway Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gateway = default;
            Option<string?> networkZone = default;
            Option<SubnetWithGateway.TypeEnum?> type = default;
            Option<string?> ipRange = default;
            Option<long?> vswitchId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gateway":
                            gateway = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network_zone":
                            networkZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SubnetWithGateway.TypeEnum?>(SubnetWithGateway.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "ip_range":
                            ipRange = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "vswitch_id":
                            vswitchId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gateway.IsSet)
                throw new ArgumentException("Property is required for class SubnetWithGateway.", nameof(gateway));

            if (!networkZone.IsSet)
                throw new ArgumentException("Property is required for class SubnetWithGateway.", nameof(networkZone));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SubnetWithGateway.", nameof(type));

            if (gateway.IsSet && gateway.Value == null)
                throw new ArgumentNullException(nameof(gateway), "Property is not nullable for class SubnetWithGateway.");

            if (networkZone.IsSet && networkZone.Value == null)
                throw new ArgumentNullException(nameof(networkZone), "Property is not nullable for class SubnetWithGateway.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SubnetWithGateway.");

            if (ipRange.IsSet && ipRange.Value == null)
                throw new ArgumentNullException(nameof(ipRange), "Property is not nullable for class SubnetWithGateway.");

            return new SubnetWithGateway(gateway.Value!, networkZone.Value!, type.Value!.Value!, ipRange, vswitchId);
        }

        /// <summary>
        /// Serializes a <see cref="SubnetWithGateway" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subnetWithGateway"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubnetWithGateway subnetWithGateway, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subnetWithGateway, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubnetWithGateway" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subnetWithGateway"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubnetWithGateway subnetWithGateway, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subnetWithGateway.Gateway == null)
                throw new ArgumentNullException(nameof(subnetWithGateway.Gateway), "Property is required for class SubnetWithGateway.");

            if (subnetWithGateway.NetworkZone == null)
                throw new ArgumentNullException(nameof(subnetWithGateway.NetworkZone), "Property is required for class SubnetWithGateway.");

            if (subnetWithGateway.IpRangeOption.IsSet && subnetWithGateway.IpRange == null)
                throw new ArgumentNullException(nameof(subnetWithGateway.IpRange), "Property is required for class SubnetWithGateway.");

            writer.WriteString("gateway", subnetWithGateway.Gateway);

            writer.WriteString("network_zone", subnetWithGateway.NetworkZone);

            var typeRawValue = SubnetWithGateway.TypeEnumToJsonValue(subnetWithGateway.Type);
            writer.WriteString("type", typeRawValue);
            if (subnetWithGateway.IpRangeOption.IsSet)
                writer.WriteString("ip_range", subnetWithGateway.IpRange);

            if (subnetWithGateway.VswitchIdOption.IsSet)
                if (subnetWithGateway.VswitchIdOption.Value != null)
                    writer.WriteNumber("vswitch_id", subnetWithGateway.VswitchIdOption.Value!.Value);
                else
                    writer.WriteNull("vswitch_id");
        }
    }

    /// <summary>
    /// The SubnetWithGatewaySerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(SubnetWithGateway))]
    public partial class SubnetWithGatewaySerializationContext : JsonSerializerContext { }
}
