// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// A service for a Load Balancer.
    /// </summary>
    internal partial class LoadBalancerService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerService" /> class.
        /// </summary>
        /// <param name="destinationPort">Port the Load Balancer will balance to</param>
        /// <param name="healthCheck">healthCheck</param>
        /// <param name="listenPort">Port the Load Balancer listens on</param>
        /// <param name="protocol">Protocol of the Load Balancer</param>
        /// <param name="proxyprotocol">Is Proxyprotocol enabled or not</param>
        /// <param name="http">http</param>
        [JsonConstructor]
        internal LoadBalancerService(int destinationPort, LoadBalancerServiceHealthCheck healthCheck, int listenPort, ProtocolEnum protocol, bool proxyprotocol, Option<Http?> http = default)
        {
            DestinationPort = destinationPort;
            HealthCheck = healthCheck;
            ListenPort = listenPort;
            Protocol = protocol;
            Proxyprotocol = proxyprotocol;
            HttpOption = http;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Protocol of the Load Balancer
        /// </summary>
        /// <value>Protocol of the Load Balancer</value>
        internal enum ProtocolEnum
        {
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            Http = 1,

            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            Https = 2,

            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            Tcp = 3
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ProtocolEnum ProtocolEnumFromString(string value)
        {
            if (value.Equals("http"))
                return ProtocolEnum.Http;

            if (value.Equals("https"))
                return ProtocolEnum.Https;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            throw new NotImplementedException($"Could not convert value to type ProtocolEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProtocolEnum? ProtocolEnumFromStringOrDefault(string value)
        {
            if (value.Equals("http"))
                return ProtocolEnum.Http;

            if (value.Equals("https"))
                return ProtocolEnum.Https;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProtocolEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProtocolEnumToJsonValue(ProtocolEnum value)
        {
            if (value == ProtocolEnum.Http)
                return "http";

            if (value == ProtocolEnum.Https)
                return "https";

            if (value == ProtocolEnum.Tcp)
                return "tcp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Protocol of the Load Balancer
        /// </summary>
        /// <value>Protocol of the Load Balancer</value>
        /* <example>https</example> */
        [JsonPropertyName("protocol")]
        public ProtocolEnum Protocol { get; set; }

        /// <summary>
        /// Port the Load Balancer will balance to
        /// </summary>
        /// <value>Port the Load Balancer will balance to</value>
        /* <example>80</example> */
        [JsonPropertyName("destination_port")]
        public int DestinationPort { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheck
        /// </summary>
        [JsonPropertyName("health_check")]
        public LoadBalancerServiceHealthCheck HealthCheck { get; set; }

        /// <summary>
        /// Port the Load Balancer listens on
        /// </summary>
        /// <value>Port the Load Balancer listens on</value>
        /* <example>443</example> */
        [JsonPropertyName("listen_port")]
        public int ListenPort { get; set; }

        /// <summary>
        /// Is Proxyprotocol enabled or not
        /// </summary>
        /// <value>Is Proxyprotocol enabled or not</value>
        /* <example>false</example> */
        [JsonPropertyName("proxyprotocol")]
        public bool Proxyprotocol { get; set; }

        /// <summary>
        /// Used to track the state of Http
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Http?> HttpOption { get; private set; }

        /// <summary>
        /// Gets or Sets Http
        /// </summary>
        [JsonPropertyName("http")]
        public Http? Http { get { return this.HttpOption; } set { this.HttpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerService {\n");
            sb.Append("  DestinationPort: ").Append(DestinationPort).Append("\n");
            sb.Append("  HealthCheck: ").Append(HealthCheck).Append("\n");
            sb.Append("  ListenPort: ").Append(ListenPort).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Proxyprotocol: ").Append(Proxyprotocol).Append("\n");
            sb.Append("  Http: ").Append(Http).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerService" />
    /// </summary>
    internal class LoadBalancerServiceJsonConverter : JsonConverter<LoadBalancerService>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerService" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerService Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> destinationPort = default;
            Option<LoadBalancerServiceHealthCheck?> healthCheck = default;
            Option<int?> listenPort = default;
            Option<LoadBalancerService.ProtocolEnum?> protocol = default;
            Option<bool?> proxyprotocol = default;
            Option<Http?> http = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "destination_port":
                            destinationPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "health_check":
                            healthCheck = new Option<LoadBalancerServiceHealthCheck?>(JsonSerializer.Deserialize<LoadBalancerServiceHealthCheck>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "listen_port":
                            listenPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "protocol":
                            string? protocolRawValue = utf8JsonReader.GetString();
                            if (protocolRawValue != null)
                                protocol = new Option<LoadBalancerService.ProtocolEnum?>(LoadBalancerService.ProtocolEnumFromStringOrDefault(protocolRawValue));
                            break;
                        case "proxyprotocol":
                            proxyprotocol = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "http":
                            http = new Option<Http?>(JsonSerializer.Deserialize<Http>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!destinationPort.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerService.", nameof(destinationPort));

            if (!healthCheck.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerService.", nameof(healthCheck));

            if (!listenPort.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerService.", nameof(listenPort));

            if (!protocol.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerService.", nameof(protocol));

            if (!proxyprotocol.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerService.", nameof(proxyprotocol));

            if (destinationPort.IsSet && destinationPort.Value == null)
                throw new ArgumentNullException(nameof(destinationPort), "Property is not nullable for class LoadBalancerService.");

            if (healthCheck.IsSet && healthCheck.Value == null)
                throw new ArgumentNullException(nameof(healthCheck), "Property is not nullable for class LoadBalancerService.");

            if (listenPort.IsSet && listenPort.Value == null)
                throw new ArgumentNullException(nameof(listenPort), "Property is not nullable for class LoadBalancerService.");

            if (protocol.IsSet && protocol.Value == null)
                throw new ArgumentNullException(nameof(protocol), "Property is not nullable for class LoadBalancerService.");

            if (proxyprotocol.IsSet && proxyprotocol.Value == null)
                throw new ArgumentNullException(nameof(proxyprotocol), "Property is not nullable for class LoadBalancerService.");

            if (http.IsSet && http.Value == null)
                throw new ArgumentNullException(nameof(http), "Property is not nullable for class LoadBalancerService.");

            return new LoadBalancerService(destinationPort.Value!.Value!, healthCheck.Value!, listenPort.Value!.Value!, protocol.Value!.Value!, proxyprotocol.Value!.Value!, http);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerService" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerService"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerService loadBalancerService, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerService, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerService" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerService"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerService loadBalancerService, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerService.HealthCheck == null)
                throw new ArgumentNullException(nameof(loadBalancerService.HealthCheck), "Property is required for class LoadBalancerService.");

            if (loadBalancerService.HttpOption.IsSet && loadBalancerService.Http == null)
                throw new ArgumentNullException(nameof(loadBalancerService.Http), "Property is required for class LoadBalancerService.");

            writer.WriteNumber("destination_port", loadBalancerService.DestinationPort);

            writer.WritePropertyName("health_check");
            JsonSerializer.Serialize(writer, loadBalancerService.HealthCheck, jsonSerializerOptions);
            writer.WriteNumber("listen_port", loadBalancerService.ListenPort);

            var protocolRawValue = LoadBalancerService.ProtocolEnumToJsonValue(loadBalancerService.Protocol);
            writer.WriteString("protocol", protocolRawValue);
            writer.WriteBoolean("proxyprotocol", loadBalancerService.Proxyprotocol);

            if (loadBalancerService.HttpOption.IsSet)
            {
                writer.WritePropertyName("http");
                JsonSerializer.Serialize(writer, loadBalancerService.Http, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The LoadBalancerServiceSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerService))]
    internal partial class LoadBalancerServiceSerializationContext : JsonSerializerContext { }
}
