// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network
    /// </summary>
    public partial class AttachServerToNetworkRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachServerToNetworkRequest" /> class.
        /// </summary>
        /// <param name="network">ID of an existing network to attach the Server to</param>
        /// <param name="aliasIps">Additional IPs to be assigned to this Server</param>
        /// <param name="ip">IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address</param>
        [JsonConstructor]
        public AttachServerToNetworkRequest(long network, Option<List<string>?> aliasIps = default, Option<string?> ip = default)
        {
            Network = network;
            AliasIpsOption = aliasIps;
            IpOption = ip;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of an existing network to attach the Server to
        /// </summary>
        /// <value>ID of an existing network to attach the Server to</value>
        /* <example>4711</example> */
        [JsonPropertyName("network")]
        public long Network { get; set; }

        /// <summary>
        /// Used to track the state of AliasIps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AliasIpsOption { get; private set; }

        /// <summary>
        /// Additional IPs to be assigned to this Server
        /// </summary>
        /// <value>Additional IPs to be assigned to this Server</value>
        /* <example>[&quot;10.0.1.2&quot;]</example> */
        [JsonPropertyName("alias_ips")]
        public List<string>? AliasIps { get { return this.AliasIpsOption; } set { this.AliasIpsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address
        /// </summary>
        /// <value>IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address</value>
        /* <example>10.0.1.1</example> */
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachServerToNetworkRequest {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  AliasIps: ").Append(AliasIps).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachServerToNetworkRequest" />
    /// </summary>
    public class AttachServerToNetworkRequestJsonConverter : JsonConverter<AttachServerToNetworkRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachServerToNetworkRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachServerToNetworkRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> network = default;
            Option<List<string>?> aliasIps = default;
            Option<string?> ip = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "network":
                            network = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "alias_ips":
                            aliasIps = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!network.IsSet)
                throw new ArgumentException("Property is required for class AttachServerToNetworkRequest.", nameof(network));

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class AttachServerToNetworkRequest.");

            if (aliasIps.IsSet && aliasIps.Value == null)
                throw new ArgumentNullException(nameof(aliasIps), "Property is not nullable for class AttachServerToNetworkRequest.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class AttachServerToNetworkRequest.");

            return new AttachServerToNetworkRequest(network.Value!.Value!, aliasIps, ip);
        }

        /// <summary>
        /// Serializes a <see cref="AttachServerToNetworkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachServerToNetworkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachServerToNetworkRequest attachServerToNetworkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachServerToNetworkRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachServerToNetworkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachServerToNetworkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachServerToNetworkRequest attachServerToNetworkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachServerToNetworkRequest.AliasIpsOption.IsSet && attachServerToNetworkRequest.AliasIps == null)
                throw new ArgumentNullException(nameof(attachServerToNetworkRequest.AliasIps), "Property is required for class AttachServerToNetworkRequest.");

            if (attachServerToNetworkRequest.IpOption.IsSet && attachServerToNetworkRequest.Ip == null)
                throw new ArgumentNullException(nameof(attachServerToNetworkRequest.Ip), "Property is required for class AttachServerToNetworkRequest.");

            writer.WriteNumber("network", attachServerToNetworkRequest.Network);

            if (attachServerToNetworkRequest.AliasIpsOption.IsSet)
            {
                writer.WritePropertyName("alias_ips");
                JsonSerializer.Serialize(writer, attachServerToNetworkRequest.AliasIps, jsonSerializerOptions);
            }
            if (attachServerToNetworkRequest.IpOption.IsSet)
                writer.WriteString("ip", attachServerToNetworkRequest.Ip);
        }
    }

    /// <summary>
    /// The AttachServerToNetworkRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AttachServerToNetworkRequest))]
    public partial class AttachServerToNetworkRequestSerializationContext : JsonSerializerContext { }
}
