// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// PrimaryIP
    /// </summary>
    internal partial class PrimaryIP : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrimaryIP" /> class.
        /// </summary>
        /// <param name="assigneeType">Type of resource the [Primary IP](#primary-ips) can get assigned to. </param>
        /// <param name="blocked">Blocked state of the [Primary IP](#primary-ips).</param>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="datacenter">datacenter</param>
        /// <param name="dnsPtr">List of reverse DNS records.</param>
        /// <param name="id">ID of the Primary IP.</param>
        /// <param name="ip">IP address.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="protection">protection</param>
        /// <param name="type">type</param>
        /// <param name="assigneeId">ID of resource the [Primary IP](#primary-ips) is assigned to.  &#x60;null&#x60; if the [Primary IP](#primary-ips) is not assigned. </param>
        /// <param name="autoDelete">Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.  (default to false)</param>
        [JsonConstructor]
        internal PrimaryIP(AssigneeTypeEnum assigneeType, bool blocked, string created, Datacenter datacenter, List<DnsPtr> dnsPtr, long id, string ip, Dictionary<string, string> labels, string name, Protection protection, IpType type, long? assigneeId = default, bool autoDelete = false)
        {
            AssigneeType = assigneeType;
            Blocked = blocked;
            Created = created;
            Datacenter = datacenter;
            DnsPtr = dnsPtr;
            Id = id;
            Ip = ip;
            Labels = labels;
            Name = name;
            Protection = protection;
            Type = type;
            AssigneeId = assigneeId;
            AutoDelete = autoDelete;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of resource the [Primary IP](#primary-ips) can get assigned to. 
        /// </summary>
        /// <value>Type of resource the [Primary IP](#primary-ips) can get assigned to. </value>
        internal enum AssigneeTypeEnum
        {
            /// <summary>
            /// Enum Server for value: server
            /// </summary>
            Server = 1
        }

        /// <summary>
        /// Returns a <see cref="AssigneeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AssigneeTypeEnum AssigneeTypeEnumFromString(string value)
        {
            if (value.Equals("server"))
                return AssigneeTypeEnum.Server;

            throw new NotImplementedException($"Could not convert value to type AssigneeTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AssigneeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssigneeTypeEnum? AssigneeTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("server"))
                return AssigneeTypeEnum.Server;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssigneeTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AssigneeTypeEnumToJsonValue(AssigneeTypeEnum value)
        {
            if (value == AssigneeTypeEnum.Server)
                return "server";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of resource the [Primary IP](#primary-ips) can get assigned to. 
        /// </summary>
        /// <value>Type of resource the [Primary IP](#primary-ips) can get assigned to. </value>
        /* <example>server</example> */
        [JsonPropertyName("assignee_type")]
        public AssigneeTypeEnum AssigneeType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public IpType Type { get; set; }

        /// <summary>
        /// Blocked state of the [Primary IP](#primary-ips).
        /// </summary>
        /// <value>Blocked state of the [Primary IP](#primary-ips).</value>
        /* <example>false</example> */
        [JsonPropertyName("blocked")]
        public bool Blocked { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Datacenter
        /// </summary>
        [JsonPropertyName("datacenter")]
        public Datacenter Datacenter { get; set; }

        /// <summary>
        /// List of reverse DNS records.
        /// </summary>
        /// <value>List of reverse DNS records.</value>
        [JsonPropertyName("dns_ptr")]
        public List<DnsPtr> DnsPtr { get; set; }

        /// <summary>
        /// ID of the Primary IP.
        /// </summary>
        /// <value>ID of the Primary IP.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// IP address.
        /// </summary>
        /// <value>IP address.</value>
        /* <example>131.232.99.1</example> */
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// ID of resource the [Primary IP](#primary-ips) is assigned to.  &#x60;null&#x60; if the [Primary IP](#primary-ips) is not assigned. 
        /// </summary>
        /// <value>ID of resource the [Primary IP](#primary-ips) is assigned to.  &#x60;null&#x60; if the [Primary IP](#primary-ips) is not assigned. </value>
        /* <example>17</example> */
        [JsonPropertyName("assignee_id")]
        public long? AssigneeId { get; set; }

        /// <summary>
        /// Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted. 
        /// </summary>
        /// <value>Auto deletion state.  If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted. </value>
        /* <example>true</example> */
        [JsonPropertyName("auto_delete")]
        public bool AutoDelete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrimaryIP {\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  DnsPtr: ").Append(DnsPtr).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssigneeId: ").Append(AssigneeId).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrimaryIP" />
    /// </summary>
    internal class PrimaryIPJsonConverter : JsonConverter<PrimaryIP>
    {
        /// <summary>
        /// Deserializes json to <see cref="PrimaryIP" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PrimaryIP Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PrimaryIP.AssigneeTypeEnum?> assigneeType = default;
            Option<bool?> blocked = default;
            Option<string?> created = default;
            Option<Datacenter?> datacenter = default;
            Option<List<DnsPtr>?> dnsPtr = default;
            Option<long?> id = default;
            Option<string?> ip = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<Protection?> protection = default;
            Option<IpType?> type = default;
            Option<long?> assigneeId = default;
            Option<bool?> autoDelete = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignee_type":
                            string? assigneeTypeRawValue = utf8JsonReader.GetString();
                            if (assigneeTypeRawValue != null)
                                assigneeType = new Option<PrimaryIP.AssigneeTypeEnum?>(PrimaryIP.AssigneeTypeEnumFromStringOrDefault(assigneeTypeRawValue));
                            break;
                        case "blocked":
                            blocked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "datacenter":
                            datacenter = new Option<Datacenter?>(JsonSerializer.Deserialize<Datacenter>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dns_ptr":
                            dnsPtr = new Option<List<DnsPtr>?>(JsonSerializer.Deserialize<List<DnsPtr>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IpType?>(IpTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "assignee_id":
                            assigneeId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "auto_delete":
                            autoDelete = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assigneeType.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(assigneeType));

            if (!blocked.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(blocked));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(created));

            if (!datacenter.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(datacenter));

            if (!dnsPtr.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(dnsPtr));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(id));

            if (!ip.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(ip));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(name));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(protection));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(type));

            if (!assigneeId.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(assigneeId));

            if (!autoDelete.IsSet)
                throw new ArgumentException("Property is required for class PrimaryIP.", nameof(autoDelete));

            if (assigneeType.IsSet && assigneeType.Value == null)
                throw new ArgumentNullException(nameof(assigneeType), "Property is not nullable for class PrimaryIP.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class PrimaryIP.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class PrimaryIP.");

            if (datacenter.IsSet && datacenter.Value == null)
                throw new ArgumentNullException(nameof(datacenter), "Property is not nullable for class PrimaryIP.");

            if (dnsPtr.IsSet && dnsPtr.Value == null)
                throw new ArgumentNullException(nameof(dnsPtr), "Property is not nullable for class PrimaryIP.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PrimaryIP.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class PrimaryIP.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class PrimaryIP.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PrimaryIP.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class PrimaryIP.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PrimaryIP.");

            if (autoDelete.IsSet && autoDelete.Value == null)
                throw new ArgumentNullException(nameof(autoDelete), "Property is not nullable for class PrimaryIP.");

            return new PrimaryIP(assigneeType.Value!.Value!, blocked.Value!.Value!, created.Value!, datacenter.Value!, dnsPtr.Value!, id.Value!.Value!, ip.Value!, labels.Value!, name.Value!, protection.Value!, type.Value!.Value!, assigneeId.Value!, autoDelete.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PrimaryIP" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="primaryIP"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PrimaryIP primaryIP, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, primaryIP, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PrimaryIP" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="primaryIP"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PrimaryIP primaryIP, JsonSerializerOptions jsonSerializerOptions)
        {
            if (primaryIP.Created == null)
                throw new ArgumentNullException(nameof(primaryIP.Created), "Property is required for class PrimaryIP.");

            if (primaryIP.Datacenter == null)
                throw new ArgumentNullException(nameof(primaryIP.Datacenter), "Property is required for class PrimaryIP.");

            if (primaryIP.DnsPtr == null)
                throw new ArgumentNullException(nameof(primaryIP.DnsPtr), "Property is required for class PrimaryIP.");

            if (primaryIP.Ip == null)
                throw new ArgumentNullException(nameof(primaryIP.Ip), "Property is required for class PrimaryIP.");

            if (primaryIP.Labels == null)
                throw new ArgumentNullException(nameof(primaryIP.Labels), "Property is required for class PrimaryIP.");

            if (primaryIP.Name == null)
                throw new ArgumentNullException(nameof(primaryIP.Name), "Property is required for class PrimaryIP.");

            if (primaryIP.Protection == null)
                throw new ArgumentNullException(nameof(primaryIP.Protection), "Property is required for class PrimaryIP.");

            var assigneeTypeRawValue = PrimaryIP.AssigneeTypeEnumToJsonValue(primaryIP.AssigneeType);
            writer.WriteString("assignee_type", assigneeTypeRawValue);
            writer.WriteBoolean("blocked", primaryIP.Blocked);

            writer.WriteString("created", primaryIP.Created);

            writer.WritePropertyName("datacenter");
            JsonSerializer.Serialize(writer, primaryIP.Datacenter, jsonSerializerOptions);
            writer.WritePropertyName("dns_ptr");
            JsonSerializer.Serialize(writer, primaryIP.DnsPtr, jsonSerializerOptions);
            writer.WriteNumber("id", primaryIP.Id);

            writer.WriteString("ip", primaryIP.Ip);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, primaryIP.Labels, jsonSerializerOptions);
            writer.WriteString("name", primaryIP.Name);

            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, primaryIP.Protection, jsonSerializerOptions);
            var typeRawValue = IpTypeValueConverter.ToJsonValue(primaryIP.Type);
            writer.WriteString("type", typeRawValue);

            if (primaryIP.AssigneeId != null)
                writer.WriteNumber("assignee_id", primaryIP.AssigneeId.Value);
            else
                writer.WriteNull("assignee_id");

            writer.WriteBoolean("auto_delete", primaryIP.AutoDelete);
        }
    }

    /// <summary>
    /// The PrimaryIPSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PrimaryIP))]
    internal partial class PrimaryIPSerializationContext : JsonSerializerContext { }
}
