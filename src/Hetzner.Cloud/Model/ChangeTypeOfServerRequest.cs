// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type
    /// </summary>
    internal partial class ChangeTypeOfServerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeTypeOfServerRequest" /> class.
        /// </summary>
        /// <param name="serverType">ID or name of Server type the Server should migrate to</param>
        /// <param name="upgradeDisk">If false, do not upgrade the disk (this allows downgrading the Server type later)</param>
        [JsonConstructor]
        internal ChangeTypeOfServerRequest(string serverType, bool upgradeDisk)
        {
            ServerType = serverType;
            UpgradeDisk = upgradeDisk;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID or name of Server type the Server should migrate to
        /// </summary>
        /// <value>ID or name of Server type the Server should migrate to</value>
        /* <example>cpx11</example> */
        [JsonPropertyName("server_type")]
        public string ServerType { get; set; }

        /// <summary>
        /// If false, do not upgrade the disk (this allows downgrading the Server type later)
        /// </summary>
        /// <value>If false, do not upgrade the disk (this allows downgrading the Server type later)</value>
        /* <example>true</example> */
        [JsonPropertyName("upgrade_disk")]
        public bool UpgradeDisk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeTypeOfServerRequest {\n");
            sb.Append("  ServerType: ").Append(ServerType).Append("\n");
            sb.Append("  UpgradeDisk: ").Append(UpgradeDisk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChangeTypeOfServerRequest" />
    /// </summary>
    internal class ChangeTypeOfServerRequestJsonConverter : JsonConverter<ChangeTypeOfServerRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChangeTypeOfServerRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChangeTypeOfServerRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> serverType = default;
            Option<bool?> upgradeDisk = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "server_type":
                            serverType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "upgrade_disk":
                            upgradeDisk = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!serverType.IsSet)
                throw new ArgumentException("Property is required for class ChangeTypeOfServerRequest.", nameof(serverType));

            if (!upgradeDisk.IsSet)
                throw new ArgumentException("Property is required for class ChangeTypeOfServerRequest.", nameof(upgradeDisk));

            if (serverType.IsSet && serverType.Value == null)
                throw new ArgumentNullException(nameof(serverType), "Property is not nullable for class ChangeTypeOfServerRequest.");

            if (upgradeDisk.IsSet && upgradeDisk.Value == null)
                throw new ArgumentNullException(nameof(upgradeDisk), "Property is not nullable for class ChangeTypeOfServerRequest.");

            return new ChangeTypeOfServerRequest(serverType.Value!, upgradeDisk.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChangeTypeOfServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeTypeOfServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChangeTypeOfServerRequest changeTypeOfServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, changeTypeOfServerRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChangeTypeOfServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeTypeOfServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChangeTypeOfServerRequest changeTypeOfServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (changeTypeOfServerRequest.ServerType == null)
                throw new ArgumentNullException(nameof(changeTypeOfServerRequest.ServerType), "Property is required for class ChangeTypeOfServerRequest.");

            writer.WriteString("server_type", changeTypeOfServerRequest.ServerType);

            writer.WriteBoolean("upgrade_disk", changeTypeOfServerRequest.UpgradeDisk);
        }
    }

    /// <summary>
    /// The ChangeTypeOfServerRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChangeTypeOfServerRequest))]
    internal partial class ChangeTypeOfServerRequestSerializationContext : JsonSerializerContext { }
}
