// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// You must specify the type of metric to get: open_connections, requests_per_second or bandwidth. You can also specify more than one type by comma separation, e.g. requests_per_second,bandwidth. Depending on the type you will get different time series data.
    /// </summary>
    internal partial class Metrics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metrics" /> class.
        /// </summary>
        /// <param name="end">End of period of metrics reported (in ISO-8601 format)</param>
        /// <param name="start">Start of period of metrics reported (in ISO-8601 format)</param>
        /// <param name="step">Resolution of results in seconds.</param>
        /// <param name="timeSeries">Hash with timeseries information, containing the name of timeseries as key</param>
        [JsonConstructor]
        internal Metrics(string end, string start, int step, Dictionary<string, MetricsTimeSeriesValue> timeSeries)
        {
            End = end;
            Start = start;
            Step = step;
            TimeSeries = timeSeries;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// End of period of metrics reported (in ISO-8601 format)
        /// </summary>
        /// <value>End of period of metrics reported (in ISO-8601 format)</value>
        /* <example>2017-01-01T23:00:00+00:00</example> */
        [JsonPropertyName("end")]
        public string End { get; set; }

        /// <summary>
        /// Start of period of metrics reported (in ISO-8601 format)
        /// </summary>
        /// <value>Start of period of metrics reported (in ISO-8601 format)</value>
        /* <example>2017-01-01T00:00:00+00:00</example> */
        [JsonPropertyName("start")]
        public string Start { get; set; }

        /// <summary>
        /// Resolution of results in seconds.
        /// </summary>
        /// <value>Resolution of results in seconds.</value>
        /* <example>60</example> */
        [JsonPropertyName("step")]
        public int Step { get; set; }

        /// <summary>
        /// Hash with timeseries information, containing the name of timeseries as key
        /// </summary>
        /// <value>Hash with timeseries information, containing the name of timeseries as key</value>
        /* <example>{&quot;name_of_timeseries&quot;:{&quot;values&quot;:[[1.435781470622E9,&quot;42&quot;],[1.435781471622E9,&quot;43&quot;]]}}</example> */
        [JsonPropertyName("time_series")]
        public Dictionary<string, MetricsTimeSeriesValue> TimeSeries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metrics {\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  TimeSeries: ").Append(TimeSeries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Metrics" />
    /// </summary>
    internal class MetricsJsonConverter : JsonConverter<Metrics>
    {
        /// <summary>
        /// Deserializes json to <see cref="Metrics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Metrics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> end = default;
            Option<string?> start = default;
            Option<int?> step = default;
            Option<Dictionary<string, MetricsTimeSeriesValue>?> timeSeries = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "end":
                            end = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start":
                            start = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "step":
                            step = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "time_series":
                            timeSeries = new Option<Dictionary<string, MetricsTimeSeriesValue>?>(JsonSerializer.Deserialize<Dictionary<string, MetricsTimeSeriesValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!end.IsSet)
                throw new ArgumentException("Property is required for class Metrics.", nameof(end));

            if (!start.IsSet)
                throw new ArgumentException("Property is required for class Metrics.", nameof(start));

            if (!step.IsSet)
                throw new ArgumentException("Property is required for class Metrics.", nameof(step));

            if (!timeSeries.IsSet)
                throw new ArgumentException("Property is required for class Metrics.", nameof(timeSeries));

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class Metrics.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class Metrics.");

            if (step.IsSet && step.Value == null)
                throw new ArgumentNullException(nameof(step), "Property is not nullable for class Metrics.");

            if (timeSeries.IsSet && timeSeries.Value == null)
                throw new ArgumentNullException(nameof(timeSeries), "Property is not nullable for class Metrics.");

            return new Metrics(end.Value!, start.Value!, step.Value!.Value!, timeSeries.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Metrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Metrics metrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, metrics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Metrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Metrics metrics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (metrics.End == null)
                throw new ArgumentNullException(nameof(metrics.End), "Property is required for class Metrics.");

            if (metrics.Start == null)
                throw new ArgumentNullException(nameof(metrics.Start), "Property is required for class Metrics.");

            if (metrics.TimeSeries == null)
                throw new ArgumentNullException(nameof(metrics.TimeSeries), "Property is required for class Metrics.");

            writer.WriteString("end", metrics.End);

            writer.WriteString("start", metrics.Start);

            writer.WriteNumber("step", metrics.Step);

            writer.WritePropertyName("time_series");
            JsonSerializer.Serialize(writer, metrics.TimeSeries, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The MetricsSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Metrics))]
    internal partial class MetricsSerializationContext : JsonSerializerContext { }
}
