// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/firewalls
    /// </summary>
    internal partial class CreateFirewallRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFirewallRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. </param>
        /// <param name="applyTo">Resources to apply the [Firewall](#firewalls) to.  Resources added directly are taking precedence over those added via a [Label Selector](#label-selector). </param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="rules">Array of rules.  Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits). </param>
        [JsonConstructor]
        internal CreateFirewallRequest(string name, Option<List<FirewallResource>?> applyTo = default, Option<Dictionary<string, string>?> labels = default, Option<List<Rule>?> rules = default)
        {
            Name = name;
            ApplyToOption = applyTo;
            LabelsOption = labels;
            RulesOption = rules;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. 
        /// </summary>
        /// <value>Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. </value>
        /* <example>new-name</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of ApplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FirewallResource>?> ApplyToOption { get; private set; }

        /// <summary>
        /// Resources to apply the [Firewall](#firewalls) to.  Resources added directly are taking precedence over those added via a [Label Selector](#label-selector). 
        /// </summary>
        /// <value>Resources to apply the [Firewall](#firewalls) to.  Resources added directly are taking precedence over those added via a [Label Selector](#label-selector). </value>
        [JsonPropertyName("apply_to")]
        public List<FirewallResource>? ApplyTo { get { return this.ApplyToOption; } set { this.ApplyToOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Rule>?> RulesOption { get; private set; }

        /// <summary>
        /// Array of rules.  Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits). 
        /// </summary>
        /// <value>Array of rules.  Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits). </value>
        /* <example>[{&quot;direction&quot;:&quot;in&quot;,&quot;port&quot;:&quot;80&quot;,&quot;protocol&quot;:&quot;tcp&quot;,&quot;source_ips&quot;:[&quot;28.239.13.1/32&quot;,&quot;28.239.14.0/24&quot;,&quot;ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128&quot;]}]</example> */
        [JsonPropertyName("rules")]
        public List<Rule>? Rules { get { return this.RulesOption; } set { this.RulesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFirewallRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplyTo: ").Append(ApplyTo).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateFirewallRequest" />
    /// </summary>
    internal class CreateFirewallRequestJsonConverter : JsonConverter<CreateFirewallRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateFirewallRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateFirewallRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<List<FirewallResource>?> applyTo = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<List<Rule>?> rules = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "apply_to":
                            applyTo = new Option<List<FirewallResource>?>(JsonSerializer.Deserialize<List<FirewallResource>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rules":
                            rules = new Option<List<Rule>?>(JsonSerializer.Deserialize<List<Rule>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateFirewallRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateFirewallRequest.");

            if (applyTo.IsSet && applyTo.Value == null)
                throw new ArgumentNullException(nameof(applyTo), "Property is not nullable for class CreateFirewallRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateFirewallRequest.");

            if (rules.IsSet && rules.Value == null)
                throw new ArgumentNullException(nameof(rules), "Property is not nullable for class CreateFirewallRequest.");

            return new CreateFirewallRequest(name.Value!, applyTo, labels, rules);
        }

        /// <summary>
        /// Serializes a <see cref="CreateFirewallRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFirewallRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateFirewallRequest createFirewallRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createFirewallRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateFirewallRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFirewallRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateFirewallRequest createFirewallRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createFirewallRequest.Name == null)
                throw new ArgumentNullException(nameof(createFirewallRequest.Name), "Property is required for class CreateFirewallRequest.");

            if (createFirewallRequest.ApplyToOption.IsSet && createFirewallRequest.ApplyTo == null)
                throw new ArgumentNullException(nameof(createFirewallRequest.ApplyTo), "Property is required for class CreateFirewallRequest.");

            if (createFirewallRequest.LabelsOption.IsSet && createFirewallRequest.Labels == null)
                throw new ArgumentNullException(nameof(createFirewallRequest.Labels), "Property is required for class CreateFirewallRequest.");

            if (createFirewallRequest.RulesOption.IsSet && createFirewallRequest.Rules == null)
                throw new ArgumentNullException(nameof(createFirewallRequest.Rules), "Property is required for class CreateFirewallRequest.");

            writer.WriteString("name", createFirewallRequest.Name);

            if (createFirewallRequest.ApplyToOption.IsSet)
            {
                writer.WritePropertyName("apply_to");
                JsonSerializer.Serialize(writer, createFirewallRequest.ApplyTo, jsonSerializerOptions);
            }
            if (createFirewallRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createFirewallRequest.Labels, jsonSerializerOptions);
            }
            if (createFirewallRequest.RulesOption.IsSet)
            {
                writer.WritePropertyName("rules");
                JsonSerializer.Serialize(writer, createFirewallRequest.Rules, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreateFirewallRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateFirewallRequest))]
    internal partial class CreateFirewallRequestSerializationContext : JsonSerializerContext { }
}
