// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}
    /// </summary>
    internal partial class GetLoadBalancerResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLoadBalancerResponse" /> class.
        /// </summary>
        /// <param name="loadBalancer">loadBalancer</param>
        [JsonConstructor]
        internal GetLoadBalancerResponse(LoadBalancer loadBalancer)
        {
            LoadBalancer = loadBalancer;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets LoadBalancer
        /// </summary>
        [JsonPropertyName("load_balancer")]
        public LoadBalancer LoadBalancer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLoadBalancerResponse {\n");
            sb.Append("  LoadBalancer: ").Append(LoadBalancer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetLoadBalancerResponse" />
    /// </summary>
    internal class GetLoadBalancerResponseJsonConverter : JsonConverter<GetLoadBalancerResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetLoadBalancerResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetLoadBalancerResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<LoadBalancer?> loadBalancer = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "load_balancer":
                            loadBalancer = new Option<LoadBalancer?>(JsonSerializer.Deserialize<LoadBalancer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!loadBalancer.IsSet)
                throw new ArgumentException("Property is required for class GetLoadBalancerResponse.", nameof(loadBalancer));

            if (loadBalancer.IsSet && loadBalancer.Value == null)
                throw new ArgumentNullException(nameof(loadBalancer), "Property is not nullable for class GetLoadBalancerResponse.");

            return new GetLoadBalancerResponse(loadBalancer.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetLoadBalancerResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLoadBalancerResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetLoadBalancerResponse getLoadBalancerResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getLoadBalancerResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetLoadBalancerResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLoadBalancerResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetLoadBalancerResponse getLoadBalancerResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getLoadBalancerResponse.LoadBalancer == null)
                throw new ArgumentNullException(nameof(getLoadBalancerResponse.LoadBalancer), "Property is required for class GetLoadBalancerResponse.");

            writer.WritePropertyName("load_balancer");
            JsonSerializer.Serialize(writer, getLoadBalancerResponse.LoadBalancer, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The GetLoadBalancerResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetLoadBalancerResponse))]
    internal partial class GetLoadBalancerResponseSerializationContext : JsonSerializerContext { }
}
