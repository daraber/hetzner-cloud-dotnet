// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/volumes
    /// </summary>
    public partial class CreateVolumeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVolumeRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the volume</param>
        /// <param name="size">Size of the Volume in GB</param>
        /// <param name="automount">Auto-mount Volume after attach. &#x60;server&#x60; must be provided.</param>
        /// <param name="format">Format Volume after creation. One of: &#x60;xfs&#x60;, &#x60;ext4&#x60;</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="location">Location to create the Volume in (can be omitted if Server is specified)</param>
        /// <param name="server">Server to which to attach the Volume once it&#39;s created (Volume will be created in the same Location as the server)</param>
        [JsonConstructor]
        public CreateVolumeRequest(string name, int size, Option<bool?> automount = default, Option<string?> format = default, Option<Dictionary<string, string>?> labels = default, Option<string?> location = default, Option<long?> server = default)
        {
            Name = name;
            Size = size;
            AutomountOption = automount;
            FormatOption = format;
            LabelsOption = labels;
            LocationOption = location;
            ServerOption = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the volume
        /// </summary>
        /// <value>Name of the volume</value>
        /* <example>databases-storage</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Size of the Volume in GB
        /// </summary>
        /// <value>Size of the Volume in GB</value>
        /* <example>42</example> */
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Used to track the state of Automount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AutomountOption { get; private set; }

        /// <summary>
        /// Auto-mount Volume after attach. &#x60;server&#x60; must be provided.
        /// </summary>
        /// <value>Auto-mount Volume after attach. &#x60;server&#x60; must be provided.</value>
        /* <example>false</example> */
        [JsonPropertyName("automount")]
        public bool? Automount { get { return this.AutomountOption; } set { this.AutomountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormatOption { get; private set; }

        /// <summary>
        /// Format Volume after creation. One of: &#x60;xfs&#x60;, &#x60;ext4&#x60;
        /// </summary>
        /// <value>Format Volume after creation. One of: &#x60;xfs&#x60;, &#x60;ext4&#x60;</value>
        /* <example>xfs</example> */
        [JsonPropertyName("format")]
        public string? Format { get { return this.FormatOption; } set { this.FormatOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Location to create the Volume in (can be omitted if Server is specified)
        /// </summary>
        /// <value>Location to create the Volume in (can be omitted if Server is specified)</value>
        /* <example>nbg1</example> */
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ServerOption { get; private set; }

        /// <summary>
        /// Server to which to attach the Volume once it&#39;s created (Volume will be created in the same Location as the server)
        /// </summary>
        /// <value>Server to which to attach the Volume once it&#39;s created (Volume will be created in the same Location as the server)</value>
        [JsonPropertyName("server")]
        public long? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateVolumeRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Automount: ").Append(Automount).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateVolumeRequest" />
    /// </summary>
    public class CreateVolumeRequestJsonConverter : JsonConverter<CreateVolumeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateVolumeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateVolumeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<int?> size = default;
            Option<bool?> automount = default;
            Option<string?> format = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> location = default;
            Option<long?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "automount":
                            automount = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "format":
                            format = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "server":
                            server = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateVolumeRequest.", nameof(name));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class CreateVolumeRequest.", nameof(size));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateVolumeRequest.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class CreateVolumeRequest.");

            if (automount.IsSet && automount.Value == null)
                throw new ArgumentNullException(nameof(automount), "Property is not nullable for class CreateVolumeRequest.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class CreateVolumeRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateVolumeRequest.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class CreateVolumeRequest.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class CreateVolumeRequest.");

            return new CreateVolumeRequest(name.Value!, size.Value!.Value!, automount, format, labels, location, server);
        }

        /// <summary>
        /// Serializes a <see cref="CreateVolumeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createVolumeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateVolumeRequest createVolumeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createVolumeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateVolumeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createVolumeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateVolumeRequest createVolumeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createVolumeRequest.Name == null)
                throw new ArgumentNullException(nameof(createVolumeRequest.Name), "Property is required for class CreateVolumeRequest.");

            if (createVolumeRequest.FormatOption.IsSet && createVolumeRequest.Format == null)
                throw new ArgumentNullException(nameof(createVolumeRequest.Format), "Property is required for class CreateVolumeRequest.");

            if (createVolumeRequest.LabelsOption.IsSet && createVolumeRequest.Labels == null)
                throw new ArgumentNullException(nameof(createVolumeRequest.Labels), "Property is required for class CreateVolumeRequest.");

            if (createVolumeRequest.LocationOption.IsSet && createVolumeRequest.Location == null)
                throw new ArgumentNullException(nameof(createVolumeRequest.Location), "Property is required for class CreateVolumeRequest.");

            writer.WriteString("name", createVolumeRequest.Name);

            writer.WriteNumber("size", createVolumeRequest.Size);

            if (createVolumeRequest.AutomountOption.IsSet)
                writer.WriteBoolean("automount", createVolumeRequest.AutomountOption.Value!.Value);

            if (createVolumeRequest.FormatOption.IsSet)
                writer.WriteString("format", createVolumeRequest.Format);

            if (createVolumeRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createVolumeRequest.Labels, jsonSerializerOptions);
            }
            if (createVolumeRequest.LocationOption.IsSet)
                writer.WriteString("location", createVolumeRequest.Location);

            if (createVolumeRequest.ServerOption.IsSet)
                writer.WriteNumber("server", createVolumeRequest.ServerOption.Value!.Value);
        }
    }

    /// <summary>
    /// The CreateVolumeRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateVolumeRequest))]
    public partial class CreateVolumeRequestSerializationContext : JsonSerializerContext { }
}
