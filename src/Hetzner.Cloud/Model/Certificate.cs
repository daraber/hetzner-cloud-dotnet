// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic.
    /// </summary>
    public partial class Certificate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Certificate" /> class.
        /// </summary>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="domainNames">Domains and subdomains covered by the Certificate</param>
        /// <param name="id">ID of the Certificate.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="usedBy">Resources currently using the Certificate</param>
        /// <param name="varCertificate">Certificate and chain in PEM format, in order so that each record directly certifies the one preceding</param>
        /// <param name="fingerprint">SHA256 fingerprint of the Certificate</param>
        /// <param name="notValidAfter">Point in time when the Certificate stops being valid (in ISO-8601 format)</param>
        /// <param name="notValidBefore">Point in time when the Certificate becomes valid (in ISO-8601 format)</param>
        /// <param name="status">status</param>
        /// <param name="type">Type of the Certificate</param>
        [JsonConstructor]
        public Certificate(string created, List<string> domainNames, long id, Dictionary<string, string> labels, string name, List<Resource> usedBy, string? varCertificate = default, string? fingerprint = default, string? notValidAfter = default, string? notValidBefore = default, Option<CertificateStatus?> status = default, Option<TypeEnum?> type = default)
        {
            Created = created;
            DomainNames = domainNames;
            Id = id;
            Labels = labels;
            Name = name;
            UsedBy = usedBy;
            VarCertificate = varCertificate;
            Fingerprint = fingerprint;
            NotValidAfter = notValidAfter;
            NotValidBefore = notValidBefore;
            StatusOption = status;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the Certificate
        /// </summary>
        /// <value>Type of the Certificate</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Managed for value: managed
            /// </summary>
            Managed = 1,

            /// <summary>
            /// Enum Uploaded for value: uploaded
            /// </summary>
            Uploaded = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("managed"))
                return TypeEnum.Managed;

            if (value.Equals("uploaded"))
                return TypeEnum.Uploaded;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("managed"))
                return TypeEnum.Managed;

            if (value.Equals("uploaded"))
                return TypeEnum.Uploaded;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Managed)
                return "managed";

            if (value == TypeEnum.Uploaded)
                return "uploaded";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Type of the Certificate
        /// </summary>
        /// <value>Type of the Certificate</value>
        /* <example>uploaded</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// Domains and subdomains covered by the Certificate
        /// </summary>
        /// <value>Domains and subdomains covered by the Certificate</value>
        /* <example>[&quot;example.com&quot;,&quot;webmail.example.com&quot;,&quot;www.example.com&quot;]</example> */
        [JsonPropertyName("domain_names")]
        public List<string> DomainNames { get; set; }

        /// <summary>
        /// ID of the Certificate.
        /// </summary>
        /// <value>ID of the Certificate.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Resources currently using the Certificate
        /// </summary>
        /// <value>Resources currently using the Certificate</value>
        [JsonPropertyName("used_by")]
        public List<Resource> UsedBy { get; set; }

        /// <summary>
        /// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
        /// </summary>
        /// <value>Certificate and chain in PEM format, in order so that each record directly certifies the one preceding</value>
        /* <example>-----BEGIN CERTIFICATE-----
...</example> */
        [JsonPropertyName("certificate")]
        public string? VarCertificate { get; set; }

        /// <summary>
        /// SHA256 fingerprint of the Certificate
        /// </summary>
        /// <value>SHA256 fingerprint of the Certificate</value>
        /* <example>03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f</example> */
        [JsonPropertyName("fingerprint")]
        public string? Fingerprint { get; set; }

        /// <summary>
        /// Point in time when the Certificate stops being valid (in ISO-8601 format)
        /// </summary>
        /// <value>Point in time when the Certificate stops being valid (in ISO-8601 format)</value>
        /* <example>2019-07-08T09:59:59+00:00</example> */
        [JsonPropertyName("not_valid_after")]
        public string? NotValidAfter { get; set; }

        /// <summary>
        /// Point in time when the Certificate becomes valid (in ISO-8601 format)
        /// </summary>
        /// <value>Point in time when the Certificate becomes valid (in ISO-8601 format)</value>
        /* <example>2019-01-08T10:00:00+00:00</example> */
        [JsonPropertyName("not_valid_before")]
        public string? NotValidBefore { get; set; }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CertificateStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public CertificateStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Certificate {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DomainNames: ").Append(DomainNames).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UsedBy: ").Append(UsedBy).Append("\n");
            sb.Append("  VarCertificate: ").Append(VarCertificate).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  NotValidAfter: ").Append(NotValidAfter).Append("\n");
            sb.Append("  NotValidBefore: ").Append(NotValidBefore).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Certificate" />
    /// </summary>
    public class CertificateJsonConverter : JsonConverter<Certificate>
    {
        /// <summary>
        /// Deserializes json to <see cref="Certificate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Certificate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> created = default;
            Option<List<string>?> domainNames = default;
            Option<long?> id = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<List<Resource>?> usedBy = default;
            Option<string?> varCertificate = default;
            Option<string?> fingerprint = default;
            Option<string?> notValidAfter = default;
            Option<string?> notValidBefore = default;
            Option<CertificateStatus?> status = default;
            Option<Certificate.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain_names":
                            domainNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "used_by":
                            usedBy = new Option<List<Resource>?>(JsonSerializer.Deserialize<List<Resource>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "certificate":
                            varCertificate = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fingerprint":
                            fingerprint = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "not_valid_after":
                            notValidAfter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "not_valid_before":
                            notValidBefore = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<CertificateStatus?>(JsonSerializer.Deserialize<CertificateStatus>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Certificate.TypeEnum?>(Certificate.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(created));

            if (!domainNames.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(domainNames));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(id));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(name));

            if (!usedBy.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(usedBy));

            if (!varCertificate.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(varCertificate));

            if (!fingerprint.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(fingerprint));

            if (!notValidAfter.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(notValidAfter));

            if (!notValidBefore.IsSet)
                throw new ArgumentException("Property is required for class Certificate.", nameof(notValidBefore));

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Certificate.");

            if (domainNames.IsSet && domainNames.Value == null)
                throw new ArgumentNullException(nameof(domainNames), "Property is not nullable for class Certificate.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Certificate.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Certificate.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Certificate.");

            if (usedBy.IsSet && usedBy.Value == null)
                throw new ArgumentNullException(nameof(usedBy), "Property is not nullable for class Certificate.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Certificate.");

            return new Certificate(created.Value!, domainNames.Value!, id.Value!.Value!, labels.Value!, name.Value!, usedBy.Value!, varCertificate.Value!, fingerprint.Value!, notValidAfter.Value!, notValidBefore.Value!, status, type);
        }

        /// <summary>
        /// Serializes a <see cref="Certificate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="certificate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Certificate certificate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, certificate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Certificate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="certificate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Certificate certificate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (certificate.Created == null)
                throw new ArgumentNullException(nameof(certificate.Created), "Property is required for class Certificate.");

            if (certificate.DomainNames == null)
                throw new ArgumentNullException(nameof(certificate.DomainNames), "Property is required for class Certificate.");

            if (certificate.Labels == null)
                throw new ArgumentNullException(nameof(certificate.Labels), "Property is required for class Certificate.");

            if (certificate.Name == null)
                throw new ArgumentNullException(nameof(certificate.Name), "Property is required for class Certificate.");

            if (certificate.UsedBy == null)
                throw new ArgumentNullException(nameof(certificate.UsedBy), "Property is required for class Certificate.");

            writer.WriteString("created", certificate.Created);

            writer.WritePropertyName("domain_names");
            JsonSerializer.Serialize(writer, certificate.DomainNames, jsonSerializerOptions);
            writer.WriteNumber("id", certificate.Id);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, certificate.Labels, jsonSerializerOptions);
            writer.WriteString("name", certificate.Name);

            writer.WritePropertyName("used_by");
            JsonSerializer.Serialize(writer, certificate.UsedBy, jsonSerializerOptions);
            if (certificate.VarCertificate != null)
                writer.WriteString("certificate", certificate.VarCertificate);
            else
                writer.WriteNull("certificate");

            if (certificate.Fingerprint != null)
                writer.WriteString("fingerprint", certificate.Fingerprint);
            else
                writer.WriteNull("fingerprint");

            if (certificate.NotValidAfter != null)
                writer.WriteString("not_valid_after", certificate.NotValidAfter);
            else
                writer.WriteNull("not_valid_after");

            if (certificate.NotValidBefore != null)
                writer.WriteString("not_valid_before", certificate.NotValidBefore);
            else
                writer.WriteNull("not_valid_before");

            if (certificate.StatusOption.IsSet)
                if (certificate.StatusOption.Value != null)
                {
                    writer.WritePropertyName("status");
                    JsonSerializer.Serialize(writer, certificate.Status, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("status");
            var typeRawValue = Certificate.TypeEnumToJsonValue(certificate.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
        }
    }

    /// <summary>
    /// The CertificateSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Certificate))]
    public partial class CertificateSerializationContext : JsonSerializerContext { }
}
