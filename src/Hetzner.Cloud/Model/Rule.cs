// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Rule of a firewall.
    /// </summary>
    internal partial class Rule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        /// <param name="direction">Traffic direction in which the rule should be applied to.  Use &#x60;source_ips&#x60; for direction &#x60;in&#x60; and &#x60;destination_ips&#x60; for direction &#x60;out&#x60; to specify IPs. </param>
        /// <param name="protocol">Network protocol to apply the rule for.</param>
        /// <param name="description">Description of the rule.</param>
        /// <param name="destinationIps">List of permitted IPv4/IPv6 addresses for outgoing traffic.  The &#x60;direction&#x60; must be set to &#x60;out&#x60;.  IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. </param>
        /// <param name="port">Port or port range to apply the rule for.  Only applicable for protocols &#x60;tcp&#x60; and &#x60;udp&#x60;.  A port range can be specified by separating lower and upper bounds with a dash. &#x60;1024-5000&#x60; will include all ports starting from 1024 up to port 5000. </param>
        /// <param name="sourceIps">List of permitted IPv4/IPv6 addresses for incoming traffic.  The &#x60;direction&#x60; must be set to &#x60;in&#x60;.  IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. </param>
        [JsonConstructor]
        internal Rule(DirectionEnum direction, ProtocolEnum protocol, Option<string?> description = default, Option<List<string>?> destinationIps = default, Option<string?> port = default, Option<List<string>?> sourceIps = default)
        {
            Direction = direction;
            Protocol = protocol;
            DescriptionOption = description;
            DestinationIpsOption = destinationIps;
            PortOption = port;
            SourceIpsOption = sourceIps;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Traffic direction in which the rule should be applied to.  Use &#x60;source_ips&#x60; for direction &#x60;in&#x60; and &#x60;destination_ips&#x60; for direction &#x60;out&#x60; to specify IPs. 
        /// </summary>
        /// <value>Traffic direction in which the rule should be applied to.  Use &#x60;source_ips&#x60; for direction &#x60;in&#x60; and &#x60;destination_ips&#x60; for direction &#x60;out&#x60; to specify IPs. </value>
        internal enum DirectionEnum
        {
            /// <summary>
            /// Enum In for value: in
            /// </summary>
            In = 1,

            /// <summary>
            /// Enum Out for value: out
            /// </summary>
            Out = 2
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DirectionEnum DirectionEnumFromString(string value)
        {
            if (value.Equals("in"))
                return DirectionEnum.In;

            if (value.Equals("out"))
                return DirectionEnum.Out;

            throw new NotImplementedException($"Could not convert value to type DirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DirectionEnum? DirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("in"))
                return DirectionEnum.In;

            if (value.Equals("out"))
                return DirectionEnum.Out;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DirectionEnumToJsonValue(DirectionEnum value)
        {
            if (value == DirectionEnum.In)
                return "in";

            if (value == DirectionEnum.Out)
                return "out";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Traffic direction in which the rule should be applied to.  Use &#x60;source_ips&#x60; for direction &#x60;in&#x60; and &#x60;destination_ips&#x60; for direction &#x60;out&#x60; to specify IPs. 
        /// </summary>
        /// <value>Traffic direction in which the rule should be applied to.  Use &#x60;source_ips&#x60; for direction &#x60;in&#x60; and &#x60;destination_ips&#x60; for direction &#x60;out&#x60; to specify IPs. </value>
        /* <example>in</example> */
        [JsonPropertyName("direction")]
        public DirectionEnum Direction { get; set; }

        /// <summary>
        /// Network protocol to apply the rule for.
        /// </summary>
        /// <value>Network protocol to apply the rule for.</value>
        internal enum ProtocolEnum
        {
            /// <summary>
            /// Enum Esp for value: esp
            /// </summary>
            Esp = 1,

            /// <summary>
            /// Enum Gre for value: gre
            /// </summary>
            Gre = 2,

            /// <summary>
            /// Enum Icmp for value: icmp
            /// </summary>
            Icmp = 3,

            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            Tcp = 4,

            /// <summary>
            /// Enum Udp for value: udp
            /// </summary>
            Udp = 5
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ProtocolEnum ProtocolEnumFromString(string value)
        {
            if (value.Equals("esp"))
                return ProtocolEnum.Esp;

            if (value.Equals("gre"))
                return ProtocolEnum.Gre;

            if (value.Equals("icmp"))
                return ProtocolEnum.Icmp;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            if (value.Equals("udp"))
                return ProtocolEnum.Udp;

            throw new NotImplementedException($"Could not convert value to type ProtocolEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProtocolEnum? ProtocolEnumFromStringOrDefault(string value)
        {
            if (value.Equals("esp"))
                return ProtocolEnum.Esp;

            if (value.Equals("gre"))
                return ProtocolEnum.Gre;

            if (value.Equals("icmp"))
                return ProtocolEnum.Icmp;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            if (value.Equals("udp"))
                return ProtocolEnum.Udp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProtocolEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProtocolEnumToJsonValue(ProtocolEnum value)
        {
            if (value == ProtocolEnum.Esp)
                return "esp";

            if (value == ProtocolEnum.Gre)
                return "gre";

            if (value == ProtocolEnum.Icmp)
                return "icmp";

            if (value == ProtocolEnum.Tcp)
                return "tcp";

            if (value == ProtocolEnum.Udp)
                return "udp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Network protocol to apply the rule for.
        /// </summary>
        /// <value>Network protocol to apply the rule for.</value>
        [JsonPropertyName("protocol")]
        public ProtocolEnum Protocol { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the rule.
        /// </summary>
        /// <value>Description of the rule.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationIps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DestinationIpsOption { get; private set; }

        /// <summary>
        /// List of permitted IPv4/IPv6 addresses for outgoing traffic.  The &#x60;direction&#x60; must be set to &#x60;out&#x60;.  IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. 
        /// </summary>
        /// <value>List of permitted IPv4/IPv6 addresses for outgoing traffic.  The &#x60;direction&#x60; must be set to &#x60;out&#x60;.  IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. </value>
        /* <example>[]</example> */
        [JsonPropertyName("destination_ips")]
        public List<string>? DestinationIps { get { return this.DestinationIpsOption; } set { this.DestinationIpsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Port
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PortOption { get; private set; }

        /// <summary>
        /// Port or port range to apply the rule for.  Only applicable for protocols &#x60;tcp&#x60; and &#x60;udp&#x60;.  A port range can be specified by separating lower and upper bounds with a dash. &#x60;1024-5000&#x60; will include all ports starting from 1024 up to port 5000. 
        /// </summary>
        /// <value>Port or port range to apply the rule for.  Only applicable for protocols &#x60;tcp&#x60; and &#x60;udp&#x60;.  A port range can be specified by separating lower and upper bounds with a dash. &#x60;1024-5000&#x60; will include all ports starting from 1024 up to port 5000. </value>
        /* <example>80</example> */
        [JsonPropertyName("port")]
        public string? Port { get { return this.PortOption; } set { this.PortOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceIps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SourceIpsOption { get; private set; }

        /// <summary>
        /// List of permitted IPv4/IPv6 addresses for incoming traffic.  The &#x60;direction&#x60; must be set to &#x60;in&#x60;.  IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. 
        /// </summary>
        /// <value>List of permitted IPv4/IPv6 addresses for incoming traffic.  The &#x60;direction&#x60; must be set to &#x60;in&#x60;.  IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR blocks at most.  The CIDR blocks may refer to networks (with empty host bits) or single hosts. For example, a network could be defined with &#x60;10.0.1.0/24&#x60; or &#x60;2001:db8:ff00:42::/64&#x60;, and a single host with &#x60;10.0.1.1/32&#x60; or &#x60;2001:db8:ff00:42::8329/128&#x60;.  Use &#x60;0.0.0.0/0&#x60; to allow any IPv4 addresses and &#x60;::/0&#x60; to allow any IPv6 addresses. </value>
        /* <example>[&quot;28.239.13.1/32&quot;,&quot;28.239.14.0/24&quot;,&quot;ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128&quot;]</example> */
        [JsonPropertyName("source_ips")]
        public List<string>? SourceIps { get { return this.SourceIpsOption; } set { this.SourceIpsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Rule {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DestinationIps: ").Append(DestinationIps).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  SourceIps: ").Append(SourceIps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Rule" />
    /// </summary>
    internal class RuleJsonConverter : JsonConverter<Rule>
    {
        /// <summary>
        /// Deserializes json to <see cref="Rule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Rule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Rule.DirectionEnum?> direction = default;
            Option<Rule.ProtocolEnum?> protocol = default;
            Option<string?> description = default;
            Option<List<string>?> destinationIps = default;
            Option<string?> port = default;
            Option<List<string>?> sourceIps = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "direction":
                            string? directionRawValue = utf8JsonReader.GetString();
                            if (directionRawValue != null)
                                direction = new Option<Rule.DirectionEnum?>(Rule.DirectionEnumFromStringOrDefault(directionRawValue));
                            break;
                        case "protocol":
                            string? protocolRawValue = utf8JsonReader.GetString();
                            if (protocolRawValue != null)
                                protocol = new Option<Rule.ProtocolEnum?>(Rule.ProtocolEnumFromStringOrDefault(protocolRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_ips":
                            destinationIps = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "port":
                            port = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_ips":
                            sourceIps = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!direction.IsSet)
                throw new ArgumentException("Property is required for class Rule.", nameof(direction));

            if (!protocol.IsSet)
                throw new ArgumentException("Property is required for class Rule.", nameof(protocol));

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction), "Property is not nullable for class Rule.");

            if (protocol.IsSet && protocol.Value == null)
                throw new ArgumentNullException(nameof(protocol), "Property is not nullable for class Rule.");

            if (destinationIps.IsSet && destinationIps.Value == null)
                throw new ArgumentNullException(nameof(destinationIps), "Property is not nullable for class Rule.");

            if (sourceIps.IsSet && sourceIps.Value == null)
                throw new ArgumentNullException(nameof(sourceIps), "Property is not nullable for class Rule.");

            return new Rule(direction.Value!.Value!, protocol.Value!.Value!, description, destinationIps, port, sourceIps);
        }

        /// <summary>
        /// Serializes a <see cref="Rule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Rule rule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Rule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Rule rule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rule.DestinationIpsOption.IsSet && rule.DestinationIps == null)
                throw new ArgumentNullException(nameof(rule.DestinationIps), "Property is required for class Rule.");

            if (rule.SourceIpsOption.IsSet && rule.SourceIps == null)
                throw new ArgumentNullException(nameof(rule.SourceIps), "Property is required for class Rule.");

            var directionRawValue = Rule.DirectionEnumToJsonValue(rule.Direction);
            writer.WriteString("direction", directionRawValue);
            var protocolRawValue = Rule.ProtocolEnumToJsonValue(rule.Protocol);
            writer.WriteString("protocol", protocolRawValue);
            if (rule.DescriptionOption.IsSet)
                if (rule.DescriptionOption.Value != null)
                    writer.WriteString("description", rule.Description);
                else
                    writer.WriteNull("description");

            if (rule.DestinationIpsOption.IsSet)
            {
                writer.WritePropertyName("destination_ips");
                JsonSerializer.Serialize(writer, rule.DestinationIps, jsonSerializerOptions);
            }
            if (rule.PortOption.IsSet)
                if (rule.PortOption.Value != null)
                    writer.WriteString("port", rule.Port);
                else
                    writer.WriteNull("port");

            if (rule.SourceIpsOption.IsSet)
            {
                writer.WritePropertyName("source_ips");
                JsonSerializer.Serialize(writer, rule.SourceIps, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The RuleSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Rule))]
    internal partial class RuleSerializationContext : JsonSerializerContext { }
}
