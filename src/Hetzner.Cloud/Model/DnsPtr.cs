// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr | Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_dns_ptr
    /// </summary>
    public partial class DnsPtr : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DnsPtr" /> class.
        /// </summary>
        /// <param name="varDnsPtr">Domain Name to point to.  PTR record content used for reverse DNS.  | DNS pointer for the specific IP address</param>
        /// <param name="ip">Single IPv4 or IPv6 address to create pointer for.  | Single IPv6 address of this Server for which the reverse DNS entry has been set up</param>
        [JsonConstructor]
        public DnsPtr(string varDnsPtr, string ip)
        {
            VarDnsPtr = varDnsPtr;
            Ip = ip;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Domain Name to point to.  PTR record content used for reverse DNS.  | DNS pointer for the specific IP address
        /// </summary>
        /// <value>Domain Name to point to.  PTR record content used for reverse DNS.  | DNS pointer for the specific IP address</value>
        /* <example>server.example.com</example> */
        [JsonPropertyName("dns_ptr")]
        public string VarDnsPtr { get; set; }

        /// <summary>
        /// Single IPv4 or IPv6 address to create pointer for.  | Single IPv6 address of this Server for which the reverse DNS entry has been set up
        /// </summary>
        /// <value>Single IPv4 or IPv6 address to create pointer for.  | Single IPv6 address of this Server for which the reverse DNS entry has been set up</value>
        /* <example>2001:db8::1</example> */
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DnsPtr {\n");
            sb.Append("  VarDnsPtr: ").Append(VarDnsPtr).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DnsPtr" />
    /// </summary>
    public class DnsPtrJsonConverter : JsonConverter<DnsPtr>
    {
        /// <summary>
        /// Deserializes json to <see cref="DnsPtr" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DnsPtr Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varDnsPtr = default;
            Option<string?> ip = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dns_ptr":
                            varDnsPtr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varDnsPtr.IsSet)
                throw new ArgumentException("Property is required for class DnsPtr.", nameof(varDnsPtr));

            if (!ip.IsSet)
                throw new ArgumentException("Property is required for class DnsPtr.", nameof(ip));

            if (varDnsPtr.IsSet && varDnsPtr.Value == null)
                throw new ArgumentNullException(nameof(varDnsPtr), "Property is not nullable for class DnsPtr.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class DnsPtr.");

            return new DnsPtr(varDnsPtr.Value!, ip.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DnsPtr" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dnsPtr"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DnsPtr dnsPtr, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dnsPtr, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DnsPtr" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dnsPtr"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DnsPtr dnsPtr, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dnsPtr.VarDnsPtr == null)
                throw new ArgumentNullException(nameof(dnsPtr.VarDnsPtr), "Property is required for class DnsPtr.");

            if (dnsPtr.Ip == null)
                throw new ArgumentNullException(nameof(dnsPtr.Ip), "Property is required for class DnsPtr.");

            writer.WriteString("dns_ptr", dnsPtr.VarDnsPtr);

            writer.WriteString("ip", dnsPtr.Ip);
        }
    }

    /// <summary>
    /// The DnsPtrSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(DnsPtr))]
    public partial class DnsPtrSerializationContext : JsonSerializerContext { }
}
