// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Response to POST https://api.hetzner.cloud/v1/firewalls
    /// </summary>
    public partial class CreateFirewallResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFirewallResponse" /> class.
        /// </summary>
        /// <param name="actions">actions</param>
        /// <param name="firewall">firewall</param>
        [JsonConstructor]
        public CreateFirewallResponse(Option<List<Action>?> actions = default, Option<Firewall?> firewall = default)
        {
            ActionsOption = actions;
            FirewallOption = firewall;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Action>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        /* <example>[{&quot;command&quot;:&quot;set_firewall_rules&quot;,&quot;error&quot;:{&quot;code&quot;:&quot;action_failed&quot;,&quot;message&quot;:&quot;Action failed&quot;},&quot;finished&quot;:&quot;2016-01-30T23:56:00+00:00&quot;,&quot;id&quot;:13,&quot;progress&quot;:100,&quot;resources&quot;:[{&quot;id&quot;:38,&quot;type&quot;:&quot;firewall&quot;}],&quot;started&quot;:&quot;2016-01-30T23:55:00+00:00&quot;,&quot;status&quot;:&quot;success&quot;},{&quot;command&quot;:&quot;apply_firewall&quot;,&quot;error&quot;:{&quot;code&quot;:&quot;action_failed&quot;,&quot;message&quot;:&quot;Action failed&quot;},&quot;finished&quot;:&quot;2016-01-30T23:56:00+00:00&quot;,&quot;id&quot;:14,&quot;progress&quot;:100,&quot;resources&quot;:[{&quot;id&quot;:42,&quot;type&quot;:&quot;server&quot;},{&quot;id&quot;:38,&quot;type&quot;:&quot;firewall&quot;}],&quot;started&quot;:&quot;2016-01-30T23:55:00+00:00&quot;,&quot;status&quot;:&quot;success&quot;}]</example> */
        [JsonPropertyName("actions")]
        public List<Action>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Firewall
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Firewall?> FirewallOption { get; private set; }

        /// <summary>
        /// Gets or Sets Firewall
        /// </summary>
        [JsonPropertyName("firewall")]
        public Firewall? Firewall { get { return this.FirewallOption; } set { this.FirewallOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFirewallResponse {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Firewall: ").Append(Firewall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateFirewallResponse" />
    /// </summary>
    public class CreateFirewallResponseJsonConverter : JsonConverter<CreateFirewallResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateFirewallResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateFirewallResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Action>?> actions = default;
            Option<Firewall?> firewall = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actions":
                            actions = new Option<List<Action>?>(JsonSerializer.Deserialize<List<Action>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "firewall":
                            firewall = new Option<Firewall?>(JsonSerializer.Deserialize<Firewall>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class CreateFirewallResponse.");

            if (firewall.IsSet && firewall.Value == null)
                throw new ArgumentNullException(nameof(firewall), "Property is not nullable for class CreateFirewallResponse.");

            return new CreateFirewallResponse(actions, firewall);
        }

        /// <summary>
        /// Serializes a <see cref="CreateFirewallResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFirewallResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateFirewallResponse createFirewallResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createFirewallResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateFirewallResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFirewallResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateFirewallResponse createFirewallResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createFirewallResponse.ActionsOption.IsSet && createFirewallResponse.Actions == null)
                throw new ArgumentNullException(nameof(createFirewallResponse.Actions), "Property is required for class CreateFirewallResponse.");

            if (createFirewallResponse.FirewallOption.IsSet && createFirewallResponse.Firewall == null)
                throw new ArgumentNullException(nameof(createFirewallResponse.Firewall), "Property is required for class CreateFirewallResponse.");

            if (createFirewallResponse.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, createFirewallResponse.Actions, jsonSerializerOptions);
            }
            if (createFirewallResponse.FirewallOption.IsSet)
            {
                writer.WritePropertyName("firewall");
                JsonSerializer.Serialize(writer, createFirewallResponse.Firewall, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreateFirewallResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateFirewallResponse))]
    public partial class CreateFirewallResponseSerializationContext : JsonSerializerContext { }
}
