// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Service health check
    /// </summary>
    internal partial class LoadBalancerServiceHealthCheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerServiceHealthCheck" /> class.
        /// </summary>
        /// <param name="interval">Time interval in seconds health checks are performed</param>
        /// <param name="port">Port the health check will be performed on</param>
        /// <param name="protocol">Type of the health check</param>
        /// <param name="retries">Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again</param>
        /// <param name="timeout">Time in seconds after an attempt is considered a timeout</param>
        /// <param name="http">http</param>
        [JsonConstructor]
        internal LoadBalancerServiceHealthCheck(int interval, int port, ProtocolEnum protocol, int retries, int timeout, Option<LoadBalancerServiceHealthCheckHttp?> http = default)
        {
            Interval = interval;
            Port = port;
            Protocol = protocol;
            Retries = retries;
            Timeout = timeout;
            HttpOption = http;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the health check
        /// </summary>
        /// <value>Type of the health check</value>
        internal enum ProtocolEnum
        {
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            Http = 1,

            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            Tcp = 2
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ProtocolEnum ProtocolEnumFromString(string value)
        {
            if (value.Equals("http"))
                return ProtocolEnum.Http;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            throw new NotImplementedException($"Could not convert value to type ProtocolEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ProtocolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProtocolEnum? ProtocolEnumFromStringOrDefault(string value)
        {
            if (value.Equals("http"))
                return ProtocolEnum.Http;

            if (value.Equals("tcp"))
                return ProtocolEnum.Tcp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProtocolEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProtocolEnumToJsonValue(ProtocolEnum value)
        {
            if (value == ProtocolEnum.Http)
                return "http";

            if (value == ProtocolEnum.Tcp)
                return "tcp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of the health check
        /// </summary>
        /// <value>Type of the health check</value>
        /* <example>http</example> */
        [JsonPropertyName("protocol")]
        public ProtocolEnum Protocol { get; set; }

        /// <summary>
        /// Time interval in seconds health checks are performed
        /// </summary>
        /// <value>Time interval in seconds health checks are performed</value>
        /* <example>15</example> */
        [JsonPropertyName("interval")]
        public int Interval { get; set; }

        /// <summary>
        /// Port the health check will be performed on
        /// </summary>
        /// <value>Port the health check will be performed on</value>
        /* <example>4711</example> */
        [JsonPropertyName("port")]
        public int Port { get; set; }

        /// <summary>
        /// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
        /// </summary>
        /// <value>Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again</value>
        /* <example>3</example> */
        [JsonPropertyName("retries")]
        public int Retries { get; set; }

        /// <summary>
        /// Time in seconds after an attempt is considered a timeout
        /// </summary>
        /// <value>Time in seconds after an attempt is considered a timeout</value>
        /* <example>10</example> */
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; }

        /// <summary>
        /// Used to track the state of Http
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LoadBalancerServiceHealthCheckHttp?> HttpOption { get; private set; }

        /// <summary>
        /// Gets or Sets Http
        /// </summary>
        [JsonPropertyName("http")]
        public LoadBalancerServiceHealthCheckHttp? Http { get { return this.HttpOption; } set { this.HttpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerServiceHealthCheck {\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Http: ").Append(Http).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerServiceHealthCheck" />
    /// </summary>
    internal class LoadBalancerServiceHealthCheckJsonConverter : JsonConverter<LoadBalancerServiceHealthCheck>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerServiceHealthCheck" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerServiceHealthCheck Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> interval = default;
            Option<int?> port = default;
            Option<LoadBalancerServiceHealthCheck.ProtocolEnum?> protocol = default;
            Option<int?> retries = default;
            Option<int?> timeout = default;
            Option<LoadBalancerServiceHealthCheckHttp?> http = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interval":
                            interval = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "protocol":
                            string? protocolRawValue = utf8JsonReader.GetString();
                            if (protocolRawValue != null)
                                protocol = new Option<LoadBalancerServiceHealthCheck.ProtocolEnum?>(LoadBalancerServiceHealthCheck.ProtocolEnumFromStringOrDefault(protocolRawValue));
                            break;
                        case "retries":
                            retries = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "timeout":
                            timeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "http":
                            http = new Option<LoadBalancerServiceHealthCheckHttp?>(JsonSerializer.Deserialize<LoadBalancerServiceHealthCheckHttp>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!interval.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerServiceHealthCheck.", nameof(interval));

            if (!port.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerServiceHealthCheck.", nameof(port));

            if (!protocol.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerServiceHealthCheck.", nameof(protocol));

            if (!retries.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerServiceHealthCheck.", nameof(retries));

            if (!timeout.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerServiceHealthCheck.", nameof(timeout));

            if (interval.IsSet && interval.Value == null)
                throw new ArgumentNullException(nameof(interval), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            if (port.IsSet && port.Value == null)
                throw new ArgumentNullException(nameof(port), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            if (protocol.IsSet && protocol.Value == null)
                throw new ArgumentNullException(nameof(protocol), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            if (retries.IsSet && retries.Value == null)
                throw new ArgumentNullException(nameof(retries), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            if (timeout.IsSet && timeout.Value == null)
                throw new ArgumentNullException(nameof(timeout), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            if (http.IsSet && http.Value == null)
                throw new ArgumentNullException(nameof(http), "Property is not nullable for class LoadBalancerServiceHealthCheck.");

            return new LoadBalancerServiceHealthCheck(interval.Value!.Value!, port.Value!.Value!, protocol.Value!.Value!, retries.Value!.Value!, timeout.Value!.Value!, http);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerServiceHealthCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerServiceHealthCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerServiceHealthCheck loadBalancerServiceHealthCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerServiceHealthCheck, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerServiceHealthCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerServiceHealthCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerServiceHealthCheck loadBalancerServiceHealthCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerServiceHealthCheck.HttpOption.IsSet && loadBalancerServiceHealthCheck.Http == null)
                throw new ArgumentNullException(nameof(loadBalancerServiceHealthCheck.Http), "Property is required for class LoadBalancerServiceHealthCheck.");

            writer.WriteNumber("interval", loadBalancerServiceHealthCheck.Interval);

            writer.WriteNumber("port", loadBalancerServiceHealthCheck.Port);

            var protocolRawValue = LoadBalancerServiceHealthCheck.ProtocolEnumToJsonValue(loadBalancerServiceHealthCheck.Protocol);
            writer.WriteString("protocol", protocolRawValue);
            writer.WriteNumber("retries", loadBalancerServiceHealthCheck.Retries);

            writer.WriteNumber("timeout", loadBalancerServiceHealthCheck.Timeout);

            if (loadBalancerServiceHealthCheck.HttpOption.IsSet)
            {
                writer.WritePropertyName("http");
                JsonSerializer.Serialize(writer, loadBalancerServiceHealthCheck.Http, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The LoadBalancerServiceHealthCheckSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerServiceHealthCheck))]
    internal partial class LoadBalancerServiceHealthCheckSerializationContext : JsonSerializerContext { }
}
