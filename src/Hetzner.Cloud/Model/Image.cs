// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Image
    /// </summary>
    internal partial class Image : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="architecture">architecture</param>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="description">Description of the Image</param>
        /// <param name="diskSize">Size of the disk contained in the Image in GB</param>
        /// <param name="id">ID of the Image.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="osFlavor">Flavor of operating system contained in the Image</param>
        /// <param name="protection">protection</param>
        /// <param name="status">Whether the Image can be used or if it&#39;s still being created or unavailable</param>
        /// <param name="type">Type of the Image</param>
        /// <param name="boundTo">ID of Server the Image is bound to. Only set for Images of type &#x60;backup&#x60;.</param>
        /// <param name="createdFrom">createdFrom</param>
        /// <param name="deleted">Point in time where the Image was deleted (in ISO-8601 format)</param>
        /// <param name="deprecated">Point in time when the Image is considered to be deprecated (in ISO-8601 format)</param>
        /// <param name="imageSize">Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.</param>
        /// <param name="name">Unique identifier of the Image. This value is only set for system Images.</param>
        /// <param name="osVersion">Operating system version</param>
        /// <param name="rapidDeploy">Indicates that rapid deploy of the Image is available</param>
        [JsonConstructor]
        internal Image(Architecture architecture, string created, string description, decimal diskSize, long id, Dictionary<string, string> labels, OsFlavorEnum osFlavor, Protection protection, StatusEnum status, TypeEnum type, long? boundTo = default, CreatedFrom? createdFrom = default, string? deleted = default, string? deprecated = default, decimal? imageSize = default, string? name = default, string? osVersion = default, Option<bool?> rapidDeploy = default)
        {
            Architecture = architecture;
            Created = created;
            Description = description;
            DiskSize = diskSize;
            Id = id;
            Labels = labels;
            OsFlavor = osFlavor;
            Protection = protection;
            Status = status;
            Type = type;
            BoundTo = boundTo;
            CreatedFrom = createdFrom;
            Deleted = deleted;
            Deprecated = deprecated;
            ImageSize = imageSize;
            Name = name;
            OsVersion = osVersion;
            RapidDeployOption = rapidDeploy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Architecture
        /// </summary>
        [JsonPropertyName("architecture")]
        public Architecture Architecture { get; set; }

        /// <summary>
        /// Flavor of operating system contained in the Image
        /// </summary>
        /// <value>Flavor of operating system contained in the Image</value>
        internal enum OsFlavorEnum
        {
            /// <summary>
            /// Enum Alma for value: alma
            /// </summary>
            Alma = 1,

            /// <summary>
            /// Enum Centos for value: centos
            /// </summary>
            Centos = 2,

            /// <summary>
            /// Enum Debian for value: debian
            /// </summary>
            Debian = 3,

            /// <summary>
            /// Enum Fedora for value: fedora
            /// </summary>
            Fedora = 4,

            /// <summary>
            /// Enum Rocky for value: rocky
            /// </summary>
            Rocky = 5,

            /// <summary>
            /// Enum Ubuntu for value: ubuntu
            /// </summary>
            Ubuntu = 6,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            Unknown = 7
        }

        /// <summary>
        /// Returns a <see cref="OsFlavorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OsFlavorEnum OsFlavorEnumFromString(string value)
        {
            if (value.Equals("alma"))
                return OsFlavorEnum.Alma;

            if (value.Equals("centos"))
                return OsFlavorEnum.Centos;

            if (value.Equals("debian"))
                return OsFlavorEnum.Debian;

            if (value.Equals("fedora"))
                return OsFlavorEnum.Fedora;

            if (value.Equals("rocky"))
                return OsFlavorEnum.Rocky;

            if (value.Equals("ubuntu"))
                return OsFlavorEnum.Ubuntu;

            if (value.Equals("unknown"))
                return OsFlavorEnum.Unknown;

            throw new NotImplementedException($"Could not convert value to type OsFlavorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OsFlavorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OsFlavorEnum? OsFlavorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("alma"))
                return OsFlavorEnum.Alma;

            if (value.Equals("centos"))
                return OsFlavorEnum.Centos;

            if (value.Equals("debian"))
                return OsFlavorEnum.Debian;

            if (value.Equals("fedora"))
                return OsFlavorEnum.Fedora;

            if (value.Equals("rocky"))
                return OsFlavorEnum.Rocky;

            if (value.Equals("ubuntu"))
                return OsFlavorEnum.Ubuntu;

            if (value.Equals("unknown"))
                return OsFlavorEnum.Unknown;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OsFlavorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OsFlavorEnumToJsonValue(OsFlavorEnum value)
        {
            if (value == OsFlavorEnum.Alma)
                return "alma";

            if (value == OsFlavorEnum.Centos)
                return "centos";

            if (value == OsFlavorEnum.Debian)
                return "debian";

            if (value == OsFlavorEnum.Fedora)
                return "fedora";

            if (value == OsFlavorEnum.Rocky)
                return "rocky";

            if (value == OsFlavorEnum.Ubuntu)
                return "ubuntu";

            if (value == OsFlavorEnum.Unknown)
                return "unknown";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Flavor of operating system contained in the Image
        /// </summary>
        /// <value>Flavor of operating system contained in the Image</value>
        /* <example>ubuntu</example> */
        [JsonPropertyName("os_flavor")]
        public OsFlavorEnum OsFlavor { get; set; }

        /// <summary>
        /// Whether the Image can be used or if it&#39;s still being created or unavailable
        /// </summary>
        /// <value>Whether the Image can be used or if it&#39;s still being created or unavailable</value>
        internal enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            Available = 1,

            /// <summary>
            /// Enum Creating for value: creating
            /// </summary>
            Creating = 2,

            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            Unavailable = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("available"))
                return StatusEnum.Available;

            if (value.Equals("creating"))
                return StatusEnum.Creating;

            if (value.Equals("unavailable"))
                return StatusEnum.Unavailable;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("available"))
                return StatusEnum.Available;

            if (value.Equals("creating"))
                return StatusEnum.Creating;

            if (value.Equals("unavailable"))
                return StatusEnum.Unavailable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Available)
                return "available";

            if (value == StatusEnum.Creating)
                return "creating";

            if (value == StatusEnum.Unavailable)
                return "unavailable";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Whether the Image can be used or if it&#39;s still being created or unavailable
        /// </summary>
        /// <value>Whether the Image can be used or if it&#39;s still being created or unavailable</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Type of the Image
        /// </summary>
        /// <value>Type of the Image</value>
        internal enum TypeEnum
        {
            /// <summary>
            /// Enum App for value: app
            /// </summary>
            App = 1,

            /// <summary>
            /// Enum Backup for value: backup
            /// </summary>
            Backup = 2,

            /// <summary>
            /// Enum Snapshot for value: snapshot
            /// </summary>
            Snapshot = 3,

            /// <summary>
            /// Enum System for value: system
            /// </summary>
            System = 4,

            /// <summary>
            /// Enum Temporary for value: temporary
            /// </summary>
            Temporary = 5
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("app"))
                return TypeEnum.App;

            if (value.Equals("backup"))
                return TypeEnum.Backup;

            if (value.Equals("snapshot"))
                return TypeEnum.Snapshot;

            if (value.Equals("system"))
                return TypeEnum.System;

            if (value.Equals("temporary"))
                return TypeEnum.Temporary;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("app"))
                return TypeEnum.App;

            if (value.Equals("backup"))
                return TypeEnum.Backup;

            if (value.Equals("snapshot"))
                return TypeEnum.Snapshot;

            if (value.Equals("system"))
                return TypeEnum.System;

            if (value.Equals("temporary"))
                return TypeEnum.Temporary;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.App)
                return "app";

            if (value == TypeEnum.Backup)
                return "backup";

            if (value == TypeEnum.Snapshot)
                return "snapshot";

            if (value == TypeEnum.System)
                return "system";

            if (value == TypeEnum.Temporary)
                return "temporary";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of the Image
        /// </summary>
        /// <value>Type of the Image</value>
        /* <example>snapshot</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// Description of the Image
        /// </summary>
        /// <value>Description of the Image</value>
        /* <example>Ubuntu 20.04 Standard 64 bit</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Size of the disk contained in the Image in GB
        /// </summary>
        /// <value>Size of the disk contained in the Image in GB</value>
        /* <example>10</example> */
        [JsonPropertyName("disk_size")]
        public decimal DiskSize { get; set; }

        /// <summary>
        /// ID of the Image.
        /// </summary>
        /// <value>ID of the Image.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// ID of Server the Image is bound to. Only set for Images of type &#x60;backup&#x60;.
        /// </summary>
        /// <value>ID of Server the Image is bound to. Only set for Images of type &#x60;backup&#x60;.</value>
        [JsonPropertyName("bound_to")]
        public long? BoundTo { get; set; }

        /// <summary>
        /// Gets or Sets CreatedFrom
        /// </summary>
        [JsonPropertyName("created_from")]
        public CreatedFrom? CreatedFrom { get; set; }

        /// <summary>
        /// Point in time where the Image was deleted (in ISO-8601 format)
        /// </summary>
        /// <value>Point in time where the Image was deleted (in ISO-8601 format)</value>
        [JsonPropertyName("deleted")]
        public string? Deleted { get; set; }

        /// <summary>
        /// Point in time when the Image is considered to be deprecated (in ISO-8601 format)
        /// </summary>
        /// <value>Point in time when the Image is considered to be deprecated (in ISO-8601 format)</value>
        /* <example>2018-02-28T00:00:00+00:00</example> */
        [JsonPropertyName("deprecated")]
        public string? Deprecated { get; set; }

        /// <summary>
        /// Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
        /// </summary>
        /// <value>Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.</value>
        /* <example>2.3</example> */
        [JsonPropertyName("image_size")]
        public decimal? ImageSize { get; set; }

        /// <summary>
        /// Unique identifier of the Image. This value is only set for system Images.
        /// </summary>
        /// <value>Unique identifier of the Image. This value is only set for system Images.</value>
        /* <example>ubuntu-20.04</example> */
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Operating system version
        /// </summary>
        /// <value>Operating system version</value>
        /* <example>20.04</example> */
        [JsonPropertyName("os_version")]
        public string? OsVersion { get; set; }

        /// <summary>
        /// Used to track the state of RapidDeploy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RapidDeployOption { get; private set; }

        /// <summary>
        /// Indicates that rapid deploy of the Image is available
        /// </summary>
        /// <value>Indicates that rapid deploy of the Image is available</value>
        /* <example>false</example> */
        [JsonPropertyName("rapid_deploy")]
        public bool? RapidDeploy { get { return this.RapidDeployOption; } set { this.RapidDeployOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiskSize: ").Append(DiskSize).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  OsFlavor: ").Append(OsFlavor).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BoundTo: ").Append(BoundTo).Append("\n");
            sb.Append("  CreatedFrom: ").Append(CreatedFrom).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  RapidDeploy: ").Append(RapidDeploy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Image" />
    /// </summary>
    internal class ImageJsonConverter : JsonConverter<Image>
    {
        /// <summary>
        /// Deserializes json to <see cref="Image" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Image Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Architecture?> architecture = default;
            Option<string?> created = default;
            Option<string?> description = default;
            Option<decimal?> diskSize = default;
            Option<long?> id = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<Image.OsFlavorEnum?> osFlavor = default;
            Option<Protection?> protection = default;
            Option<Image.StatusEnum?> status = default;
            Option<Image.TypeEnum?> type = default;
            Option<long?> boundTo = default;
            Option<CreatedFrom?> createdFrom = default;
            Option<string?> deleted = default;
            Option<string?> deprecated = default;
            Option<decimal?> imageSize = default;
            Option<string?> name = default;
            Option<string?> osVersion = default;
            Option<bool?> rapidDeploy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "architecture":
                            string? architectureRawValue = utf8JsonReader.GetString();
                            if (architectureRawValue != null)
                                architecture = new Option<Architecture?>(ArchitectureValueConverter.FromStringOrDefault(architectureRawValue));
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disk_size":
                            diskSize = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "os_flavor":
                            string? osFlavorRawValue = utf8JsonReader.GetString();
                            if (osFlavorRawValue != null)
                                osFlavor = new Option<Image.OsFlavorEnum?>(Image.OsFlavorEnumFromStringOrDefault(osFlavorRawValue));
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Image.StatusEnum?>(Image.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Image.TypeEnum?>(Image.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "bound_to":
                            boundTo = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "created_from":
                            createdFrom = new Option<CreatedFrom?>(JsonSerializer.Deserialize<CreatedFrom>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deleted":
                            deleted = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "deprecated":
                            deprecated = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "image_size":
                            imageSize = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "os_version":
                            osVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rapid_deploy":
                            rapidDeploy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!architecture.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(architecture));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(created));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(description));

            if (!diskSize.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(diskSize));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(id));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(labels));

            if (!osFlavor.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(osFlavor));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(protection));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(status));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(type));

            if (!boundTo.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(boundTo));

            if (!createdFrom.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(createdFrom));

            if (!deleted.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(deleted));

            if (!deprecated.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(deprecated));

            if (!imageSize.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(imageSize));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(name));

            if (!osVersion.IsSet)
                throw new ArgumentException("Property is required for class Image.", nameof(osVersion));

            if (architecture.IsSet && architecture.Value == null)
                throw new ArgumentNullException(nameof(architecture), "Property is not nullable for class Image.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Image.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Image.");

            if (diskSize.IsSet && diskSize.Value == null)
                throw new ArgumentNullException(nameof(diskSize), "Property is not nullable for class Image.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Image.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Image.");

            if (osFlavor.IsSet && osFlavor.Value == null)
                throw new ArgumentNullException(nameof(osFlavor), "Property is not nullable for class Image.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class Image.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Image.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Image.");

            if (rapidDeploy.IsSet && rapidDeploy.Value == null)
                throw new ArgumentNullException(nameof(rapidDeploy), "Property is not nullable for class Image.");

            return new Image(architecture.Value!.Value!, created.Value!, description.Value!, diskSize.Value!.Value!, id.Value!.Value!, labels.Value!, osFlavor.Value!.Value!, protection.Value!, status.Value!.Value!, type.Value!.Value!, boundTo.Value!, createdFrom.Value!, deleted.Value!, deprecated.Value!, imageSize.Value!, name.Value!, osVersion.Value!, rapidDeploy);
        }

        /// <summary>
        /// Serializes a <see cref="Image" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="image"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Image image, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, image, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Image" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="image"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Image image, JsonSerializerOptions jsonSerializerOptions)
        {
            if (image.Created == null)
                throw new ArgumentNullException(nameof(image.Created), "Property is required for class Image.");

            if (image.Description == null)
                throw new ArgumentNullException(nameof(image.Description), "Property is required for class Image.");

            if (image.Labels == null)
                throw new ArgumentNullException(nameof(image.Labels), "Property is required for class Image.");

            if (image.Protection == null)
                throw new ArgumentNullException(nameof(image.Protection), "Property is required for class Image.");

            var architectureRawValue = ArchitectureValueConverter.ToJsonValue(image.Architecture);
            writer.WriteString("architecture", architectureRawValue);

            writer.WriteString("created", image.Created);

            writer.WriteString("description", image.Description);

            writer.WriteNumber("disk_size", image.DiskSize);

            writer.WriteNumber("id", image.Id);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, image.Labels, jsonSerializerOptions);
            var osFlavorRawValue = Image.OsFlavorEnumToJsonValue(image.OsFlavor);
            writer.WriteString("os_flavor", osFlavorRawValue);
            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, image.Protection, jsonSerializerOptions);
            var statusRawValue = Image.StatusEnumToJsonValue(image.Status);
            writer.WriteString("status", statusRawValue);
            var typeRawValue = Image.TypeEnumToJsonValue(image.Type);
            writer.WriteString("type", typeRawValue);
            if (image.BoundTo != null)
                writer.WriteNumber("bound_to", image.BoundTo.Value);
            else
                writer.WriteNull("bound_to");

            if (image.CreatedFrom != null)
            {
                writer.WritePropertyName("created_from");
                JsonSerializer.Serialize(writer, image.CreatedFrom, jsonSerializerOptions);
            }
            else
                writer.WriteNull("created_from");
            if (image.Deleted != null)
                writer.WriteString("deleted", image.Deleted);
            else
                writer.WriteNull("deleted");

            if (image.Deprecated != null)
                writer.WriteString("deprecated", image.Deprecated);
            else
                writer.WriteNull("deprecated");

            if (image.ImageSize != null)
                writer.WriteNumber("image_size", image.ImageSize.Value);
            else
                writer.WriteNull("image_size");

            if (image.Name != null)
                writer.WriteString("name", image.Name);
            else
                writer.WriteNull("name");

            if (image.OsVersion != null)
                writer.WriteString("os_version", image.OsVersion);
            else
                writer.WriteNull("os_version");

            if (image.RapidDeployOption.IsSet)
                writer.WriteBoolean("rapid_deploy", image.RapidDeployOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ImageSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Image))]
    internal partial class ImageSerializationContext : JsonSerializerContext { }
}
