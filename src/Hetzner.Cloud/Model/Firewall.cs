// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Firewalls can limit the network access to or from your resources.
    /// </summary>
    internal partial class Firewall : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Firewall" /> class.
        /// </summary>
        /// <param name="appliedTo">appliedTo</param>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="id">ID of the Firewall.</param>
        /// <param name="name">Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. </param>
        /// <param name="rules">rules</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        [JsonConstructor]
        internal Firewall(List<FirewallResourceId> appliedTo, string created, long id, string name, List<RuleResponse> rules, Option<Dictionary<string, string>?> labels = default)
        {
            AppliedTo = appliedTo;
            Created = created;
            Id = id;
            Name = name;
            Rules = rules;
            LabelsOption = labels;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AppliedTo
        /// </summary>
        [JsonPropertyName("applied_to")]
        public List<FirewallResourceId> AppliedTo { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// ID of the Firewall.
        /// </summary>
        /// <value>ID of the Firewall.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. 
        /// </summary>
        /// <value>Name of the [Firewall](#firewalls).  Limited to a maximum of 128 characters.  Must be unique per Project. </value>
        /* <example>new-name</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [JsonPropertyName("rules")]
        public List<RuleResponse> Rules { get; set; }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Firewall {\n");
            sb.Append("  AppliedTo: ").Append(AppliedTo).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Firewall" />
    /// </summary>
    internal class FirewallJsonConverter : JsonConverter<Firewall>
    {
        /// <summary>
        /// Deserializes json to <see cref="Firewall" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Firewall Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<FirewallResourceId>?> appliedTo = default;
            Option<string?> created = default;
            Option<long?> id = default;
            Option<string?> name = default;
            Option<List<RuleResponse>?> rules = default;
            Option<Dictionary<string, string>?> labels = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "applied_to":
                            appliedTo = new Option<List<FirewallResourceId>?>(JsonSerializer.Deserialize<List<FirewallResourceId>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rules":
                            rules = new Option<List<RuleResponse>?>(JsonSerializer.Deserialize<List<RuleResponse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!appliedTo.IsSet)
                throw new ArgumentException("Property is required for class Firewall.", nameof(appliedTo));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class Firewall.", nameof(created));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Firewall.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Firewall.", nameof(name));

            if (!rules.IsSet)
                throw new ArgumentException("Property is required for class Firewall.", nameof(rules));

            if (appliedTo.IsSet && appliedTo.Value == null)
                throw new ArgumentNullException(nameof(appliedTo), "Property is not nullable for class Firewall.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Firewall.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Firewall.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Firewall.");

            if (rules.IsSet && rules.Value == null)
                throw new ArgumentNullException(nameof(rules), "Property is not nullable for class Firewall.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Firewall.");

            return new Firewall(appliedTo.Value!, created.Value!, id.Value!.Value!, name.Value!, rules.Value!, labels);
        }

        /// <summary>
        /// Serializes a <see cref="Firewall" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="firewall"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Firewall firewall, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, firewall, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Firewall" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="firewall"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Firewall firewall, JsonSerializerOptions jsonSerializerOptions)
        {
            if (firewall.AppliedTo == null)
                throw new ArgumentNullException(nameof(firewall.AppliedTo), "Property is required for class Firewall.");

            if (firewall.Created == null)
                throw new ArgumentNullException(nameof(firewall.Created), "Property is required for class Firewall.");

            if (firewall.Name == null)
                throw new ArgumentNullException(nameof(firewall.Name), "Property is required for class Firewall.");

            if (firewall.Rules == null)
                throw new ArgumentNullException(nameof(firewall.Rules), "Property is required for class Firewall.");

            if (firewall.LabelsOption.IsSet && firewall.Labels == null)
                throw new ArgumentNullException(nameof(firewall.Labels), "Property is required for class Firewall.");

            writer.WritePropertyName("applied_to");
            JsonSerializer.Serialize(writer, firewall.AppliedTo, jsonSerializerOptions);
            writer.WriteString("created", firewall.Created);

            writer.WriteNumber("id", firewall.Id);

            writer.WriteString("name", firewall.Name);

            writer.WritePropertyName("rules");
            JsonSerializer.Serialize(writer, firewall.Rules, jsonSerializerOptions);
            if (firewall.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, firewall.Labels, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The FirewallSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Firewall))]
    internal partial class FirewallSerializationContext : JsonSerializerContext { }
}
