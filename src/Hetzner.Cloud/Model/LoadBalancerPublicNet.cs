// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Public network information
    /// </summary>
    public partial class LoadBalancerPublicNet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerPublicNet" /> class.
        /// </summary>
        /// <param name="enabled">Public Interface enabled or not</param>
        /// <param name="ipv4">ipv4</param>
        /// <param name="ipv6">ipv6</param>
        [JsonConstructor]
        public LoadBalancerPublicNet(bool enabled, LoadBalancerPublicNetIpv4 ipv4, LoadBalancerPublicNetIpv6 ipv6)
        {
            Enabled = enabled;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Public Interface enabled or not
        /// </summary>
        /// <value>Public Interface enabled or not</value>
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Ipv4
        /// </summary>
        [JsonPropertyName("ipv4")]
        public LoadBalancerPublicNetIpv4 Ipv4 { get; set; }

        /// <summary>
        /// Gets or Sets Ipv6
        /// </summary>
        [JsonPropertyName("ipv6")]
        public LoadBalancerPublicNetIpv6 Ipv6 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerPublicNet {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Ipv4: ").Append(Ipv4).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerPublicNet" />
    /// </summary>
    public class LoadBalancerPublicNetJsonConverter : JsonConverter<LoadBalancerPublicNet>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerPublicNet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerPublicNet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enabled = default;
            Option<LoadBalancerPublicNetIpv4?> ipv4 = default;
            Option<LoadBalancerPublicNetIpv6?> ipv6 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ipv4":
                            ipv4 = new Option<LoadBalancerPublicNetIpv4?>(JsonSerializer.Deserialize<LoadBalancerPublicNetIpv4>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ipv6":
                            ipv6 = new Option<LoadBalancerPublicNetIpv6?>(JsonSerializer.Deserialize<LoadBalancerPublicNetIpv6>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!enabled.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerPublicNet.", nameof(enabled));

            if (!ipv4.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerPublicNet.", nameof(ipv4));

            if (!ipv6.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerPublicNet.", nameof(ipv6));

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class LoadBalancerPublicNet.");

            if (ipv4.IsSet && ipv4.Value == null)
                throw new ArgumentNullException(nameof(ipv4), "Property is not nullable for class LoadBalancerPublicNet.");

            if (ipv6.IsSet && ipv6.Value == null)
                throw new ArgumentNullException(nameof(ipv6), "Property is not nullable for class LoadBalancerPublicNet.");

            return new LoadBalancerPublicNet(enabled.Value!.Value!, ipv4.Value!, ipv6.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerPublicNet loadBalancerPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerPublicNet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerPublicNet loadBalancerPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerPublicNet.Ipv4 == null)
                throw new ArgumentNullException(nameof(loadBalancerPublicNet.Ipv4), "Property is required for class LoadBalancerPublicNet.");

            if (loadBalancerPublicNet.Ipv6 == null)
                throw new ArgumentNullException(nameof(loadBalancerPublicNet.Ipv6), "Property is required for class LoadBalancerPublicNet.");

            writer.WriteBoolean("enabled", loadBalancerPublicNet.Enabled);

            writer.WritePropertyName("ipv4");
            JsonSerializer.Serialize(writer, loadBalancerPublicNet.Ipv4, jsonSerializerOptions);
            writer.WritePropertyName("ipv6");
            JsonSerializer.Serialize(writer, loadBalancerPublicNet.Ipv6, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The LoadBalancerPublicNetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerPublicNet))]
    public partial class LoadBalancerPublicNetSerializationContext : JsonSerializerContext { }
}
