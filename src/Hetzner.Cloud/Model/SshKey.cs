// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// SSH keys are public keys you provide to the cloud system. They can be injected into Servers at creation time. We highly recommend that you use keys instead of passwords to manage your Servers.
    /// </summary>
    internal partial class SshKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SshKey" /> class.
        /// </summary>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="fingerprint">Fingerprint of public key</param>
        /// <param name="id">ID of the SSH Key.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="publicKey">Public key</param>
        [JsonConstructor]
        internal SshKey(string created, string fingerprint, long id, Dictionary<string, string> labels, string name, string publicKey)
        {
            Created = created;
            Fingerprint = fingerprint;
            Id = id;
            Labels = labels;
            Name = name;
            PublicKey = publicKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// Fingerprint of public key
        /// </summary>
        /// <value>Fingerprint of public key</value>
        /* <example>b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f</example> */
        [JsonPropertyName("fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// ID of the SSH Key.
        /// </summary>
        /// <value>ID of the SSH Key.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Public key
        /// </summary>
        /// <value>Public key</value>
        /* <example>ssh-rsa AAAjjk76kgf...Xt</example> */
        [JsonPropertyName("public_key")]
        public string PublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SshKey {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SshKey" />
    /// </summary>
    internal class SshKeyJsonConverter : JsonConverter<SshKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="SshKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SshKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> created = default;
            Option<string?> fingerprint = default;
            Option<long?> id = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<string?> publicKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fingerprint":
                            fingerprint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "public_key":
                            publicKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(created));

            if (!fingerprint.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(fingerprint));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(id));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(name));

            if (!publicKey.IsSet)
                throw new ArgumentException("Property is required for class SshKey.", nameof(publicKey));

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class SshKey.");

            if (fingerprint.IsSet && fingerprint.Value == null)
                throw new ArgumentNullException(nameof(fingerprint), "Property is not nullable for class SshKey.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SshKey.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class SshKey.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SshKey.");

            if (publicKey.IsSet && publicKey.Value == null)
                throw new ArgumentNullException(nameof(publicKey), "Property is not nullable for class SshKey.");

            return new SshKey(created.Value!, fingerprint.Value!, id.Value!.Value!, labels.Value!, name.Value!, publicKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SshKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sshKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SshKey sshKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sshKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SshKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sshKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SshKey sshKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sshKey.Created == null)
                throw new ArgumentNullException(nameof(sshKey.Created), "Property is required for class SshKey.");

            if (sshKey.Fingerprint == null)
                throw new ArgumentNullException(nameof(sshKey.Fingerprint), "Property is required for class SshKey.");

            if (sshKey.Labels == null)
                throw new ArgumentNullException(nameof(sshKey.Labels), "Property is required for class SshKey.");

            if (sshKey.Name == null)
                throw new ArgumentNullException(nameof(sshKey.Name), "Property is required for class SshKey.");

            if (sshKey.PublicKey == null)
                throw new ArgumentNullException(nameof(sshKey.PublicKey), "Property is required for class SshKey.");

            writer.WriteString("created", sshKey.Created);

            writer.WriteString("fingerprint", sshKey.Fingerprint);

            writer.WriteNumber("id", sshKey.Id);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, sshKey.Labels, jsonSerializerOptions);
            writer.WriteString("name", sshKey.Name);

            writer.WriteString("public_key", sshKey.PublicKey);
        }
    }

    /// <summary>
    /// The SshKeySerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(SshKey))]
    internal partial class SshKeySerializationContext : JsonSerializerContext { }
}
