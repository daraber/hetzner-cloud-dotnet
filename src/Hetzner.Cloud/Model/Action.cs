// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Actions show the results and progress of asynchronous requests to the API.
    /// </summary>
    internal partial class Action : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Action" /> class.
        /// </summary>
        /// <param name="command">Command executed in the Action.</param>
        /// <param name="id">ID of the Action</param>
        /// <param name="progress">Progress of the Action in percent.</param>
        /// <param name="resources">Resources the Action relates to.</param>
        /// <param name="started">Point in time when the Action was started (in ISO-8601 format).</param>
        /// <param name="status">Status of the Action.</param>
        /// <param name="error">error</param>
        /// <param name="finished">Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.</param>
        [JsonConstructor]
        internal Action(string command, long id, int progress, List<Resource> resources, string started, StatusEnum status, Error? error = default, string? finished = default)
        {
            Command = command;
            Id = id;
            Progress = progress;
            Resources = resources;
            Started = started;
            Status = status;
            Error = error;
            Finished = finished;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the Action.
        /// </summary>
        /// <value>Status of the Action.</value>
        internal enum StatusEnum
        {
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = 1,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            Running = 2,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            Success = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("error"))
                return StatusEnum.Error;

            if (value.Equals("running"))
                return StatusEnum.Running;

            if (value.Equals("success"))
                return StatusEnum.Success;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("error"))
                return StatusEnum.Error;

            if (value.Equals("running"))
                return StatusEnum.Running;

            if (value.Equals("success"))
                return StatusEnum.Success;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Error)
                return "error";

            if (value == StatusEnum.Running)
                return "running";

            if (value == StatusEnum.Success)
                return "success";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the Action.
        /// </summary>
        /// <value>Status of the Action.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Command executed in the Action.
        /// </summary>
        /// <value>Command executed in the Action.</value>
        /* <example>start_resource</example> */
        [JsonPropertyName("command")]
        public string Command { get; set; }

        /// <summary>
        /// ID of the Action
        /// </summary>
        /// <value>ID of the Action</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Progress of the Action in percent.
        /// </summary>
        /// <value>Progress of the Action in percent.</value>
        /* <example>100</example> */
        [JsonPropertyName("progress")]
        public int Progress { get; set; }

        /// <summary>
        /// Resources the Action relates to.
        /// </summary>
        /// <value>Resources the Action relates to.</value>
        [JsonPropertyName("resources")]
        public List<Resource> Resources { get; set; }

        /// <summary>
        /// Point in time when the Action was started (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Action was started (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("started")]
        public string Started { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public Error? Error { get; set; }

        /// <summary>
        /// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
        /// </summary>
        /// <value>Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("finished")]
        public string? Finished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Action {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Action" />
    /// </summary>
    internal class ActionJsonConverter : JsonConverter<Action>
    {
        /// <summary>
        /// Deserializes json to <see cref="Action" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Action Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> command = default;
            Option<long?> id = default;
            Option<int?> progress = default;
            Option<List<Resource>?> resources = default;
            Option<string?> started = default;
            Option<Action.StatusEnum?> status = default;
            Option<Error?> error = default;
            Option<string?> finished = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "command":
                            command = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "progress":
                            progress = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "resources":
                            resources = new Option<List<Resource>?>(JsonSerializer.Deserialize<List<Resource>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "started":
                            started = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Action.StatusEnum?>(Action.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "error":
                            error = new Option<Error?>(JsonSerializer.Deserialize<Error>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "finished":
                            finished = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!command.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(command));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(id));

            if (!progress.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(progress));

            if (!resources.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(resources));

            if (!started.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(started));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(status));

            if (!error.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(error));

            if (!finished.IsSet)
                throw new ArgumentException("Property is required for class Action.", nameof(finished));

            if (command.IsSet && command.Value == null)
                throw new ArgumentNullException(nameof(command), "Property is not nullable for class Action.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Action.");

            if (progress.IsSet && progress.Value == null)
                throw new ArgumentNullException(nameof(progress), "Property is not nullable for class Action.");

            if (resources.IsSet && resources.Value == null)
                throw new ArgumentNullException(nameof(resources), "Property is not nullable for class Action.");

            if (started.IsSet && started.Value == null)
                throw new ArgumentNullException(nameof(started), "Property is not nullable for class Action.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Action.");

            return new Action(command.Value!, id.Value!.Value!, progress.Value!.Value!, resources.Value!, started.Value!, status.Value!.Value!, error.Value!, finished.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Action" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="action"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Action action, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, action, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Action" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="action"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Action action, JsonSerializerOptions jsonSerializerOptions)
        {
            if (action.Command == null)
                throw new ArgumentNullException(nameof(action.Command), "Property is required for class Action.");

            if (action.Resources == null)
                throw new ArgumentNullException(nameof(action.Resources), "Property is required for class Action.");

            if (action.Started == null)
                throw new ArgumentNullException(nameof(action.Started), "Property is required for class Action.");

            writer.WriteString("command", action.Command);

            writer.WriteNumber("id", action.Id);

            writer.WriteNumber("progress", action.Progress);

            writer.WritePropertyName("resources");
            JsonSerializer.Serialize(writer, action.Resources, jsonSerializerOptions);
            writer.WriteString("started", action.Started);

            var statusRawValue = Action.StatusEnumToJsonValue(action.Status);
            writer.WriteString("status", statusRawValue);
            if (action.Error != null)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, action.Error, jsonSerializerOptions);
            }
            else
                writer.WriteNull("error");
            if (action.Finished != null)
                writer.WriteString("finished", action.Finished);
            else
                writer.WriteNull("finished");
        }
    }

    /// <summary>
    /// The ActionSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Action))]
    internal partial class ActionSerializationContext : JsonSerializerContext { }
}
