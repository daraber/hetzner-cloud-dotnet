// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Resource a Firewall should be applied to.
    /// </summary>
    public partial class FirewallResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirewallResource" /> class.
        /// </summary>
        /// <param name="type">Type of the resource.</param>
        /// <param name="labelSelector">labelSelector</param>
        /// <param name="server">server</param>
        [JsonConstructor]
        public FirewallResource(TypeEnum type, Option<LabelSelector?> labelSelector = default, Option<ResourceId?> server = default)
        {
            Type = type;
            LabelSelectorOption = labelSelector;
            ServerOption = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the resource.
        /// </summary>
        /// <value>Type of the resource.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum LabelSelector for value: label_selector
            /// </summary>
            LabelSelector = 1,

            /// <summary>
            /// Enum Server for value: server
            /// </summary>
            Server = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("label_selector"))
                return TypeEnum.LabelSelector;

            if (value.Equals("server"))
                return TypeEnum.Server;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("label_selector"))
                return TypeEnum.LabelSelector;

            if (value.Equals("server"))
                return TypeEnum.Server;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.LabelSelector)
                return "label_selector";

            if (value == TypeEnum.Server)
                return "server";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        /// <value>Type of the resource.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of LabelSelector
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LabelSelector?> LabelSelectorOption { get; private set; }

        /// <summary>
        /// Gets or Sets LabelSelector
        /// </summary>
        [JsonPropertyName("label_selector")]
        public LabelSelector? LabelSelector { get { return this.LabelSelectorOption; } set { this.LabelSelectorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResourceId?> ServerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [JsonPropertyName("server")]
        public ResourceId? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirewallResource {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LabelSelector: ").Append(LabelSelector).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FirewallResource" />
    /// </summary>
    public class FirewallResourceJsonConverter : JsonConverter<FirewallResource>
    {
        /// <summary>
        /// Deserializes json to <see cref="FirewallResource" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FirewallResource Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FirewallResource.TypeEnum?> type = default;
            Option<LabelSelector?> labelSelector = default;
            Option<ResourceId?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<FirewallResource.TypeEnum?>(FirewallResource.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "label_selector":
                            labelSelector = new Option<LabelSelector?>(JsonSerializer.Deserialize<LabelSelector>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server":
                            server = new Option<ResourceId?>(JsonSerializer.Deserialize<ResourceId>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FirewallResource.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FirewallResource.");

            if (labelSelector.IsSet && labelSelector.Value == null)
                throw new ArgumentNullException(nameof(labelSelector), "Property is not nullable for class FirewallResource.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class FirewallResource.");

            return new FirewallResource(type.Value!.Value!, labelSelector, server);
        }

        /// <summary>
        /// Serializes a <see cref="FirewallResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="firewallResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FirewallResource firewallResource, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, firewallResource, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FirewallResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="firewallResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FirewallResource firewallResource, JsonSerializerOptions jsonSerializerOptions)
        {
            if (firewallResource.LabelSelectorOption.IsSet && firewallResource.LabelSelector == null)
                throw new ArgumentNullException(nameof(firewallResource.LabelSelector), "Property is required for class FirewallResource.");

            if (firewallResource.ServerOption.IsSet && firewallResource.Server == null)
                throw new ArgumentNullException(nameof(firewallResource.Server), "Property is required for class FirewallResource.");

            var typeRawValue = FirewallResource.TypeEnumToJsonValue(firewallResource.Type);
            writer.WriteString("type", typeRawValue);
            if (firewallResource.LabelSelectorOption.IsSet)
            {
                writer.WritePropertyName("label_selector");
                JsonSerializer.Serialize(writer, firewallResource.LabelSelector, jsonSerializerOptions);
            }
            if (firewallResource.ServerOption.IsSet)
            {
                writer.WritePropertyName("server");
                JsonSerializer.Serialize(writer, firewallResource.Server, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The FirewallResourceSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FirewallResource))]
    public partial class FirewallResourceSerializationContext : JsonSerializerContext { }
}
