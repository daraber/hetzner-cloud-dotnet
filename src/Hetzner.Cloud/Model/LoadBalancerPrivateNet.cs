// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// LoadBalancerPrivateNet
    /// </summary>
    public partial class LoadBalancerPrivateNet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerPrivateNet" /> class.
        /// </summary>
        /// <param name="ip">IP address (v4) of this Load Balancer in this Network</param>
        /// <param name="network">ID of the Network</param>
        [JsonConstructor]
        public LoadBalancerPrivateNet(Option<string?> ip = default, Option<long?> network = default)
        {
            IpOption = ip;
            NetworkOption = network;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// IP address (v4) of this Load Balancer in this Network
        /// </summary>
        /// <value>IP address (v4) of this Load Balancer in this Network</value>
        /* <example>10.0.0.2</example> */
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NetworkOption { get; private set; }

        /// <summary>
        /// ID of the Network
        /// </summary>
        /// <value>ID of the Network</value>
        /* <example>4711</example> */
        [JsonPropertyName("network")]
        public long? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerPrivateNet {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerPrivateNet" />
    /// </summary>
    public class LoadBalancerPrivateNetJsonConverter : JsonConverter<LoadBalancerPrivateNet>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerPrivateNet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerPrivateNet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ip = default;
            Option<long?> network = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network":
                            network = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class LoadBalancerPrivateNet.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class LoadBalancerPrivateNet.");

            return new LoadBalancerPrivateNet(ip, network);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerPrivateNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerPrivateNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerPrivateNet loadBalancerPrivateNet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerPrivateNet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerPrivateNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerPrivateNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerPrivateNet loadBalancerPrivateNet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerPrivateNet.IpOption.IsSet && loadBalancerPrivateNet.Ip == null)
                throw new ArgumentNullException(nameof(loadBalancerPrivateNet.Ip), "Property is required for class LoadBalancerPrivateNet.");

            if (loadBalancerPrivateNet.IpOption.IsSet)
                writer.WriteString("ip", loadBalancerPrivateNet.Ip);

            if (loadBalancerPrivateNet.NetworkOption.IsSet)
                writer.WriteNumber("network", loadBalancerPrivateNet.NetworkOption.Value!.Value);
        }
    }

    /// <summary>
    /// The LoadBalancerPrivateNetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerPrivateNet))]
    public partial class LoadBalancerPrivateNetSerializationContext : JsonSerializerContext { }
}
