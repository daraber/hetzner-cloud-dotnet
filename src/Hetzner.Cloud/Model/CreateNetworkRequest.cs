// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/networks
    /// </summary>
    public partial class CreateNetworkRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkRequest" /> class.
        /// </summary>
        /// <param name="ipRange">IP range of the [Network](#networks).  Uses CIDR notation.  Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.  Minimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask. </param>
        /// <param name="name">Name of the [Network](#networks).</param>
        /// <param name="exposeRoutesToVswitch">Toggle to expose routes to the [Networks](#networks) vSwitch.  Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks). </param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="routes">Array of routes set in this [Network](#networks).</param>
        /// <param name="subnets">Array of subnets to allocate.</param>
        [JsonConstructor]
        public CreateNetworkRequest(string ipRange, string name, Option<bool?> exposeRoutesToVswitch = default, Option<Dictionary<string, string>?> labels = default, Option<List<Route>?> routes = default, Option<List<Subnet>?> subnets = default)
        {
            IpRange = ipRange;
            Name = name;
            ExposeRoutesToVswitchOption = exposeRoutesToVswitch;
            LabelsOption = labels;
            RoutesOption = routes;
            SubnetsOption = subnets;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// IP range of the [Network](#networks).  Uses CIDR notation.  Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.  Minimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask. 
        /// </summary>
        /// <value>IP range of the [Network](#networks).  Uses CIDR notation.  Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.  Minimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask. </value>
        /* <example>10.0.0.0/16</example> */
        [JsonPropertyName("ip_range")]
        public string IpRange { get; set; }

        /// <summary>
        /// Name of the [Network](#networks).
        /// </summary>
        /// <value>Name of the [Network](#networks).</value>
        /* <example>mynet</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of ExposeRoutesToVswitch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExposeRoutesToVswitchOption { get; private set; }

        /// <summary>
        /// Toggle to expose routes to the [Networks](#networks) vSwitch.  Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks). 
        /// </summary>
        /// <value>Toggle to expose routes to the [Networks](#networks) vSwitch.  Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks). </value>
        /* <example>false</example> */
        [JsonPropertyName("expose_routes_to_vswitch")]
        public bool? ExposeRoutesToVswitch { get { return this.ExposeRoutesToVswitchOption; } set { this.ExposeRoutesToVswitchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Routes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Route>?> RoutesOption { get; private set; }

        /// <summary>
        /// Array of routes set in this [Network](#networks).
        /// </summary>
        /// <value>Array of routes set in this [Network](#networks).</value>
        [JsonPropertyName("routes")]
        public List<Route>? Routes { get { return this.RoutesOption; } set { this.RoutesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subnets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Subnet>?> SubnetsOption { get; private set; }

        /// <summary>
        /// Array of subnets to allocate.
        /// </summary>
        /// <value>Array of subnets to allocate.</value>
        [JsonPropertyName("subnets")]
        public List<Subnet>? Subnets { get { return this.SubnetsOption; } set { this.SubnetsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateNetworkRequest {\n");
            sb.Append("  IpRange: ").Append(IpRange).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExposeRoutesToVswitch: ").Append(ExposeRoutesToVswitch).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Subnets: ").Append(Subnets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateNetworkRequest" />
    /// </summary>
    public class CreateNetworkRequestJsonConverter : JsonConverter<CreateNetworkRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateNetworkRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateNetworkRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ipRange = default;
            Option<string?> name = default;
            Option<bool?> exposeRoutesToVswitch = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<List<Route>?> routes = default;
            Option<List<Subnet>?> subnets = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ip_range":
                            ipRange = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expose_routes_to_vswitch":
                            exposeRoutesToVswitch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "routes":
                            routes = new Option<List<Route>?>(JsonSerializer.Deserialize<List<Route>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "subnets":
                            subnets = new Option<List<Subnet>?>(JsonSerializer.Deserialize<List<Subnet>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ipRange.IsSet)
                throw new ArgumentException("Property is required for class CreateNetworkRequest.", nameof(ipRange));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateNetworkRequest.", nameof(name));

            if (ipRange.IsSet && ipRange.Value == null)
                throw new ArgumentNullException(nameof(ipRange), "Property is not nullable for class CreateNetworkRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateNetworkRequest.");

            if (exposeRoutesToVswitch.IsSet && exposeRoutesToVswitch.Value == null)
                throw new ArgumentNullException(nameof(exposeRoutesToVswitch), "Property is not nullable for class CreateNetworkRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateNetworkRequest.");

            if (routes.IsSet && routes.Value == null)
                throw new ArgumentNullException(nameof(routes), "Property is not nullable for class CreateNetworkRequest.");

            if (subnets.IsSet && subnets.Value == null)
                throw new ArgumentNullException(nameof(subnets), "Property is not nullable for class CreateNetworkRequest.");

            return new CreateNetworkRequest(ipRange.Value!, name.Value!, exposeRoutesToVswitch, labels, routes, subnets);
        }

        /// <summary>
        /// Serializes a <see cref="CreateNetworkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateNetworkRequest createNetworkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createNetworkRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateNetworkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateNetworkRequest createNetworkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createNetworkRequest.IpRange == null)
                throw new ArgumentNullException(nameof(createNetworkRequest.IpRange), "Property is required for class CreateNetworkRequest.");

            if (createNetworkRequest.Name == null)
                throw new ArgumentNullException(nameof(createNetworkRequest.Name), "Property is required for class CreateNetworkRequest.");

            if (createNetworkRequest.LabelsOption.IsSet && createNetworkRequest.Labels == null)
                throw new ArgumentNullException(nameof(createNetworkRequest.Labels), "Property is required for class CreateNetworkRequest.");

            if (createNetworkRequest.RoutesOption.IsSet && createNetworkRequest.Routes == null)
                throw new ArgumentNullException(nameof(createNetworkRequest.Routes), "Property is required for class CreateNetworkRequest.");

            if (createNetworkRequest.SubnetsOption.IsSet && createNetworkRequest.Subnets == null)
                throw new ArgumentNullException(nameof(createNetworkRequest.Subnets), "Property is required for class CreateNetworkRequest.");

            writer.WriteString("ip_range", createNetworkRequest.IpRange);

            writer.WriteString("name", createNetworkRequest.Name);

            if (createNetworkRequest.ExposeRoutesToVswitchOption.IsSet)
                writer.WriteBoolean("expose_routes_to_vswitch", createNetworkRequest.ExposeRoutesToVswitchOption.Value!.Value);

            if (createNetworkRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createNetworkRequest.Labels, jsonSerializerOptions);
            }
            if (createNetworkRequest.RoutesOption.IsSet)
            {
                writer.WritePropertyName("routes");
                JsonSerializer.Serialize(writer, createNetworkRequest.Routes, jsonSerializerOptions);
            }
            if (createNetworkRequest.SubnetsOption.IsSet)
            {
                writer.WritePropertyName("subnets");
                JsonSerializer.Serialize(writer, createNetworkRequest.Subnets, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreateNetworkRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateNetworkRequest))]
    public partial class CreateNetworkRequestSerializationContext : JsonSerializerContext { }
}
