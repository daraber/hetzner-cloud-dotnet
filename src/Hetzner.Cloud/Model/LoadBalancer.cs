// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// LoadBalancer
    /// </summary>
    internal partial class LoadBalancer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancer" /> class.
        /// </summary>
        /// <param name="algorithm">algorithm</param>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="id">ID of the Load Balancer.</param>
        /// <param name="includedTraffic">Free Traffic for the current billing period in bytes</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="loadBalancerType">loadBalancerType</param>
        /// <param name="location">location</param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="privateNet">Private networks information</param>
        /// <param name="protection">protection</param>
        /// <param name="publicNet">publicNet</param>
        /// <param name="services">List of services that belong to this Load Balancer</param>
        /// <param name="targets">List of targets that belong to this Load Balancer</param>
        /// <param name="ingoingTraffic">Inbound Traffic for the current billing period in bytes</param>
        /// <param name="outgoingTraffic">Outbound Traffic for the current billing period in bytes</param>
        [JsonConstructor]
        internal LoadBalancer(LoadBalancerAlgorithm algorithm, string created, long id, long includedTraffic, Dictionary<string, string> labels, LoadBalancerType loadBalancerType, Location location, string name, List<LoadBalancerPrivateNet> privateNet, Protection protection, LoadBalancerPublicNet publicNet, List<LoadBalancerService> services, List<LoadBalancerTarget> targets, long? ingoingTraffic = default, long? outgoingTraffic = default)
        {
            Algorithm = algorithm;
            Created = created;
            Id = id;
            IncludedTraffic = includedTraffic;
            Labels = labels;
            LoadBalancerType = loadBalancerType;
            Location = location;
            Name = name;
            PrivateNet = privateNet;
            Protection = protection;
            PublicNet = publicNet;
            Services = services;
            Targets = targets;
            IngoingTraffic = ingoingTraffic;
            OutgoingTraffic = outgoingTraffic;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Algorithm
        /// </summary>
        [JsonPropertyName("algorithm")]
        public LoadBalancerAlgorithm Algorithm { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// ID of the Load Balancer.
        /// </summary>
        /// <value>ID of the Load Balancer.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Free Traffic for the current billing period in bytes
        /// </summary>
        /// <value>Free Traffic for the current billing period in bytes</value>
        /* <example>10000</example> */
        [JsonPropertyName("included_traffic")]
        public long IncludedTraffic { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets LoadBalancerType
        /// </summary>
        [JsonPropertyName("load_balancer_type")]
        public LoadBalancerType LoadBalancerType { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public Location Location { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Private networks information
        /// </summary>
        /// <value>Private networks information</value>
        [JsonPropertyName("private_net")]
        public List<LoadBalancerPrivateNet> PrivateNet { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// Gets or Sets PublicNet
        /// </summary>
        [JsonPropertyName("public_net")]
        public LoadBalancerPublicNet PublicNet { get; set; }

        /// <summary>
        /// List of services that belong to this Load Balancer
        /// </summary>
        /// <value>List of services that belong to this Load Balancer</value>
        [JsonPropertyName("services")]
        public List<LoadBalancerService> Services { get; set; }

        /// <summary>
        /// List of targets that belong to this Load Balancer
        /// </summary>
        /// <value>List of targets that belong to this Load Balancer</value>
        [JsonPropertyName("targets")]
        public List<LoadBalancerTarget> Targets { get; set; }

        /// <summary>
        /// Inbound Traffic for the current billing period in bytes
        /// </summary>
        /// <value>Inbound Traffic for the current billing period in bytes</value>
        [JsonPropertyName("ingoing_traffic")]
        public long? IngoingTraffic { get; set; }

        /// <summary>
        /// Outbound Traffic for the current billing period in bytes
        /// </summary>
        /// <value>Outbound Traffic for the current billing period in bytes</value>
        [JsonPropertyName("outgoing_traffic")]
        public long? OutgoingTraffic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancer {\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncludedTraffic: ").Append(IncludedTraffic).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LoadBalancerType: ").Append(LoadBalancerType).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivateNet: ").Append(PrivateNet).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  PublicNet: ").Append(PublicNet).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  IngoingTraffic: ").Append(IngoingTraffic).Append("\n");
            sb.Append("  OutgoingTraffic: ").Append(OutgoingTraffic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancer" />
    /// </summary>
    internal class LoadBalancerJsonConverter : JsonConverter<LoadBalancer>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<LoadBalancerAlgorithm?> algorithm = default;
            Option<string?> created = default;
            Option<long?> id = default;
            Option<long?> includedTraffic = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<LoadBalancerType?> loadBalancerType = default;
            Option<Location?> location = default;
            Option<string?> name = default;
            Option<List<LoadBalancerPrivateNet>?> privateNet = default;
            Option<Protection?> protection = default;
            Option<LoadBalancerPublicNet?> publicNet = default;
            Option<List<LoadBalancerService>?> services = default;
            Option<List<LoadBalancerTarget>?> targets = default;
            Option<long?> ingoingTraffic = default;
            Option<long?> outgoingTraffic = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "algorithm":
                            algorithm = new Option<LoadBalancerAlgorithm?>(JsonSerializer.Deserialize<LoadBalancerAlgorithm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "included_traffic":
                            includedTraffic = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "load_balancer_type":
                            loadBalancerType = new Option<LoadBalancerType?>(JsonSerializer.Deserialize<LoadBalancerType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<Location?>(JsonSerializer.Deserialize<Location>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "private_net":
                            privateNet = new Option<List<LoadBalancerPrivateNet>?>(JsonSerializer.Deserialize<List<LoadBalancerPrivateNet>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "public_net":
                            publicNet = new Option<LoadBalancerPublicNet?>(JsonSerializer.Deserialize<LoadBalancerPublicNet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "services":
                            services = new Option<List<LoadBalancerService>?>(JsonSerializer.Deserialize<List<LoadBalancerService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "targets":
                            targets = new Option<List<LoadBalancerTarget>?>(JsonSerializer.Deserialize<List<LoadBalancerTarget>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ingoing_traffic":
                            ingoingTraffic = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "outgoing_traffic":
                            outgoingTraffic = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!algorithm.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(algorithm));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(created));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(id));

            if (!includedTraffic.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(includedTraffic));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(labels));

            if (!loadBalancerType.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(loadBalancerType));

            if (!location.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(location));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(name));

            if (!privateNet.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(privateNet));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(protection));

            if (!publicNet.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(publicNet));

            if (!services.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(services));

            if (!targets.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(targets));

            if (!ingoingTraffic.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(ingoingTraffic));

            if (!outgoingTraffic.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancer.", nameof(outgoingTraffic));

            if (algorithm.IsSet && algorithm.Value == null)
                throw new ArgumentNullException(nameof(algorithm), "Property is not nullable for class LoadBalancer.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class LoadBalancer.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LoadBalancer.");

            if (includedTraffic.IsSet && includedTraffic.Value == null)
                throw new ArgumentNullException(nameof(includedTraffic), "Property is not nullable for class LoadBalancer.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class LoadBalancer.");

            if (loadBalancerType.IsSet && loadBalancerType.Value == null)
                throw new ArgumentNullException(nameof(loadBalancerType), "Property is not nullable for class LoadBalancer.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class LoadBalancer.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class LoadBalancer.");

            if (privateNet.IsSet && privateNet.Value == null)
                throw new ArgumentNullException(nameof(privateNet), "Property is not nullable for class LoadBalancer.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class LoadBalancer.");

            if (publicNet.IsSet && publicNet.Value == null)
                throw new ArgumentNullException(nameof(publicNet), "Property is not nullable for class LoadBalancer.");

            if (services.IsSet && services.Value == null)
                throw new ArgumentNullException(nameof(services), "Property is not nullable for class LoadBalancer.");

            if (targets.IsSet && targets.Value == null)
                throw new ArgumentNullException(nameof(targets), "Property is not nullable for class LoadBalancer.");

            return new LoadBalancer(algorithm.Value!, created.Value!, id.Value!.Value!, includedTraffic.Value!.Value!, labels.Value!, loadBalancerType.Value!, location.Value!, name.Value!, privateNet.Value!, protection.Value!, publicNet.Value!, services.Value!, targets.Value!, ingoingTraffic.Value!, outgoingTraffic.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancer loadBalancer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancer loadBalancer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancer.Algorithm == null)
                throw new ArgumentNullException(nameof(loadBalancer.Algorithm), "Property is required for class LoadBalancer.");

            if (loadBalancer.Created == null)
                throw new ArgumentNullException(nameof(loadBalancer.Created), "Property is required for class LoadBalancer.");

            if (loadBalancer.Labels == null)
                throw new ArgumentNullException(nameof(loadBalancer.Labels), "Property is required for class LoadBalancer.");

            if (loadBalancer.LoadBalancerType == null)
                throw new ArgumentNullException(nameof(loadBalancer.LoadBalancerType), "Property is required for class LoadBalancer.");

            if (loadBalancer.Location == null)
                throw new ArgumentNullException(nameof(loadBalancer.Location), "Property is required for class LoadBalancer.");

            if (loadBalancer.Name == null)
                throw new ArgumentNullException(nameof(loadBalancer.Name), "Property is required for class LoadBalancer.");

            if (loadBalancer.PrivateNet == null)
                throw new ArgumentNullException(nameof(loadBalancer.PrivateNet), "Property is required for class LoadBalancer.");

            if (loadBalancer.Protection == null)
                throw new ArgumentNullException(nameof(loadBalancer.Protection), "Property is required for class LoadBalancer.");

            if (loadBalancer.PublicNet == null)
                throw new ArgumentNullException(nameof(loadBalancer.PublicNet), "Property is required for class LoadBalancer.");

            if (loadBalancer.Services == null)
                throw new ArgumentNullException(nameof(loadBalancer.Services), "Property is required for class LoadBalancer.");

            if (loadBalancer.Targets == null)
                throw new ArgumentNullException(nameof(loadBalancer.Targets), "Property is required for class LoadBalancer.");

            writer.WritePropertyName("algorithm");
            JsonSerializer.Serialize(writer, loadBalancer.Algorithm, jsonSerializerOptions);
            writer.WriteString("created", loadBalancer.Created);

            writer.WriteNumber("id", loadBalancer.Id);

            writer.WriteNumber("included_traffic", loadBalancer.IncludedTraffic);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, loadBalancer.Labels, jsonSerializerOptions);
            writer.WritePropertyName("load_balancer_type");
            JsonSerializer.Serialize(writer, loadBalancer.LoadBalancerType, jsonSerializerOptions);
            writer.WritePropertyName("location");
            JsonSerializer.Serialize(writer, loadBalancer.Location, jsonSerializerOptions);
            writer.WriteString("name", loadBalancer.Name);

            writer.WritePropertyName("private_net");
            JsonSerializer.Serialize(writer, loadBalancer.PrivateNet, jsonSerializerOptions);
            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, loadBalancer.Protection, jsonSerializerOptions);
            writer.WritePropertyName("public_net");
            JsonSerializer.Serialize(writer, loadBalancer.PublicNet, jsonSerializerOptions);
            writer.WritePropertyName("services");
            JsonSerializer.Serialize(writer, loadBalancer.Services, jsonSerializerOptions);
            writer.WritePropertyName("targets");
            JsonSerializer.Serialize(writer, loadBalancer.Targets, jsonSerializerOptions);
            if (loadBalancer.IngoingTraffic != null)
                writer.WriteNumber("ingoing_traffic", loadBalancer.IngoingTraffic.Value);
            else
                writer.WriteNull("ingoing_traffic");

            if (loadBalancer.OutgoingTraffic != null)
                writer.WriteNumber("outgoing_traffic", loadBalancer.OutgoingTraffic.Value);
            else
                writer.WriteNull("outgoing_traffic");
        }
    }

    /// <summary>
    /// The LoadBalancerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancer))]
    internal partial class LoadBalancerSerializationContext : JsonSerializerContext { }
}
