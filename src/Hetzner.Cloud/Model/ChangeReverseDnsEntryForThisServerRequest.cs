// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr
    /// </summary>
    internal partial class ChangeReverseDnsEntryForThisServerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeReverseDnsEntryForThisServerRequest" /> class.
        /// </summary>
        /// <param name="ip">Primary IP address for which the reverse DNS entry should be set</param>
        /// <param name="dnsPtr">Hostname to set as a reverse DNS PTR entry, reset to original value if &#x60;null&#x60;</param>
        [JsonConstructor]
        internal ChangeReverseDnsEntryForThisServerRequest(string ip, string? dnsPtr = default)
        {
            Ip = ip;
            DnsPtr = dnsPtr;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Primary IP address for which the reverse DNS entry should be set
        /// </summary>
        /// <value>Primary IP address for which the reverse DNS entry should be set</value>
        /* <example>1.2.3.4</example> */
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Hostname to set as a reverse DNS PTR entry, reset to original value if &#x60;null&#x60;
        /// </summary>
        /// <value>Hostname to set as a reverse DNS PTR entry, reset to original value if &#x60;null&#x60;</value>
        /* <example>server01.example.com</example> */
        [JsonPropertyName("dns_ptr")]
        public string? DnsPtr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeReverseDnsEntryForThisServerRequest {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  DnsPtr: ").Append(DnsPtr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChangeReverseDnsEntryForThisServerRequest" />
    /// </summary>
    internal class ChangeReverseDnsEntryForThisServerRequestJsonConverter : JsonConverter<ChangeReverseDnsEntryForThisServerRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChangeReverseDnsEntryForThisServerRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChangeReverseDnsEntryForThisServerRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ip = default;
            Option<string?> dnsPtr = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dns_ptr":
                            dnsPtr = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ip.IsSet)
                throw new ArgumentException("Property is required for class ChangeReverseDnsEntryForThisServerRequest.", nameof(ip));

            if (!dnsPtr.IsSet)
                throw new ArgumentException("Property is required for class ChangeReverseDnsEntryForThisServerRequest.", nameof(dnsPtr));

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class ChangeReverseDnsEntryForThisServerRequest.");

            return new ChangeReverseDnsEntryForThisServerRequest(ip.Value!, dnsPtr.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChangeReverseDnsEntryForThisServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeReverseDnsEntryForThisServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChangeReverseDnsEntryForThisServerRequest changeReverseDnsEntryForThisServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, changeReverseDnsEntryForThisServerRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChangeReverseDnsEntryForThisServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeReverseDnsEntryForThisServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChangeReverseDnsEntryForThisServerRequest changeReverseDnsEntryForThisServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (changeReverseDnsEntryForThisServerRequest.Ip == null)
                throw new ArgumentNullException(nameof(changeReverseDnsEntryForThisServerRequest.Ip), "Property is required for class ChangeReverseDnsEntryForThisServerRequest.");

            writer.WriteString("ip", changeReverseDnsEntryForThisServerRequest.Ip);

            if (changeReverseDnsEntryForThisServerRequest.DnsPtr != null)
                writer.WriteString("dns_ptr", changeReverseDnsEntryForThisServerRequest.DnsPtr);
            else
                writer.WriteNull("dns_ptr");
        }
    }

    /// <summary>
    /// The ChangeReverseDnsEntryForThisServerRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChangeReverseDnsEntryForThisServerRequest))]
    internal partial class ChangeReverseDnsEntryForThisServerRequestSerializationContext : JsonSerializerContext { }
}
