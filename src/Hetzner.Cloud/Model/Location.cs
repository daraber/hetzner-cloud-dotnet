// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// [Location](#locations) the [Datacenter](#datacenters) is located at.  | [Location](#locations) the for the [Floating IP](#floating-ips) is located at.  Routing is optimized for this [Location](#locations).  | Location of the Volume. Volume can only be attached to Servers in the same Location.
    /// </summary>
    internal partial class Location : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="city">Name of the closest city to the [Location](#locations).  City name or city name and state in short form. E.g. &#x60;Falkenstein&#x60; or &#x60;Ashburn, VA&#x60;. </param>
        /// <param name="country">Country the [Location](#locations) resides in.  ISO 3166-1 alpha-2 code of the country. </param>
        /// <param name="description">Humand readable description of the [Location](#locations).</param>
        /// <param name="id">ID of the Location.</param>
        /// <param name="latitude">Latitude of the city closest to the [Location](#locations).</param>
        /// <param name="longitude">Longitude of the city closest to the [Location](#locations).</param>
        /// <param name="name">Unique identifier of the [Location](#locations).</param>
        /// <param name="networkZone">Name of the Network Zone this [Location](#locations) resides in.</param>
        [JsonConstructor]
        internal Location(string city, string country, string description, long id, double latitude, double longitude, string name, string networkZone)
        {
            City = city;
            Country = country;
            Description = description;
            Id = id;
            Latitude = latitude;
            Longitude = longitude;
            Name = name;
            NetworkZone = networkZone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the closest city to the [Location](#locations).  City name or city name and state in short form. E.g. &#x60;Falkenstein&#x60; or &#x60;Ashburn, VA&#x60;. 
        /// </summary>
        /// <value>Name of the closest city to the [Location](#locations).  City name or city name and state in short form. E.g. &#x60;Falkenstein&#x60; or &#x60;Ashburn, VA&#x60;. </value>
        /* <example>Falkenstein</example> */
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Country the [Location](#locations) resides in.  ISO 3166-1 alpha-2 code of the country. 
        /// </summary>
        /// <value>Country the [Location](#locations) resides in.  ISO 3166-1 alpha-2 code of the country. </value>
        /* <example>DE</example> */
        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// Humand readable description of the [Location](#locations).
        /// </summary>
        /// <value>Humand readable description of the [Location](#locations).</value>
        /* <example>Falkenstein DC Park 1</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// ID of the Location.
        /// </summary>
        /// <value>ID of the Location.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Latitude of the city closest to the [Location](#locations).
        /// </summary>
        /// <value>Latitude of the city closest to the [Location](#locations).</value>
        /* <example>50.47612</example> */
        [JsonPropertyName("latitude")]
        public double Latitude { get; set; }

        /// <summary>
        /// Longitude of the city closest to the [Location](#locations).
        /// </summary>
        /// <value>Longitude of the city closest to the [Location](#locations).</value>
        /* <example>12.370071</example> */
        [JsonPropertyName("longitude")]
        public double Longitude { get; set; }

        /// <summary>
        /// Unique identifier of the [Location](#locations).
        /// </summary>
        /// <value>Unique identifier of the [Location](#locations).</value>
        /* <example>fsn1</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of the Network Zone this [Location](#locations) resides in.
        /// </summary>
        /// <value>Name of the Network Zone this [Location](#locations) resides in.</value>
        /* <example>eu-central</example> */
        [JsonPropertyName("network_zone")]
        public string NetworkZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkZone: ").Append(NetworkZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-z0-9]+(-?[a-z0-9]*)*$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            if (this.NetworkZone != null) {
                // NetworkZone (string) pattern
                Regex regexNetworkZone = new Regex(@"^[a-z0-9]+(-?[a-z0-9]*)*$", RegexOptions.CultureInvariant);

                if (!regexNetworkZone.Match(this.NetworkZone).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetworkZone, must match a pattern of " + regexNetworkZone, new [] { "NetworkZone" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Location" />
    /// </summary>
    internal class LocationJsonConverter : JsonConverter<Location>
    {
        /// <summary>
        /// Deserializes json to <see cref="Location" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Location Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> city = default;
            Option<string?> country = default;
            Option<string?> description = default;
            Option<long?> id = default;
            Option<double?> latitude = default;
            Option<double?> longitude = default;
            Option<string?> name = default;
            Option<string?> networkZone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network_zone":
                            networkZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(city));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(country));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(description));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(id));

            if (!latitude.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(latitude));

            if (!longitude.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(longitude));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(name));

            if (!networkZone.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(networkZone));

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class Location.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class Location.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Location.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Location.");

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class Location.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class Location.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Location.");

            if (networkZone.IsSet && networkZone.Value == null)
                throw new ArgumentNullException(nameof(networkZone), "Property is not nullable for class Location.");

            return new Location(city.Value!, country.Value!, description.Value!, id.Value!.Value!, latitude.Value!.Value!, longitude.Value!.Value!, name.Value!, networkZone.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Location" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="location"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Location location, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, location, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Location" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="location"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Location location, JsonSerializerOptions jsonSerializerOptions)
        {
            if (location.City == null)
                throw new ArgumentNullException(nameof(location.City), "Property is required for class Location.");

            if (location.Country == null)
                throw new ArgumentNullException(nameof(location.Country), "Property is required for class Location.");

            if (location.Description == null)
                throw new ArgumentNullException(nameof(location.Description), "Property is required for class Location.");

            if (location.Name == null)
                throw new ArgumentNullException(nameof(location.Name), "Property is required for class Location.");

            if (location.NetworkZone == null)
                throw new ArgumentNullException(nameof(location.NetworkZone), "Property is required for class Location.");

            writer.WriteString("city", location.City);

            writer.WriteString("country", location.Country);

            writer.WriteString("description", location.Description);

            writer.WriteNumber("id", location.Id);

            writer.WriteNumber("latitude", location.Latitude);

            writer.WriteNumber("longitude", location.Longitude);

            writer.WriteString("name", location.Name);

            writer.WriteString("network_zone", location.NetworkZone);
        }
    }

    /// <summary>
    /// The LocationSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Location))]
    internal partial class LocationSerializationContext : JsonSerializerContext { }
}
