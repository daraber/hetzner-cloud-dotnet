// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Health status of the services on this target. Only present for target types \&quot;server\&quot; and \&quot;ip\&quot;.
    /// </summary>
    public partial class LoadBalancerTargetHealthStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerTargetHealthStatus" /> class.
        /// </summary>
        /// <param name="listenPort">listenPort</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public LoadBalancerTargetHealthStatus(Option<int?> listenPort = default, Option<StatusEnum?> status = default)
        {
            ListenPortOption = listenPort;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Healthy for value: healthy
            /// </summary>
            Healthy = 1,

            /// <summary>
            /// Enum Unhealthy for value: unhealthy
            /// </summary>
            Unhealthy = 2,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            Unknown = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("healthy"))
                return StatusEnum.Healthy;

            if (value.Equals("unhealthy"))
                return StatusEnum.Unhealthy;

            if (value.Equals("unknown"))
                return StatusEnum.Unknown;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("healthy"))
                return StatusEnum.Healthy;

            if (value.Equals("unhealthy"))
                return StatusEnum.Unhealthy;

            if (value.Equals("unknown"))
                return StatusEnum.Unknown;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Healthy)
                return "healthy";

            if (value == StatusEnum.Unhealthy)
                return "unhealthy";

            if (value == StatusEnum.Unknown)
                return "unknown";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /* <example>healthy</example> */
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of ListenPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ListenPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets ListenPort
        /// </summary>
        /* <example>443</example> */
        [JsonPropertyName("listen_port")]
        public int? ListenPort { get { return this.ListenPortOption; } set { this.ListenPortOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerTargetHealthStatus {\n");
            sb.Append("  ListenPort: ").Append(ListenPort).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerTargetHealthStatus" />
    /// </summary>
    public class LoadBalancerTargetHealthStatusJsonConverter : JsonConverter<LoadBalancerTargetHealthStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerTargetHealthStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerTargetHealthStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> listenPort = default;
            Option<LoadBalancerTargetHealthStatus.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "listen_port":
                            listenPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<LoadBalancerTargetHealthStatus.StatusEnum?>(LoadBalancerTargetHealthStatus.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (listenPort.IsSet && listenPort.Value == null)
                throw new ArgumentNullException(nameof(listenPort), "Property is not nullable for class LoadBalancerTargetHealthStatus.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class LoadBalancerTargetHealthStatus.");

            return new LoadBalancerTargetHealthStatus(listenPort, status);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerTargetHealthStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerTargetHealthStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerTargetHealthStatus loadBalancerTargetHealthStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerTargetHealthStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerTargetHealthStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerTargetHealthStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerTargetHealthStatus loadBalancerTargetHealthStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerTargetHealthStatus.ListenPortOption.IsSet)
                writer.WriteNumber("listen_port", loadBalancerTargetHealthStatus.ListenPortOption.Value!.Value);

            var statusRawValue = LoadBalancerTargetHealthStatus.StatusEnumToJsonValue(loadBalancerTargetHealthStatus.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
        }
    }

    /// <summary>
    /// The LoadBalancerTargetHealthStatusSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerTargetHealthStatus))]
    public partial class LoadBalancerTargetHealthStatusSerializationContext : JsonSerializerContext { }
}
