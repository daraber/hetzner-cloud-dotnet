// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue
    /// </summary>
    public partial class EnableRescueModeForServerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnableRescueModeForServerRequest" /> class.
        /// </summary>
        /// <param name="sshKeys">Array of SSH key IDs which should be injected into the rescue system.</param>
        /// <param name="type">Type of rescue system to boot. (default to TypeEnum.Linux64)</param>
        [JsonConstructor]
        public EnableRescueModeForServerRequest(Option<List<long>?> sshKeys = default, Option<TypeEnum?> type = default)
        {
            SshKeysOption = sshKeys;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of rescue system to boot.
        /// </summary>
        /// <value>Type of rescue system to boot.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Linux64 for value: linux64
            /// </summary>
            Linux64 = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("linux64"))
                return TypeEnum.Linux64;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("linux64"))
                return TypeEnum.Linux64;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Linux64)
                return "linux64";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Type of rescue system to boot.
        /// </summary>
        /// <value>Type of rescue system to boot.</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SshKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> SshKeysOption { get; private set; }

        /// <summary>
        /// Array of SSH key IDs which should be injected into the rescue system.
        /// </summary>
        /// <value>Array of SSH key IDs which should be injected into the rescue system.</value>
        /* <example>[2323]</example> */
        [JsonPropertyName("ssh_keys")]
        public List<long>? SshKeys { get { return this.SshKeysOption; } set { this.SshKeysOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnableRescueModeForServerRequest {\n");
            sb.Append("  SshKeys: ").Append(SshKeys).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnableRescueModeForServerRequest" />
    /// </summary>
    public class EnableRescueModeForServerRequestJsonConverter : JsonConverter<EnableRescueModeForServerRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EnableRescueModeForServerRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnableRescueModeForServerRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<long>?> sshKeys = default;
            Option<EnableRescueModeForServerRequest.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ssh_keys":
                            sshKeys = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<EnableRescueModeForServerRequest.TypeEnum?>(EnableRescueModeForServerRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sshKeys.IsSet && sshKeys.Value == null)
                throw new ArgumentNullException(nameof(sshKeys), "Property is not nullable for class EnableRescueModeForServerRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class EnableRescueModeForServerRequest.");

            return new EnableRescueModeForServerRequest(sshKeys, type);
        }

        /// <summary>
        /// Serializes a <see cref="EnableRescueModeForServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enableRescueModeForServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnableRescueModeForServerRequest enableRescueModeForServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, enableRescueModeForServerRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnableRescueModeForServerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enableRescueModeForServerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnableRescueModeForServerRequest enableRescueModeForServerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (enableRescueModeForServerRequest.SshKeysOption.IsSet && enableRescueModeForServerRequest.SshKeys == null)
                throw new ArgumentNullException(nameof(enableRescueModeForServerRequest.SshKeys), "Property is required for class EnableRescueModeForServerRequest.");

            if (enableRescueModeForServerRequest.SshKeysOption.IsSet)
            {
                writer.WritePropertyName("ssh_keys");
                JsonSerializer.Serialize(writer, enableRescueModeForServerRequest.SshKeys, jsonSerializerOptions);
            }
            var typeRawValue = EnableRescueModeForServerRequest.TypeEnumToJsonValue(enableRescueModeForServerRequest.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
        }
    }

    /// <summary>
    /// The EnableRescueModeForServerRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(EnableRescueModeForServerRequest))]
    public partial class EnableRescueModeForServerRequestSerializationContext : JsonSerializerContext { }
}
