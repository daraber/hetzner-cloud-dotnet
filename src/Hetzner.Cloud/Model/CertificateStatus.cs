// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Current status of a type &#x60;managed&#x60; Certificate, always *null* for type &#x60;uploaded&#x60; Certificates
    /// </summary>
    internal partial class CertificateStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateStatus" /> class.
        /// </summary>
        /// <param name="error">error</param>
        /// <param name="issuance">Status of the issuance process of the Certificate</param>
        /// <param name="renewal">Status of the renewal process of the Certificate.</param>
        [JsonConstructor]
        internal CertificateStatus(Option<CertificateStatusError?> error = default, Option<IssuanceEnum?> issuance = default, Option<RenewalEnum?> renewal = default)
        {
            ErrorOption = error;
            IssuanceOption = issuance;
            RenewalOption = renewal;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the issuance process of the Certificate
        /// </summary>
        /// <value>Status of the issuance process of the Certificate</value>
        internal enum IssuanceEnum
        {
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 1,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 3
        }

        /// <summary>
        /// Returns a <see cref="IssuanceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IssuanceEnum IssuanceEnumFromString(string value)
        {
            if (value.Equals("completed"))
                return IssuanceEnum.Completed;

            if (value.Equals("failed"))
                return IssuanceEnum.Failed;

            if (value.Equals("pending"))
                return IssuanceEnum.Pending;

            throw new NotImplementedException($"Could not convert value to type IssuanceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IssuanceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IssuanceEnum? IssuanceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("completed"))
                return IssuanceEnum.Completed;

            if (value.Equals("failed"))
                return IssuanceEnum.Failed;

            if (value.Equals("pending"))
                return IssuanceEnum.Pending;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IssuanceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IssuanceEnumToJsonValue(IssuanceEnum? value)
        {
            if (value == IssuanceEnum.Completed)
                return "completed";

            if (value == IssuanceEnum.Failed)
                return "failed";

            if (value == IssuanceEnum.Pending)
                return "pending";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Issuance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuanceEnum?> IssuanceOption { get; private set; }

        /// <summary>
        /// Status of the issuance process of the Certificate
        /// </summary>
        /// <value>Status of the issuance process of the Certificate</value>
        /* <example>completed</example> */
        [JsonPropertyName("issuance")]
        public IssuanceEnum? Issuance { get { return this.IssuanceOption; } set { this.IssuanceOption = new(value); } }

        /// <summary>
        /// Status of the renewal process of the Certificate.
        /// </summary>
        /// <value>Status of the renewal process of the Certificate.</value>
        internal enum RenewalEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 2,

            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            Scheduled = 3,

            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            Unavailable = 4
        }

        /// <summary>
        /// Returns a <see cref="RenewalEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RenewalEnum RenewalEnumFromString(string value)
        {
            if (value.Equals("failed"))
                return RenewalEnum.Failed;

            if (value.Equals("pending"))
                return RenewalEnum.Pending;

            if (value.Equals("scheduled"))
                return RenewalEnum.Scheduled;

            if (value.Equals("unavailable"))
                return RenewalEnum.Unavailable;

            throw new NotImplementedException($"Could not convert value to type RenewalEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RenewalEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RenewalEnum? RenewalEnumFromStringOrDefault(string value)
        {
            if (value.Equals("failed"))
                return RenewalEnum.Failed;

            if (value.Equals("pending"))
                return RenewalEnum.Pending;

            if (value.Equals("scheduled"))
                return RenewalEnum.Scheduled;

            if (value.Equals("unavailable"))
                return RenewalEnum.Unavailable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RenewalEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RenewalEnumToJsonValue(RenewalEnum? value)
        {
            if (value == RenewalEnum.Failed)
                return "failed";

            if (value == RenewalEnum.Pending)
                return "pending";

            if (value == RenewalEnum.Scheduled)
                return "scheduled";

            if (value == RenewalEnum.Unavailable)
                return "unavailable";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Renewal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RenewalEnum?> RenewalOption { get; private set; }

        /// <summary>
        /// Status of the renewal process of the Certificate.
        /// </summary>
        /// <value>Status of the renewal process of the Certificate.</value>
        /* <example>scheduled</example> */
        [JsonPropertyName("renewal")]
        public RenewalEnum? Renewal { get { return this.RenewalOption; } set { this.RenewalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CertificateStatusError?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public CertificateStatusError? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateStatus {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Issuance: ").Append(Issuance).Append("\n");
            sb.Append("  Renewal: ").Append(Renewal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CertificateStatus" />
    /// </summary>
    internal class CertificateStatusJsonConverter : JsonConverter<CertificateStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="CertificateStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CertificateStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CertificateStatusError?> error = default;
            Option<CertificateStatus.IssuanceEnum?> issuance = default;
            Option<CertificateStatus.RenewalEnum?> renewal = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            error = new Option<CertificateStatusError?>(JsonSerializer.Deserialize<CertificateStatusError>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "issuance":
                            string? issuanceRawValue = utf8JsonReader.GetString();
                            if (issuanceRawValue != null)
                                issuance = new Option<CertificateStatus.IssuanceEnum?>(CertificateStatus.IssuanceEnumFromStringOrDefault(issuanceRawValue));
                            break;
                        case "renewal":
                            string? renewalRawValue = utf8JsonReader.GetString();
                            if (renewalRawValue != null)
                                renewal = new Option<CertificateStatus.RenewalEnum?>(CertificateStatus.RenewalEnumFromStringOrDefault(renewalRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (issuance.IsSet && issuance.Value == null)
                throw new ArgumentNullException(nameof(issuance), "Property is not nullable for class CertificateStatus.");

            if (renewal.IsSet && renewal.Value == null)
                throw new ArgumentNullException(nameof(renewal), "Property is not nullable for class CertificateStatus.");

            return new CertificateStatus(error, issuance, renewal);
        }

        /// <summary>
        /// Serializes a <see cref="CertificateStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="certificateStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CertificateStatus certificateStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, certificateStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CertificateStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="certificateStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CertificateStatus certificateStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (certificateStatus.ErrorOption.IsSet)
                if (certificateStatus.ErrorOption.Value != null)
                {
                    writer.WritePropertyName("error");
                    JsonSerializer.Serialize(writer, certificateStatus.Error, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("error");
            var issuanceRawValue = CertificateStatus.IssuanceEnumToJsonValue(certificateStatus.IssuanceOption.Value!.Value);
            writer.WriteString("issuance", issuanceRawValue);
            var renewalRawValue = CertificateStatus.RenewalEnumToJsonValue(certificateStatus.RenewalOption.Value!.Value);
            writer.WriteString("renewal", renewalRawValue);
        }
    }

    /// <summary>
    /// The CertificateStatusSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CertificateStatus))]
    internal partial class CertificateStatusSerializationContext : JsonSerializerContext { }
}
