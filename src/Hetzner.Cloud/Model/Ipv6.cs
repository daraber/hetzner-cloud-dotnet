// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// IPv6 network assigned to this Server and its reverse DNS entry
    /// </summary>
    internal partial class Ipv6 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ipv6" /> class.
        /// </summary>
        /// <param name="blocked">If the IP is blocked by our anti abuse dept</param>
        /// <param name="ip">IP address (v6) of this Server</param>
        /// <param name="dnsPtr">Reverse DNS PTR entries for the IPv6 addresses of this Server</param>
        /// <param name="id">ID of the Primary IP.</param>
        [JsonConstructor]
        internal Ipv6(bool blocked, string ip, List<DnsPtr>? dnsPtr = default, Option<long?> id = default)
        {
            Blocked = blocked;
            Ip = ip;
            DnsPtr = dnsPtr;
            IdOption = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// If the IP is blocked by our anti abuse dept
        /// </summary>
        /// <value>If the IP is blocked by our anti abuse dept</value>
        /* <example>false</example> */
        [JsonPropertyName("blocked")]
        public bool Blocked { get; set; }

        /// <summary>
        /// IP address (v6) of this Server
        /// </summary>
        /// <value>IP address (v6) of this Server</value>
        /* <example>2001:db8::/64</example> */
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Reverse DNS PTR entries for the IPv6 addresses of this Server
        /// </summary>
        /// <value>Reverse DNS PTR entries for the IPv6 addresses of this Server</value>
        [JsonPropertyName("dns_ptr")]
        public List<DnsPtr>? DnsPtr { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// ID of the Primary IP.
        /// </summary>
        /// <value>ID of the Primary IP.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ipv6 {\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  DnsPtr: ").Append(DnsPtr).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.IdOption.IsSet && this.IdOption.Value > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Ipv6" />
    /// </summary>
    internal class Ipv6JsonConverter : JsonConverter<Ipv6>
    {
        /// <summary>
        /// Deserializes json to <see cref="Ipv6" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Ipv6 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> blocked = default;
            Option<string?> ip = default;
            Option<List<DnsPtr>?> dnsPtr = default;
            Option<long?> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "blocked":
                            blocked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dns_ptr":
                            dnsPtr = new Option<List<DnsPtr>?>(JsonSerializer.Deserialize<List<DnsPtr>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!blocked.IsSet)
                throw new ArgumentException("Property is required for class Ipv6.", nameof(blocked));

            if (!ip.IsSet)
                throw new ArgumentException("Property is required for class Ipv6.", nameof(ip));

            if (!dnsPtr.IsSet)
                throw new ArgumentException("Property is required for class Ipv6.", nameof(dnsPtr));

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class Ipv6.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class Ipv6.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Ipv6.");

            return new Ipv6(blocked.Value!.Value!, ip.Value!, dnsPtr.Value!, id);
        }

        /// <summary>
        /// Serializes a <see cref="Ipv6" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipv6"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Ipv6 ipv6, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipv6, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Ipv6" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipv6"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Ipv6 ipv6, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipv6.Ip == null)
                throw new ArgumentNullException(nameof(ipv6.Ip), "Property is required for class Ipv6.");

            writer.WriteBoolean("blocked", ipv6.Blocked);

            writer.WriteString("ip", ipv6.Ip);

            if (ipv6.DnsPtr != null)
            {
                writer.WritePropertyName("dns_ptr");
                JsonSerializer.Serialize(writer, ipv6.DnsPtr, jsonSerializerOptions);
            }
            else
                writer.WriteNull("dns_ptr");
            if (ipv6.IdOption.IsSet)
                writer.WriteNumber("id", ipv6.IdOption.Value!.Value);
        }
    }

    /// <summary>
    /// The Ipv6SerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Ipv6))]
    internal partial class Ipv6SerializationContext : JsonSerializerContext { }
}
