// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// [Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. | Datacenter this Resource is located at
    /// </summary>
    public partial class Datacenter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Datacenter" /> class.
        /// </summary>
        /// <param name="description">Descriptive name for the [Datacenter](#datacenters).  Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier. </param>
        /// <param name="id">ID of the Datacenter.</param>
        /// <param name="location">location</param>
        /// <param name="name">Unique name for the [Datacenter](#datacenters).  Can be used as a more descriptive identifier. </param>
        /// <param name="serverTypes">serverTypes</param>
        [JsonConstructor]
        public Datacenter(string description, long id, Location location, string name, DatacenterServerTypes serverTypes)
        {
            Description = description;
            Id = id;
            Location = location;
            Name = name;
            ServerTypes = serverTypes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Descriptive name for the [Datacenter](#datacenters).  Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier. 
        /// </summary>
        /// <value>Descriptive name for the [Datacenter](#datacenters).  Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier. </value>
        /* <example>Falkenstein DC Park 8</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// ID of the Datacenter.
        /// </summary>
        /// <value>ID of the Datacenter.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public Location Location { get; set; }

        /// <summary>
        /// Unique name for the [Datacenter](#datacenters).  Can be used as a more descriptive identifier. 
        /// </summary>
        /// <value>Unique name for the [Datacenter](#datacenters).  Can be used as a more descriptive identifier. </value>
        /* <example>fsn1-dc8</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ServerTypes
        /// </summary>
        [JsonPropertyName("server_types")]
        public DatacenterServerTypes ServerTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Datacenter {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServerTypes: ").Append(ServerTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-z0-9]+(-?[a-z0-9]*)*$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Datacenter" />
    /// </summary>
    public class DatacenterJsonConverter : JsonConverter<Datacenter>
    {
        /// <summary>
        /// Deserializes json to <see cref="Datacenter" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Datacenter Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<long?> id = default;
            Option<Location?> location = default;
            Option<string?> name = default;
            Option<DatacenterServerTypes?> serverTypes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "location":
                            location = new Option<Location?>(JsonSerializer.Deserialize<Location>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "server_types":
                            serverTypes = new Option<DatacenterServerTypes?>(JsonSerializer.Deserialize<DatacenterServerTypes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Datacenter.", nameof(description));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Datacenter.", nameof(id));

            if (!location.IsSet)
                throw new ArgumentException("Property is required for class Datacenter.", nameof(location));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Datacenter.", nameof(name));

            if (!serverTypes.IsSet)
                throw new ArgumentException("Property is required for class Datacenter.", nameof(serverTypes));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Datacenter.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Datacenter.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class Datacenter.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Datacenter.");

            if (serverTypes.IsSet && serverTypes.Value == null)
                throw new ArgumentNullException(nameof(serverTypes), "Property is not nullable for class Datacenter.");

            return new Datacenter(description.Value!, id.Value!.Value!, location.Value!, name.Value!, serverTypes.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Datacenter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datacenter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Datacenter datacenter, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datacenter, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Datacenter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datacenter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Datacenter datacenter, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datacenter.Description == null)
                throw new ArgumentNullException(nameof(datacenter.Description), "Property is required for class Datacenter.");

            if (datacenter.Location == null)
                throw new ArgumentNullException(nameof(datacenter.Location), "Property is required for class Datacenter.");

            if (datacenter.Name == null)
                throw new ArgumentNullException(nameof(datacenter.Name), "Property is required for class Datacenter.");

            if (datacenter.ServerTypes == null)
                throw new ArgumentNullException(nameof(datacenter.ServerTypes), "Property is required for class Datacenter.");

            writer.WriteString("description", datacenter.Description);

            writer.WriteNumber("id", datacenter.Id);

            writer.WritePropertyName("location");
            JsonSerializer.Serialize(writer, datacenter.Location, jsonSerializerOptions);
            writer.WriteString("name", datacenter.Name);

            writer.WritePropertyName("server_types");
            JsonSerializer.Serialize(writer, datacenter.ServerTypes, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The DatacenterSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Datacenter))]
    public partial class DatacenterSerializationContext : JsonSerializerContext { }
}
