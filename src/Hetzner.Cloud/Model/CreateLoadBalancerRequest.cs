// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/load_balancers
    /// </summary>
    internal partial class CreateLoadBalancerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLoadBalancerRequest" /> class.
        /// </summary>
        /// <param name="loadBalancerType">ID or name of the Load Balancer type this Load Balancer should be created with</param>
        /// <param name="name">Name of the Load Balancer</param>
        /// <param name="algorithm">algorithm</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="location">ID or name of Location to create Load Balancer in</param>
        /// <param name="network">ID of the network the Load Balancer should be attached to on creation</param>
        /// <param name="networkZone">Name of network zone</param>
        /// <param name="publicInterface">Enable or disable the public interface of the Load Balancer</param>
        /// <param name="services">Array of services</param>
        /// <param name="targets">Array of targets</param>
        [JsonConstructor]
        internal CreateLoadBalancerRequest(string loadBalancerType, string name, Option<LoadBalancerAlgorithm?> algorithm = default, Option<Dictionary<string, string>?> labels = default, Option<string?> location = default, Option<long?> network = default, Option<string?> networkZone = default, Option<bool?> publicInterface = default, Option<List<LoadBalancerService>?> services = default, Option<List<LoadBalancerAddTarget>?> targets = default)
        {
            LoadBalancerType = loadBalancerType;
            Name = name;
            AlgorithmOption = algorithm;
            LabelsOption = labels;
            LocationOption = location;
            NetworkOption = network;
            NetworkZoneOption = networkZone;
            PublicInterfaceOption = publicInterface;
            ServicesOption = services;
            TargetsOption = targets;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID or name of the Load Balancer type this Load Balancer should be created with
        /// </summary>
        /// <value>ID or name of the Load Balancer type this Load Balancer should be created with</value>
        /* <example>lb11</example> */
        [JsonPropertyName("load_balancer_type")]
        public string LoadBalancerType { get; set; }

        /// <summary>
        /// Name of the Load Balancer
        /// </summary>
        /// <value>Name of the Load Balancer</value>
        /* <example>Web Frontend</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Algorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LoadBalancerAlgorithm?> AlgorithmOption { get; private set; }

        /// <summary>
        /// Gets or Sets Algorithm
        /// </summary>
        [JsonPropertyName("algorithm")]
        public LoadBalancerAlgorithm? Algorithm { get { return this.AlgorithmOption; } set { this.AlgorithmOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// ID or name of Location to create Load Balancer in
        /// </summary>
        /// <value>ID or name of Location to create Load Balancer in</value>
        /* <example>fsn1</example> */
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NetworkOption { get; private set; }

        /// <summary>
        /// ID of the network the Load Balancer should be attached to on creation
        /// </summary>
        /// <value>ID of the network the Load Balancer should be attached to on creation</value>
        /* <example>123</example> */
        [JsonPropertyName("network")]
        public long? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetworkZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NetworkZoneOption { get; private set; }

        /// <summary>
        /// Name of network zone
        /// </summary>
        /// <value>Name of network zone</value>
        /* <example>eu-central</example> */
        [JsonPropertyName("network_zone")]
        public string? NetworkZone { get { return this.NetworkZoneOption; } set { this.NetworkZoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicInterface
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicInterfaceOption { get; private set; }

        /// <summary>
        /// Enable or disable the public interface of the Load Balancer
        /// </summary>
        /// <value>Enable or disable the public interface of the Load Balancer</value>
        /* <example>true</example> */
        [JsonPropertyName("public_interface")]
        public bool? PublicInterface { get { return this.PublicInterfaceOption; } set { this.PublicInterfaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Services
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LoadBalancerService>?> ServicesOption { get; private set; }

        /// <summary>
        /// Array of services
        /// </summary>
        /// <value>Array of services</value>
        [JsonPropertyName("services")]
        public List<LoadBalancerService>? Services { get { return this.ServicesOption; } set { this.ServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Targets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LoadBalancerAddTarget>?> TargetsOption { get; private set; }

        /// <summary>
        /// Array of targets
        /// </summary>
        /// <value>Array of targets</value>
        [JsonPropertyName("targets")]
        public List<LoadBalancerAddTarget>? Targets { get { return this.TargetsOption; } set { this.TargetsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLoadBalancerRequest {\n");
            sb.Append("  LoadBalancerType: ").Append(LoadBalancerType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  NetworkZone: ").Append(NetworkZone).Append("\n");
            sb.Append("  PublicInterface: ").Append(PublicInterface).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateLoadBalancerRequest" />
    /// </summary>
    internal class CreateLoadBalancerRequestJsonConverter : JsonConverter<CreateLoadBalancerRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateLoadBalancerRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateLoadBalancerRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> loadBalancerType = default;
            Option<string?> name = default;
            Option<LoadBalancerAlgorithm?> algorithm = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> location = default;
            Option<long?> network = default;
            Option<string?> networkZone = default;
            Option<bool?> publicInterface = default;
            Option<List<LoadBalancerService>?> services = default;
            Option<List<LoadBalancerAddTarget>?> targets = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "load_balancer_type":
                            loadBalancerType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "algorithm":
                            algorithm = new Option<LoadBalancerAlgorithm?>(JsonSerializer.Deserialize<LoadBalancerAlgorithm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network":
                            network = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "network_zone":
                            networkZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "public_interface":
                            publicInterface = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "services":
                            services = new Option<List<LoadBalancerService>?>(JsonSerializer.Deserialize<List<LoadBalancerService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "targets":
                            targets = new Option<List<LoadBalancerAddTarget>?>(JsonSerializer.Deserialize<List<LoadBalancerAddTarget>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!loadBalancerType.IsSet)
                throw new ArgumentException("Property is required for class CreateLoadBalancerRequest.", nameof(loadBalancerType));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateLoadBalancerRequest.", nameof(name));

            if (loadBalancerType.IsSet && loadBalancerType.Value == null)
                throw new ArgumentNullException(nameof(loadBalancerType), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (algorithm.IsSet && algorithm.Value == null)
                throw new ArgumentNullException(nameof(algorithm), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (networkZone.IsSet && networkZone.Value == null)
                throw new ArgumentNullException(nameof(networkZone), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (publicInterface.IsSet && publicInterface.Value == null)
                throw new ArgumentNullException(nameof(publicInterface), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (services.IsSet && services.Value == null)
                throw new ArgumentNullException(nameof(services), "Property is not nullable for class CreateLoadBalancerRequest.");

            if (targets.IsSet && targets.Value == null)
                throw new ArgumentNullException(nameof(targets), "Property is not nullable for class CreateLoadBalancerRequest.");

            return new CreateLoadBalancerRequest(loadBalancerType.Value!, name.Value!, algorithm, labels, location, network, networkZone, publicInterface, services, targets);
        }

        /// <summary>
        /// Serializes a <see cref="CreateLoadBalancerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createLoadBalancerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateLoadBalancerRequest createLoadBalancerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createLoadBalancerRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateLoadBalancerRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createLoadBalancerRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateLoadBalancerRequest createLoadBalancerRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createLoadBalancerRequest.LoadBalancerType == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.LoadBalancerType), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.Name == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Name), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.AlgorithmOption.IsSet && createLoadBalancerRequest.Algorithm == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Algorithm), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.LabelsOption.IsSet && createLoadBalancerRequest.Labels == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Labels), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.LocationOption.IsSet && createLoadBalancerRequest.Location == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Location), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.NetworkZoneOption.IsSet && createLoadBalancerRequest.NetworkZone == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.NetworkZone), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.ServicesOption.IsSet && createLoadBalancerRequest.Services == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Services), "Property is required for class CreateLoadBalancerRequest.");

            if (createLoadBalancerRequest.TargetsOption.IsSet && createLoadBalancerRequest.Targets == null)
                throw new ArgumentNullException(nameof(createLoadBalancerRequest.Targets), "Property is required for class CreateLoadBalancerRequest.");

            writer.WriteString("load_balancer_type", createLoadBalancerRequest.LoadBalancerType);

            writer.WriteString("name", createLoadBalancerRequest.Name);

            if (createLoadBalancerRequest.AlgorithmOption.IsSet)
            {
                writer.WritePropertyName("algorithm");
                JsonSerializer.Serialize(writer, createLoadBalancerRequest.Algorithm, jsonSerializerOptions);
            }
            if (createLoadBalancerRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createLoadBalancerRequest.Labels, jsonSerializerOptions);
            }
            if (createLoadBalancerRequest.LocationOption.IsSet)
                writer.WriteString("location", createLoadBalancerRequest.Location);

            if (createLoadBalancerRequest.NetworkOption.IsSet)
                writer.WriteNumber("network", createLoadBalancerRequest.NetworkOption.Value!.Value);

            if (createLoadBalancerRequest.NetworkZoneOption.IsSet)
                writer.WriteString("network_zone", createLoadBalancerRequest.NetworkZone);

            if (createLoadBalancerRequest.PublicInterfaceOption.IsSet)
                writer.WriteBoolean("public_interface", createLoadBalancerRequest.PublicInterfaceOption.Value!.Value);

            if (createLoadBalancerRequest.ServicesOption.IsSet)
            {
                writer.WritePropertyName("services");
                JsonSerializer.Serialize(writer, createLoadBalancerRequest.Services, jsonSerializerOptions);
            }
            if (createLoadBalancerRequest.TargetsOption.IsSet)
            {
                writer.WritePropertyName("targets");
                JsonSerializer.Serialize(writer, createLoadBalancerRequest.Targets, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreateLoadBalancerRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateLoadBalancerRequest))]
    internal partial class CreateLoadBalancerRequestSerializationContext : JsonSerializerContext { }
}
