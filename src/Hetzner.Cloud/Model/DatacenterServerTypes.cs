// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// [Server Types](#server-types) supported and available in this [Datacenter](#datacenters). 
    /// </summary>
    public partial class DatacenterServerTypes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatacenterServerTypes" /> class.
        /// </summary>
        /// <param name="available">[Server Types](#server-types) currently available in this [Datacenter](#datacenters).  These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable but are supported in this [Datacenter](#datacenters) are listed as &#x60;supported&#x60;. </param>
        /// <param name="availableForMigration">[Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).  Existing [Servers](#servers) can be migrated to these [Server Types](#server-types). </param>
        /// <param name="supported">List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).  These [Server Types](#server-types) are generally available in this Datacenter, but might be temporarily out of stock. </param>
        [JsonConstructor]
        public DatacenterServerTypes(List<long> available, List<long> availableForMigration, List<long> supported)
        {
            Available = available;
            AvailableForMigration = availableForMigration;
            Supported = supported;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// [Server Types](#server-types) currently available in this [Datacenter](#datacenters).  These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable but are supported in this [Datacenter](#datacenters) are listed as &#x60;supported&#x60;. 
        /// </summary>
        /// <value>[Server Types](#server-types) currently available in this [Datacenter](#datacenters).  These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable but are supported in this [Datacenter](#datacenters) are listed as &#x60;supported&#x60;. </value>
        /* <example>[1,2,3]</example> */
        [JsonPropertyName("available")]
        public List<long> Available { get; set; }

        /// <summary>
        /// [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).  Existing [Servers](#servers) can be migrated to these [Server Types](#server-types). 
        /// </summary>
        /// <value>[Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).  Existing [Servers](#servers) can be migrated to these [Server Types](#server-types). </value>
        /* <example>[1,2,3]</example> */
        [JsonPropertyName("available_for_migration")]
        public List<long> AvailableForMigration { get; set; }

        /// <summary>
        /// List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).  These [Server Types](#server-types) are generally available in this Datacenter, but might be temporarily out of stock. 
        /// </summary>
        /// <value>List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).  These [Server Types](#server-types) are generally available in this Datacenter, but might be temporarily out of stock. </value>
        /* <example>[1,2,3]</example> */
        [JsonPropertyName("supported")]
        public List<long> Supported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatacenterServerTypes {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  AvailableForMigration: ").Append(AvailableForMigration).Append("\n");
            sb.Append("  Supported: ").Append(Supported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatacenterServerTypes" />
    /// </summary>
    public class DatacenterServerTypesJsonConverter : JsonConverter<DatacenterServerTypes>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatacenterServerTypes" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatacenterServerTypes Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<long>?> available = default;
            Option<List<long>?> availableForMigration = default;
            Option<List<long>?> supported = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "available":
                            available = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "available_for_migration":
                            availableForMigration = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supported":
                            supported = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!available.IsSet)
                throw new ArgumentException("Property is required for class DatacenterServerTypes.", nameof(available));

            if (!availableForMigration.IsSet)
                throw new ArgumentException("Property is required for class DatacenterServerTypes.", nameof(availableForMigration));

            if (!supported.IsSet)
                throw new ArgumentException("Property is required for class DatacenterServerTypes.", nameof(supported));

            if (available.IsSet && available.Value == null)
                throw new ArgumentNullException(nameof(available), "Property is not nullable for class DatacenterServerTypes.");

            if (availableForMigration.IsSet && availableForMigration.Value == null)
                throw new ArgumentNullException(nameof(availableForMigration), "Property is not nullable for class DatacenterServerTypes.");

            if (supported.IsSet && supported.Value == null)
                throw new ArgumentNullException(nameof(supported), "Property is not nullable for class DatacenterServerTypes.");

            return new DatacenterServerTypes(available.Value!, availableForMigration.Value!, supported.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DatacenterServerTypes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datacenterServerTypes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatacenterServerTypes datacenterServerTypes, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datacenterServerTypes, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatacenterServerTypes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datacenterServerTypes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatacenterServerTypes datacenterServerTypes, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datacenterServerTypes.Available == null)
                throw new ArgumentNullException(nameof(datacenterServerTypes.Available), "Property is required for class DatacenterServerTypes.");

            if (datacenterServerTypes.AvailableForMigration == null)
                throw new ArgumentNullException(nameof(datacenterServerTypes.AvailableForMigration), "Property is required for class DatacenterServerTypes.");

            if (datacenterServerTypes.Supported == null)
                throw new ArgumentNullException(nameof(datacenterServerTypes.Supported), "Property is required for class DatacenterServerTypes.");

            writer.WritePropertyName("available");
            JsonSerializer.Serialize(writer, datacenterServerTypes.Available, jsonSerializerOptions);
            writer.WritePropertyName("available_for_migration");
            JsonSerializer.Serialize(writer, datacenterServerTypes.AvailableForMigration, jsonSerializerOptions);
            writer.WritePropertyName("supported");
            JsonSerializer.Serialize(writer, datacenterServerTypes.Supported, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The DatacenterServerTypesSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(DatacenterServerTypes))]
    public partial class DatacenterServerTypesSerializationContext : JsonSerializerContext { }
}
