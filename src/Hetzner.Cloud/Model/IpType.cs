// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Floating IP type | Type of [Floating IP](#floating-ips) the price is for. | Type of [Primary IP](#primary-ips) the price is for. | [Primary IP](#primary-ips) type.
    /// </summary>
    /// <value>Floating IP type | Type of [Floating IP](#floating-ips) the price is for. | Type of [Primary IP](#primary-ips) the price is for. | [Primary IP](#primary-ips) type.</value>
    public enum IpType
    {
        /// <summary>
        /// Enum Ipv4 for value: ipv4
        /// </summary>
        Ipv4 = 1,

        /// <summary>
        /// Enum Ipv6 for value: ipv6
        /// </summary>
        Ipv6 = 2
    }

    /// <summary>
    /// Converts <see cref="IpType"/> to and from the JSON value
    /// </summary>
    public static class IpTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="IpType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IpType FromString(string value)
        {
            if (value.Equals("ipv4"))
                return IpType.Ipv4;

            if (value.Equals("ipv6"))
                return IpType.Ipv6;

            throw new NotImplementedException($"Could not convert value to type IpType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="IpType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IpType? FromStringOrDefault(string value)
        {
            if (value.Equals("ipv4"))
                return IpType.Ipv4;

            if (value.Equals("ipv6"))
                return IpType.Ipv6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IpType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(IpType value)
        {
            if (value == IpType.Ipv4)
                return "ipv4";

            if (value == IpType.Ipv6)
                return "ipv6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class IpTypeJsonConverter : JsonConverter<IpType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IpType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IpType? result = rawValue == null
                ? null
                : IpTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IpType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IpType ipType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ipType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpType"/>
    /// </summary>
    public class IpTypeNullableJsonConverter : JsonConverter<IpType?>
    {
        /// <summary>
        /// Returns a IpType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IpType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IpType? result = rawValue == null
                ? null
                : IpTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IpType? ipType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ipType?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The IpTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(IpType))]
    internal partial class IpTypeSerializationContext : JsonSerializerContext { }
}
