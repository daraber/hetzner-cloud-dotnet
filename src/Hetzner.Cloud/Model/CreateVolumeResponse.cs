// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Response to POST https://api.hetzner.cloud/v1/volumes
    /// </summary>
    internal partial class CreateVolumeResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVolumeResponse" /> class.
        /// </summary>
        /// <param name="action">action</param>
        /// <param name="nextActions">nextActions</param>
        /// <param name="volume">volume</param>
        [JsonConstructor]
        internal CreateVolumeResponse(Action action, List<Action> nextActions, Volume volume)
        {
            Action = action;
            NextActions = nextActions;
            Volume = volume;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public Action Action { get; set; }

        /// <summary>
        /// Gets or Sets NextActions
        /// </summary>
        [JsonPropertyName("next_actions")]
        public List<Action> NextActions { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [JsonPropertyName("volume")]
        public Volume Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateVolumeResponse {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  NextActions: ").Append(NextActions).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateVolumeResponse" />
    /// </summary>
    internal class CreateVolumeResponseJsonConverter : JsonConverter<CreateVolumeResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateVolumeResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateVolumeResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Action?> action = default;
            Option<List<Action>?> nextActions = default;
            Option<Volume?> volume = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            action = new Option<Action?>(JsonSerializer.Deserialize<Action>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "next_actions":
                            nextActions = new Option<List<Action>?>(JsonSerializer.Deserialize<List<Action>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "volume":
                            volume = new Option<Volume?>(JsonSerializer.Deserialize<Volume>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class CreateVolumeResponse.", nameof(action));

            if (!nextActions.IsSet)
                throw new ArgumentException("Property is required for class CreateVolumeResponse.", nameof(nextActions));

            if (!volume.IsSet)
                throw new ArgumentException("Property is required for class CreateVolumeResponse.", nameof(volume));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class CreateVolumeResponse.");

            if (nextActions.IsSet && nextActions.Value == null)
                throw new ArgumentNullException(nameof(nextActions), "Property is not nullable for class CreateVolumeResponse.");

            if (volume.IsSet && volume.Value == null)
                throw new ArgumentNullException(nameof(volume), "Property is not nullable for class CreateVolumeResponse.");

            return new CreateVolumeResponse(action.Value!, nextActions.Value!, volume.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateVolumeResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createVolumeResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateVolumeResponse createVolumeResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createVolumeResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateVolumeResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createVolumeResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateVolumeResponse createVolumeResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createVolumeResponse.Action == null)
                throw new ArgumentNullException(nameof(createVolumeResponse.Action), "Property is required for class CreateVolumeResponse.");

            if (createVolumeResponse.NextActions == null)
                throw new ArgumentNullException(nameof(createVolumeResponse.NextActions), "Property is required for class CreateVolumeResponse.");

            if (createVolumeResponse.Volume == null)
                throw new ArgumentNullException(nameof(createVolumeResponse.Volume), "Property is required for class CreateVolumeResponse.");

            writer.WritePropertyName("action");
            JsonSerializer.Serialize(writer, createVolumeResponse.Action, jsonSerializerOptions);
            writer.WritePropertyName("next_actions");
            JsonSerializer.Serialize(writer, createVolumeResponse.NextActions, jsonSerializerOptions);
            writer.WritePropertyName("volume");
            JsonSerializer.Serialize(writer, createVolumeResponse.Volume, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The CreateVolumeResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateVolumeResponse))]
    internal partial class CreateVolumeResponseSerializationContext : JsonSerializerContext { }
}
