// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Public Network options
    /// </summary>
    internal partial class CreateServerRequestPublicNet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateServerRequestPublicNet" /> class.
        /// </summary>
        /// <param name="enableIpv4">Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached. (default to true)</param>
        /// <param name="enableIpv6">Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached. (default to true)</param>
        /// <param name="ipv4">ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.</param>
        /// <param name="ipv6">ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.</param>
        [JsonConstructor]
        internal CreateServerRequestPublicNet(Option<bool?> enableIpv4 = default, Option<bool?> enableIpv6 = default, Option<int?> ipv4 = default, Option<int?> ipv6 = default)
        {
            EnableIpv4Option = enableIpv4;
            EnableIpv6Option = enableIpv6;
            Ipv4Option = ipv4;
            Ipv6Option = ipv6;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EnableIpv4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableIpv4Option { get; private set; }

        /// <summary>
        /// Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached.
        /// </summary>
        /// <value>Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached.</value>
        [JsonPropertyName("enable_ipv4")]
        public bool? EnableIpv4 { get { return this.EnableIpv4Option; } set { this.EnableIpv4Option = new(value); } }

        /// <summary>
        /// Used to track the state of EnableIpv6
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableIpv6Option { get; private set; }

        /// <summary>
        /// Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached.
        /// </summary>
        /// <value>Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached.</value>
        [JsonPropertyName("enable_ipv6")]
        public bool? EnableIpv6 { get { return this.EnableIpv6Option; } set { this.EnableIpv6Option = new(value); } }

        /// <summary>
        /// Used to track the state of Ipv4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Ipv4Option { get; private set; }

        /// <summary>
        /// ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.
        /// </summary>
        /// <value>ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.</value>
        [JsonPropertyName("ipv4")]
        public int? Ipv4 { get { return this.Ipv4Option; } set { this.Ipv4Option = new(value); } }

        /// <summary>
        /// Used to track the state of Ipv6
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Ipv6Option { get; private set; }

        /// <summary>
        /// ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.
        /// </summary>
        /// <value>ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.</value>
        [JsonPropertyName("ipv6")]
        public int? Ipv6 { get { return this.Ipv6Option; } set { this.Ipv6Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateServerRequestPublicNet {\n");
            sb.Append("  EnableIpv4: ").Append(EnableIpv4).Append("\n");
            sb.Append("  EnableIpv6: ").Append(EnableIpv6).Append("\n");
            sb.Append("  Ipv4: ").Append(Ipv4).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateServerRequestPublicNet" />
    /// </summary>
    internal class CreateServerRequestPublicNetJsonConverter : JsonConverter<CreateServerRequestPublicNet>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateServerRequestPublicNet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateServerRequestPublicNet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enableIpv4 = default;
            Option<bool?> enableIpv6 = default;
            Option<int?> ipv4 = default;
            Option<int?> ipv6 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enable_ipv4":
                            enableIpv4 = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enable_ipv6":
                            enableIpv6 = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ipv4":
                            ipv4 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ipv6":
                            ipv6 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enableIpv4.IsSet && enableIpv4.Value == null)
                throw new ArgumentNullException(nameof(enableIpv4), "Property is not nullable for class CreateServerRequestPublicNet.");

            if (enableIpv6.IsSet && enableIpv6.Value == null)
                throw new ArgumentNullException(nameof(enableIpv6), "Property is not nullable for class CreateServerRequestPublicNet.");

            return new CreateServerRequestPublicNet(enableIpv4, enableIpv6, ipv4, ipv6);
        }

        /// <summary>
        /// Serializes a <see cref="CreateServerRequestPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createServerRequestPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateServerRequestPublicNet createServerRequestPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createServerRequestPublicNet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateServerRequestPublicNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createServerRequestPublicNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateServerRequestPublicNet createServerRequestPublicNet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createServerRequestPublicNet.EnableIpv4Option.IsSet)
                writer.WriteBoolean("enable_ipv4", createServerRequestPublicNet.EnableIpv4Option.Value!.Value);

            if (createServerRequestPublicNet.EnableIpv6Option.IsSet)
                writer.WriteBoolean("enable_ipv6", createServerRequestPublicNet.EnableIpv6Option.Value!.Value);

            if (createServerRequestPublicNet.Ipv4Option.IsSet)
                if (createServerRequestPublicNet.Ipv4Option.Value != null)
                    writer.WriteNumber("ipv4", createServerRequestPublicNet.Ipv4Option.Value!.Value);
                else
                    writer.WriteNull("ipv4");

            if (createServerRequestPublicNet.Ipv6Option.IsSet)
                if (createServerRequestPublicNet.Ipv6Option.Value != null)
                    writer.WriteNumber("ipv6", createServerRequestPublicNet.Ipv6Option.Value!.Value);
                else
                    writer.WriteNull("ipv6");
        }
    }

    /// <summary>
    /// The CreateServerRequestPublicNetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateServerRequestPublicNet))]
    internal partial class CreateServerRequestPublicNetSerializationContext : JsonSerializerContext { }
}
