// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// A Volume is a highly-available, scalable, and SSD-based block storage for Servers. Pricing for Volumes depends on the Volume size and Location, not the actual used storage. Please see [Hetzner Wiki](https://wiki.hetzner.de/index.php/CloudServer/en#Volumes) for more details about Volumes.
    /// </summary>
    internal partial class Volume : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Volume" /> class.
        /// </summary>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="id">ID of the Volume.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="linuxDevice">Device path on the file system for the Volume</param>
        /// <param name="location">location</param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="protection">protection</param>
        /// <param name="size">Size in GB of the Volume</param>
        /// <param name="status">Current status of the Volume</param>
        /// <param name="format">Filesystem of the Volume if formatted on creation, null if not formatted on creation</param>
        /// <param name="server">ID of the Server the Volume is attached to, null if it is not attached at all</param>
        [JsonConstructor]
        internal Volume(string created, long id, Dictionary<string, string> labels, string linuxDevice, Location location, string name, Protection protection, decimal size, StatusEnum status, string? format = default, long? server = default)
        {
            Created = created;
            Id = id;
            Labels = labels;
            LinuxDevice = linuxDevice;
            Location = location;
            Name = name;
            Protection = protection;
            Size = size;
            Status = status;
            Format = format;
            Server = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Current status of the Volume
        /// </summary>
        /// <value>Current status of the Volume</value>
        internal enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            Available = 1,

            /// <summary>
            /// Enum Creating for value: creating
            /// </summary>
            Creating = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("available"))
                return StatusEnum.Available;

            if (value.Equals("creating"))
                return StatusEnum.Creating;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("available"))
                return StatusEnum.Available;

            if (value.Equals("creating"))
                return StatusEnum.Creating;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Available)
                return "available";

            if (value == StatusEnum.Creating)
                return "creating";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Current status of the Volume
        /// </summary>
        /// <value>Current status of the Volume</value>
        /* <example>available</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// ID of the Volume.
        /// </summary>
        /// <value>ID of the Volume.</value>
        /* <example>42</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Device path on the file system for the Volume
        /// </summary>
        /// <value>Device path on the file system for the Volume</value>
        /* <example>/dev/disk/by-id/scsi-0HC_Volume_4711</example> */
        [JsonPropertyName("linux_device")]
        public string LinuxDevice { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public Location Location { get; set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// Size in GB of the Volume
        /// </summary>
        /// <value>Size in GB of the Volume</value>
        /* <example>42</example> */
        [JsonPropertyName("size")]
        public decimal Size { get; set; }

        /// <summary>
        /// Filesystem of the Volume if formatted on creation, null if not formatted on creation
        /// </summary>
        /// <value>Filesystem of the Volume if formatted on creation, null if not formatted on creation</value>
        /* <example>xfs</example> */
        [JsonPropertyName("format")]
        public string? Format { get; set; }

        /// <summary>
        /// ID of the Server the Volume is attached to, null if it is not attached at all
        /// </summary>
        /// <value>ID of the Server the Volume is attached to, null if it is not attached at all</value>
        /* <example>12</example> */
        [JsonPropertyName("server")]
        public long? Server { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Volume {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LinuxDevice: ").Append(LinuxDevice).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Volume" />
    /// </summary>
    internal class VolumeJsonConverter : JsonConverter<Volume>
    {
        /// <summary>
        /// Deserializes json to <see cref="Volume" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Volume Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> created = default;
            Option<long?> id = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> linuxDevice = default;
            Option<Location?> location = default;
            Option<string?> name = default;
            Option<Protection?> protection = default;
            Option<decimal?> size = default;
            Option<Volume.StatusEnum?> status = default;
            Option<string?> format = default;
            Option<long?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "linux_device":
                            linuxDevice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<Location?>(JsonSerializer.Deserialize<Location>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "size":
                            size = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Volume.StatusEnum?>(Volume.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "format":
                            format = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "server":
                            server = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(created));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(id));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(labels));

            if (!linuxDevice.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(linuxDevice));

            if (!location.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(location));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(name));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(protection));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(size));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(status));

            if (!format.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(format));

            if (!server.IsSet)
                throw new ArgumentException("Property is required for class Volume.", nameof(server));

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Volume.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Volume.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Volume.");

            if (linuxDevice.IsSet && linuxDevice.Value == null)
                throw new ArgumentNullException(nameof(linuxDevice), "Property is not nullable for class Volume.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class Volume.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Volume.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class Volume.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class Volume.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Volume.");

            return new Volume(created.Value!, id.Value!.Value!, labels.Value!, linuxDevice.Value!, location.Value!, name.Value!, protection.Value!, size.Value!.Value!, status.Value!.Value!, format.Value!, server.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Volume" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="volume"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Volume volume, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, volume, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Volume" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="volume"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Volume volume, JsonSerializerOptions jsonSerializerOptions)
        {
            if (volume.Created == null)
                throw new ArgumentNullException(nameof(volume.Created), "Property is required for class Volume.");

            if (volume.Labels == null)
                throw new ArgumentNullException(nameof(volume.Labels), "Property is required for class Volume.");

            if (volume.LinuxDevice == null)
                throw new ArgumentNullException(nameof(volume.LinuxDevice), "Property is required for class Volume.");

            if (volume.Location == null)
                throw new ArgumentNullException(nameof(volume.Location), "Property is required for class Volume.");

            if (volume.Name == null)
                throw new ArgumentNullException(nameof(volume.Name), "Property is required for class Volume.");

            if (volume.Protection == null)
                throw new ArgumentNullException(nameof(volume.Protection), "Property is required for class Volume.");

            writer.WriteString("created", volume.Created);

            writer.WriteNumber("id", volume.Id);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, volume.Labels, jsonSerializerOptions);
            writer.WriteString("linux_device", volume.LinuxDevice);

            writer.WritePropertyName("location");
            JsonSerializer.Serialize(writer, volume.Location, jsonSerializerOptions);
            writer.WriteString("name", volume.Name);

            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, volume.Protection, jsonSerializerOptions);
            writer.WriteNumber("size", volume.Size);

            var statusRawValue = Volume.StatusEnumToJsonValue(volume.Status);
            writer.WriteString("status", statusRawValue);
            if (volume.Format != null)
                writer.WriteString("format", volume.Format);
            else
                writer.WriteNull("format");

            if (volume.Server != null)
                writer.WriteNumber("server", volume.Server.Value);
            else
                writer.WriteNull("server");
        }
    }

    /// <summary>
    /// The VolumeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Volume))]
    internal partial class VolumeSerializationContext : JsonSerializerContext { }
}
