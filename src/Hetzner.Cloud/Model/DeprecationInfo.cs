// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Describes if, when and how the resource is deprecated. If this field is set to &#x60;null&#x60; the resource is not deprecated. If a value is set, it is considered deprecated. 
    /// </summary>
    internal partial class DeprecationInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeprecationInfo" /> class.
        /// </summary>
        /// <param name="announced">Date of the deprecation announcement. </param>
        /// <param name="unavailableAfter">Date of the deprecated resource removal.  Once this date is reached, the resource will not be returned by resource type \&quot;list\&quot; endpoint, and the resource can not be used to create new resources. For example, if this is an image, you can not create new servers with this image after the mentioned date. </param>
        [JsonConstructor]
        internal DeprecationInfo(string announced, string unavailableAfter)
        {
            Announced = announced;
            UnavailableAfter = unavailableAfter;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Date of the deprecation announcement. 
        /// </summary>
        /// <value>Date of the deprecation announcement. </value>
        /* <example>2023-06-01T00:00:00+00:00</example> */
        [JsonPropertyName("announced")]
        public string Announced { get; set; }

        /// <summary>
        /// Date of the deprecated resource removal.  Once this date is reached, the resource will not be returned by resource type \&quot;list\&quot; endpoint, and the resource can not be used to create new resources. For example, if this is an image, you can not create new servers with this image after the mentioned date. 
        /// </summary>
        /// <value>Date of the deprecated resource removal.  Once this date is reached, the resource will not be returned by resource type \&quot;list\&quot; endpoint, and the resource can not be used to create new resources. For example, if this is an image, you can not create new servers with this image after the mentioned date. </value>
        /* <example>2023-09-01T00:00:00+00:00</example> */
        [JsonPropertyName("unavailable_after")]
        public string UnavailableAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeprecationInfo {\n");
            sb.Append("  Announced: ").Append(Announced).Append("\n");
            sb.Append("  UnavailableAfter: ").Append(UnavailableAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeprecationInfo" />
    /// </summary>
    internal class DeprecationInfoJsonConverter : JsonConverter<DeprecationInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DeprecationInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeprecationInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> announced = default;
            Option<string?> unavailableAfter = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "announced":
                            announced = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "unavailable_after":
                            unavailableAfter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!announced.IsSet)
                throw new ArgumentException("Property is required for class DeprecationInfo.", nameof(announced));

            if (!unavailableAfter.IsSet)
                throw new ArgumentException("Property is required for class DeprecationInfo.", nameof(unavailableAfter));

            if (announced.IsSet && announced.Value == null)
                throw new ArgumentNullException(nameof(announced), "Property is not nullable for class DeprecationInfo.");

            if (unavailableAfter.IsSet && unavailableAfter.Value == null)
                throw new ArgumentNullException(nameof(unavailableAfter), "Property is not nullable for class DeprecationInfo.");

            return new DeprecationInfo(announced.Value!, unavailableAfter.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DeprecationInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deprecationInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeprecationInfo deprecationInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deprecationInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeprecationInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deprecationInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeprecationInfo deprecationInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deprecationInfo.Announced == null)
                throw new ArgumentNullException(nameof(deprecationInfo.Announced), "Property is required for class DeprecationInfo.");

            if (deprecationInfo.UnavailableAfter == null)
                throw new ArgumentNullException(nameof(deprecationInfo.UnavailableAfter), "Property is required for class DeprecationInfo.");

            writer.WriteString("announced", deprecationInfo.Announced);

            writer.WriteString("unavailable_after", deprecationInfo.UnavailableAfter);
        }
    }

    /// <summary>
    /// The DeprecationInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(DeprecationInfo))]
    internal partial class DeprecationInfoSerializationContext : JsonSerializerContext { }
}
