// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Response to GET https://api.hetzner.cloud/v1/volumes
    /// </summary>
    public partial class ListVolumesResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListVolumesResponse" /> class.
        /// </summary>
        /// <param name="meta">meta</param>
        /// <param name="volumes">volumes</param>
        [JsonConstructor]
        public ListVolumesResponse(Meta meta, List<Volume> volumes)
        {
            Meta = meta;
            Volumes = volumes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Meta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Volumes
        /// </summary>
        [JsonPropertyName("volumes")]
        public List<Volume> Volumes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListVolumesResponse {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListVolumesResponse" />
    /// </summary>
    public class ListVolumesResponseJsonConverter : JsonConverter<ListVolumesResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListVolumesResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListVolumesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Meta?> meta = default;
            Option<List<Volume>?> volumes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "meta":
                            meta = new Option<Meta?>(JsonSerializer.Deserialize<Meta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "volumes":
                            volumes = new Option<List<Volume>?>(JsonSerializer.Deserialize<List<Volume>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!meta.IsSet)
                throw new ArgumentException("Property is required for class ListVolumesResponse.", nameof(meta));

            if (!volumes.IsSet)
                throw new ArgumentException("Property is required for class ListVolumesResponse.", nameof(volumes));

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class ListVolumesResponse.");

            if (volumes.IsSet && volumes.Value == null)
                throw new ArgumentNullException(nameof(volumes), "Property is not nullable for class ListVolumesResponse.");

            return new ListVolumesResponse(meta.Value!, volumes.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ListVolumesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listVolumesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListVolumesResponse listVolumesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listVolumesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListVolumesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listVolumesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListVolumesResponse listVolumesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listVolumesResponse.Meta == null)
                throw new ArgumentNullException(nameof(listVolumesResponse.Meta), "Property is required for class ListVolumesResponse.");

            if (listVolumesResponse.Volumes == null)
                throw new ArgumentNullException(nameof(listVolumesResponse.Volumes), "Property is required for class ListVolumesResponse.");

            writer.WritePropertyName("meta");
            JsonSerializer.Serialize(writer, listVolumesResponse.Meta, jsonSerializerOptions);
            writer.WritePropertyName("volumes");
            JsonSerializer.Serialize(writer, listVolumesResponse.Volumes, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The ListVolumesResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ListVolumesResponse))]
    public partial class ListVolumesResponseSerializationContext : JsonSerializerContext { }
}
