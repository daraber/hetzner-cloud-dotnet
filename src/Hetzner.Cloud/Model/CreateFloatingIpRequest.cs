// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Request for POST https://api.hetzner.cloud/v1/floating_ips
    /// </summary>
    public partial class CreateFloatingIpRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFloatingIpRequest" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="description">Description of the Resource.</param>
        /// <param name="homeLocation">Home [Location](#locations) for the [Floating IP](#floating-ips).  Either the ID or the name of the [Location](#locations).  Only optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations). </param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the Resource. Must be unique per Project.</param>
        /// <param name="server">[Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. </param>
        [JsonConstructor]
        public CreateFloatingIpRequest(IpType type, Option<string?> description = default, Option<string?> homeLocation = default, Option<Dictionary<string, string>?> labels = default, Option<string?> name = default, Option<long?> server = default)
        {
            Type = type;
            DescriptionOption = description;
            HomeLocationOption = homeLocation;
            LabelsOption = labels;
            NameOption = name;
            ServerOption = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public IpType Type { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the Resource.
        /// </summary>
        /// <value>Description of the Resource.</value>
        /* <example>This describes my resource</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomeLocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HomeLocationOption { get; private set; }

        /// <summary>
        /// Home [Location](#locations) for the [Floating IP](#floating-ips).  Either the ID or the name of the [Location](#locations).  Only optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations). 
        /// </summary>
        /// <value>Home [Location](#locations) for the [Floating IP](#floating-ips).  Either the ID or the name of the [Location](#locations).  Only optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations). </value>
        /* <example>fsn1</example> */
        [JsonPropertyName("home_location")]
        public string? HomeLocation { get { return this.HomeLocationOption; } set { this.HomeLocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> LabelsOption { get; private set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name of the Resource. Must be unique per Project.
        /// </summary>
        /// <value>Name of the Resource. Must be unique per Project.</value>
        /* <example>my-resource</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ServerOption { get; private set; }

        /// <summary>
        /// [Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. 
        /// </summary>
        /// <value>[Server](#servers) the [Floating IP](#floating-ips) is assigned to.  &#x60;null&#x60; if not assigned. </value>
        /* <example>42</example> */
        [JsonPropertyName("server")]
        public long? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFloatingIpRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateFloatingIpRequest" />
    /// </summary>
    public class CreateFloatingIpRequestJsonConverter : JsonConverter<CreateFloatingIpRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateFloatingIpRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateFloatingIpRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IpType?> type = default;
            Option<string?> description = default;
            Option<string?> homeLocation = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<long?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IpType?>(IpTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "home_location":
                            homeLocation = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "server":
                            server = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreateFloatingIpRequest.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateFloatingIpRequest.");

            if (homeLocation.IsSet && homeLocation.Value == null)
                throw new ArgumentNullException(nameof(homeLocation), "Property is not nullable for class CreateFloatingIpRequest.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class CreateFloatingIpRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateFloatingIpRequest.");

            return new CreateFloatingIpRequest(type.Value!.Value!, description, homeLocation, labels, name, server);
        }

        /// <summary>
        /// Serializes a <see cref="CreateFloatingIpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFloatingIpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateFloatingIpRequest createFloatingIpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createFloatingIpRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateFloatingIpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFloatingIpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateFloatingIpRequest createFloatingIpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createFloatingIpRequest.HomeLocationOption.IsSet && createFloatingIpRequest.HomeLocation == null)
                throw new ArgumentNullException(nameof(createFloatingIpRequest.HomeLocation), "Property is required for class CreateFloatingIpRequest.");

            if (createFloatingIpRequest.LabelsOption.IsSet && createFloatingIpRequest.Labels == null)
                throw new ArgumentNullException(nameof(createFloatingIpRequest.Labels), "Property is required for class CreateFloatingIpRequest.");

            if (createFloatingIpRequest.NameOption.IsSet && createFloatingIpRequest.Name == null)
                throw new ArgumentNullException(nameof(createFloatingIpRequest.Name), "Property is required for class CreateFloatingIpRequest.");

            var typeRawValue = IpTypeValueConverter.ToJsonValue(createFloatingIpRequest.Type);
            writer.WriteString("type", typeRawValue);

            if (createFloatingIpRequest.DescriptionOption.IsSet)
                if (createFloatingIpRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", createFloatingIpRequest.Description);
                else
                    writer.WriteNull("description");

            if (createFloatingIpRequest.HomeLocationOption.IsSet)
                writer.WriteString("home_location", createFloatingIpRequest.HomeLocation);

            if (createFloatingIpRequest.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, createFloatingIpRequest.Labels, jsonSerializerOptions);
            }
            if (createFloatingIpRequest.NameOption.IsSet)
                writer.WriteString("name", createFloatingIpRequest.Name);

            if (createFloatingIpRequest.ServerOption.IsSet)
                if (createFloatingIpRequest.ServerOption.Value != null)
                    writer.WriteNumber("server", createFloatingIpRequest.ServerOption.Value!.Value);
                else
                    writer.WriteNull("server");
        }
    }

    /// <summary>
    /// The CreateFloatingIpRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreateFloatingIpRequest))]
    public partial class CreateFloatingIpRequestSerializationContext : JsonSerializerContext { }
}
