// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Configuration option for protocols http and https
    /// </summary>
    public partial class Http : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Http" /> class.
        /// </summary>
        /// <param name="certificates">IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if &#x60;protocol&#x60; is &#x60;http&#x60;.</param>
        /// <param name="cookieLifetime">Lifetime of the cookie used for sticky sessions (in seconds). (default to 300)</param>
        /// <param name="cookieName">Name of the cookie used for sticky sessions. (default to &quot;HCLBSTICKY&quot;)</param>
        /// <param name="redirectHttp">Redirect HTTP requests to HTTPS. Only available if &#x60;protocol&#x60; is &#x60;https&#x60;. (default to false)</param>
        /// <param name="stickySessions">Use sticky sessions. Only available if &#x60;protocol&#x60; is &#x60;http&#x60; or &#x60;https&#x60;. (default to false)</param>
        [JsonConstructor]
        public Http(Option<List<long>?> certificates = default, Option<int?> cookieLifetime = default, Option<string?> cookieName = default, Option<bool?> redirectHttp = default, Option<bool?> stickySessions = default)
        {
            CertificatesOption = certificates;
            CookieLifetimeOption = cookieLifetime;
            CookieNameOption = cookieName;
            RedirectHttpOption = redirectHttp;
            StickySessionsOption = stickySessions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Certificates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> CertificatesOption { get; private set; }

        /// <summary>
        /// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if &#x60;protocol&#x60; is &#x60;http&#x60;.
        /// </summary>
        /// <value>IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if &#x60;protocol&#x60; is &#x60;http&#x60;.</value>
        /* <example>[897]</example> */
        [JsonPropertyName("certificates")]
        public List<long>? Certificates { get { return this.CertificatesOption; } set { this.CertificatesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CookieLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CookieLifetimeOption { get; private set; }

        /// <summary>
        /// Lifetime of the cookie used for sticky sessions (in seconds).
        /// </summary>
        /// <value>Lifetime of the cookie used for sticky sessions (in seconds).</value>
        /* <example>300</example> */
        [JsonPropertyName("cookie_lifetime")]
        public int? CookieLifetime { get { return this.CookieLifetimeOption; } set { this.CookieLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CookieName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CookieNameOption { get; private set; }

        /// <summary>
        /// Name of the cookie used for sticky sessions.
        /// </summary>
        /// <value>Name of the cookie used for sticky sessions.</value>
        /* <example>HCLBSTICKY</example> */
        [JsonPropertyName("cookie_name")]
        public string? CookieName { get { return this.CookieNameOption; } set { this.CookieNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RedirectHttp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RedirectHttpOption { get; private set; }

        /// <summary>
        /// Redirect HTTP requests to HTTPS. Only available if &#x60;protocol&#x60; is &#x60;https&#x60;.
        /// </summary>
        /// <value>Redirect HTTP requests to HTTPS. Only available if &#x60;protocol&#x60; is &#x60;https&#x60;.</value>
        /* <example>true</example> */
        [JsonPropertyName("redirect_http")]
        public bool? RedirectHttp { get { return this.RedirectHttpOption; } set { this.RedirectHttpOption = new(value); } }

        /// <summary>
        /// Used to track the state of StickySessions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StickySessionsOption { get; private set; }

        /// <summary>
        /// Use sticky sessions. Only available if &#x60;protocol&#x60; is &#x60;http&#x60; or &#x60;https&#x60;.
        /// </summary>
        /// <value>Use sticky sessions. Only available if &#x60;protocol&#x60; is &#x60;http&#x60; or &#x60;https&#x60;.</value>
        /* <example>true</example> */
        [JsonPropertyName("sticky_sessions")]
        public bool? StickySessions { get { return this.StickySessionsOption; } set { this.StickySessionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Http {\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  CookieLifetime: ").Append(CookieLifetime).Append("\n");
            sb.Append("  CookieName: ").Append(CookieName).Append("\n");
            sb.Append("  RedirectHttp: ").Append(RedirectHttp).Append("\n");
            sb.Append("  StickySessions: ").Append(StickySessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Http" />
    /// </summary>
    public class HttpJsonConverter : JsonConverter<Http>
    {
        /// <summary>
        /// Deserializes json to <see cref="Http" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Http Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<long>?> certificates = default;
            Option<int?> cookieLifetime = default;
            Option<string?> cookieName = default;
            Option<bool?> redirectHttp = default;
            Option<bool?> stickySessions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "certificates":
                            certificates = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cookie_lifetime":
                            cookieLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "cookie_name":
                            cookieName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "redirect_http":
                            redirectHttp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sticky_sessions":
                            stickySessions = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (certificates.IsSet && certificates.Value == null)
                throw new ArgumentNullException(nameof(certificates), "Property is not nullable for class Http.");

            if (cookieLifetime.IsSet && cookieLifetime.Value == null)
                throw new ArgumentNullException(nameof(cookieLifetime), "Property is not nullable for class Http.");

            if (cookieName.IsSet && cookieName.Value == null)
                throw new ArgumentNullException(nameof(cookieName), "Property is not nullable for class Http.");

            if (redirectHttp.IsSet && redirectHttp.Value == null)
                throw new ArgumentNullException(nameof(redirectHttp), "Property is not nullable for class Http.");

            if (stickySessions.IsSet && stickySessions.Value == null)
                throw new ArgumentNullException(nameof(stickySessions), "Property is not nullable for class Http.");

            return new Http(certificates, cookieLifetime, cookieName, redirectHttp, stickySessions);
        }

        /// <summary>
        /// Serializes a <see cref="Http" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="http"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Http http, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, http, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Http" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="http"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Http http, JsonSerializerOptions jsonSerializerOptions)
        {
            if (http.CertificatesOption.IsSet && http.Certificates == null)
                throw new ArgumentNullException(nameof(http.Certificates), "Property is required for class Http.");

            if (http.CookieNameOption.IsSet && http.CookieName == null)
                throw new ArgumentNullException(nameof(http.CookieName), "Property is required for class Http.");

            if (http.CertificatesOption.IsSet)
            {
                writer.WritePropertyName("certificates");
                JsonSerializer.Serialize(writer, http.Certificates, jsonSerializerOptions);
            }
            if (http.CookieLifetimeOption.IsSet)
                writer.WriteNumber("cookie_lifetime", http.CookieLifetimeOption.Value!.Value);

            if (http.CookieNameOption.IsSet)
                writer.WriteString("cookie_name", http.CookieName);

            if (http.RedirectHttpOption.IsSet)
                writer.WriteBoolean("redirect_http", http.RedirectHttpOption.Value!.Value);

            if (http.StickySessionsOption.IsSet)
                writer.WriteBoolean("sticky_sessions", http.StickySessionsOption.Value!.Value);
        }
    }

    /// <summary>
    /// The HttpSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Http))]
    public partial class HttpSerializationContext : JsonSerializerContext { }
}
