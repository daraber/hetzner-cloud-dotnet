// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Network
    /// </summary>
    internal partial class Network : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Network" /> class.
        /// </summary>
        /// <param name="created">Point in time when the Resource was created (in ISO-8601 format).</param>
        /// <param name="exposeRoutesToVswitch">Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.</param>
        /// <param name="id">ID of the [Network](#networks).</param>
        /// <param name="ipRange">IP range of the [Network](#networks). Uses CIDR notation.</param>
        /// <param name="labels">User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </param>
        /// <param name="name">Name of the [Network](#networks).</param>
        /// <param name="protection">protection</param>
        /// <param name="routes">Array of routes set in this [Network](#networks).</param>
        /// <param name="servers">Array of IDs of [Servers](#servers) attached to this [Network](#networks).</param>
        /// <param name="subnets">List of subnets allocated in this [Network](#networks).</param>
        /// <param name="loadBalancers">Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).</param>
        [JsonConstructor]
        internal Network(string created, bool exposeRoutesToVswitch, long id, string ipRange, Dictionary<string, string> labels, string name, Protection protection, List<Route> routes, List<long> servers, List<SubnetWithGateway> subnets, Option<List<long>?> loadBalancers = default)
        {
            Created = created;
            ExposeRoutesToVswitch = exposeRoutesToVswitch;
            Id = id;
            IpRange = ipRange;
            Labels = labels;
            Name = name;
            Protection = protection;
            Routes = routes;
            Servers = servers;
            Subnets = subnets;
            LoadBalancersOption = loadBalancers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Point in time when the Resource was created (in ISO-8601 format).
        /// </summary>
        /// <value>Point in time when the Resource was created (in ISO-8601 format).</value>
        /* <example>2016-01-30T23:55:00+00:00</example> */
        [JsonPropertyName("created")]
        public string Created { get; set; }

        /// <summary>
        /// Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.
        /// </summary>
        /// <value>Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.</value>
        /* <example>false</example> */
        [JsonPropertyName("expose_routes_to_vswitch")]
        public bool ExposeRoutesToVswitch { get; set; }

        /// <summary>
        /// ID of the [Network](#networks).
        /// </summary>
        /// <value>ID of the [Network](#networks).</value>
        /* <example>4711</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// IP range of the [Network](#networks). Uses CIDR notation.
        /// </summary>
        /// <value>IP range of the [Network](#networks). Uses CIDR notation.</value>
        /* <example>10.0.0.0/16</example> */
        [JsonPropertyName("ip_range")]
        public string IpRange { get; set; }

        /// <summary>
        /// User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. 
        /// </summary>
        /// <value>User-defined labels (&#x60;key/value&#x60; pairs) for the Resource. For more information, see \&quot;[Labels](#labels)\&quot;. </value>
        /* <example>{&quot;environment&quot;:&quot;prod&quot;,&quot;example.com/my&quot;:&quot;label&quot;,&quot;just-a-key&quot;:&quot;&quot;}</example> */
        [JsonPropertyName("labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Name of the [Network](#networks).
        /// </summary>
        /// <value>Name of the [Network](#networks).</value>
        /* <example>mynet</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protection
        /// </summary>
        [JsonPropertyName("protection")]
        public Protection Protection { get; set; }

        /// <summary>
        /// Array of routes set in this [Network](#networks).
        /// </summary>
        /// <value>Array of routes set in this [Network](#networks).</value>
        [JsonPropertyName("routes")]
        public List<Route> Routes { get; set; }

        /// <summary>
        /// Array of IDs of [Servers](#servers) attached to this [Network](#networks).
        /// </summary>
        /// <value>Array of IDs of [Servers](#servers) attached to this [Network](#networks).</value>
        /* <example>[42]</example> */
        [JsonPropertyName("servers")]
        public List<long> Servers { get; set; }

        /// <summary>
        /// List of subnets allocated in this [Network](#networks).
        /// </summary>
        /// <value>List of subnets allocated in this [Network](#networks).</value>
        [JsonPropertyName("subnets")]
        public List<SubnetWithGateway> Subnets { get; set; }

        /// <summary>
        /// Used to track the state of LoadBalancers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> LoadBalancersOption { get; private set; }

        /// <summary>
        /// Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).
        /// </summary>
        /// <value>Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).</value>
        /* <example>[42]</example> */
        [JsonPropertyName("load_balancers")]
        public List<long>? LoadBalancers { get { return this.LoadBalancersOption; } set { this.LoadBalancersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Network {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ExposeRoutesToVswitch: ").Append(ExposeRoutesToVswitch).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpRange: ").Append(IpRange).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Servers: ").Append(Servers).Append("\n");
            sb.Append("  Subnets: ").Append(Subnets).Append("\n");
            sb.Append("  LoadBalancers: ").Append(LoadBalancers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Network" />
    /// </summary>
    internal class NetworkJsonConverter : JsonConverter<Network>
    {
        /// <summary>
        /// Deserializes json to <see cref="Network" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Network Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> created = default;
            Option<bool?> exposeRoutesToVswitch = default;
            Option<long?> id = default;
            Option<string?> ipRange = default;
            Option<Dictionary<string, string>?> labels = default;
            Option<string?> name = default;
            Option<Protection?> protection = default;
            Option<List<Route>?> routes = default;
            Option<List<long>?> servers = default;
            Option<List<SubnetWithGateway>?> subnets = default;
            Option<List<long>?> loadBalancers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expose_routes_to_vswitch":
                            exposeRoutesToVswitch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ip_range":
                            ipRange = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protection":
                            protection = new Option<Protection?>(JsonSerializer.Deserialize<Protection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "routes":
                            routes = new Option<List<Route>?>(JsonSerializer.Deserialize<List<Route>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "servers":
                            servers = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "subnets":
                            subnets = new Option<List<SubnetWithGateway>?>(JsonSerializer.Deserialize<List<SubnetWithGateway>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "load_balancers":
                            loadBalancers = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(created));

            if (!exposeRoutesToVswitch.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(exposeRoutesToVswitch));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(id));

            if (!ipRange.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(ipRange));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(name));

            if (!protection.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(protection));

            if (!routes.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(routes));

            if (!servers.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(servers));

            if (!subnets.IsSet)
                throw new ArgumentException("Property is required for class Network.", nameof(subnets));

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Network.");

            if (exposeRoutesToVswitch.IsSet && exposeRoutesToVswitch.Value == null)
                throw new ArgumentNullException(nameof(exposeRoutesToVswitch), "Property is not nullable for class Network.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Network.");

            if (ipRange.IsSet && ipRange.Value == null)
                throw new ArgumentNullException(nameof(ipRange), "Property is not nullable for class Network.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Network.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Network.");

            if (protection.IsSet && protection.Value == null)
                throw new ArgumentNullException(nameof(protection), "Property is not nullable for class Network.");

            if (routes.IsSet && routes.Value == null)
                throw new ArgumentNullException(nameof(routes), "Property is not nullable for class Network.");

            if (servers.IsSet && servers.Value == null)
                throw new ArgumentNullException(nameof(servers), "Property is not nullable for class Network.");

            if (subnets.IsSet && subnets.Value == null)
                throw new ArgumentNullException(nameof(subnets), "Property is not nullable for class Network.");

            if (loadBalancers.IsSet && loadBalancers.Value == null)
                throw new ArgumentNullException(nameof(loadBalancers), "Property is not nullable for class Network.");

            return new Network(created.Value!, exposeRoutesToVswitch.Value!.Value!, id.Value!.Value!, ipRange.Value!, labels.Value!, name.Value!, protection.Value!, routes.Value!, servers.Value!, subnets.Value!, loadBalancers);
        }

        /// <summary>
        /// Serializes a <see cref="Network" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="network"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Network network, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, network, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Network" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="network"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Network network, JsonSerializerOptions jsonSerializerOptions)
        {
            if (network.Created == null)
                throw new ArgumentNullException(nameof(network.Created), "Property is required for class Network.");

            if (network.IpRange == null)
                throw new ArgumentNullException(nameof(network.IpRange), "Property is required for class Network.");

            if (network.Labels == null)
                throw new ArgumentNullException(nameof(network.Labels), "Property is required for class Network.");

            if (network.Name == null)
                throw new ArgumentNullException(nameof(network.Name), "Property is required for class Network.");

            if (network.Protection == null)
                throw new ArgumentNullException(nameof(network.Protection), "Property is required for class Network.");

            if (network.Routes == null)
                throw new ArgumentNullException(nameof(network.Routes), "Property is required for class Network.");

            if (network.Servers == null)
                throw new ArgumentNullException(nameof(network.Servers), "Property is required for class Network.");

            if (network.Subnets == null)
                throw new ArgumentNullException(nameof(network.Subnets), "Property is required for class Network.");

            if (network.LoadBalancersOption.IsSet && network.LoadBalancers == null)
                throw new ArgumentNullException(nameof(network.LoadBalancers), "Property is required for class Network.");

            writer.WriteString("created", network.Created);

            writer.WriteBoolean("expose_routes_to_vswitch", network.ExposeRoutesToVswitch);

            writer.WriteNumber("id", network.Id);

            writer.WriteString("ip_range", network.IpRange);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, network.Labels, jsonSerializerOptions);
            writer.WriteString("name", network.Name);

            writer.WritePropertyName("protection");
            JsonSerializer.Serialize(writer, network.Protection, jsonSerializerOptions);
            writer.WritePropertyName("routes");
            JsonSerializer.Serialize(writer, network.Routes, jsonSerializerOptions);
            writer.WritePropertyName("servers");
            JsonSerializer.Serialize(writer, network.Servers, jsonSerializerOptions);
            writer.WritePropertyName("subnets");
            JsonSerializer.Serialize(writer, network.Subnets, jsonSerializerOptions);
            if (network.LoadBalancersOption.IsSet)
            {
                writer.WritePropertyName("load_balancers");
                JsonSerializer.Serialize(writer, network.LoadBalancers, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The NetworkSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Network))]
    internal partial class NetworkSerializationContext : JsonSerializerContext { }
}
