// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Hourly price in this [Location](#locations). | Monthly price in this [Location](#locations). | Additional traffic price per TB in this [Location](#locations). | Price of one [Floating IP](#floating-ips) per month. | Price of [Images](#images) per GB/month. | Price of [Volumes](#volumes) per GB/month.
    /// </summary>
    public partial class Price : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        /// <param name="gross">Price with VAT added.</param>
        /// <param name="net">Price without VAT.</param>
        [JsonConstructor]
        public Price(decimal gross, decimal net)
        {
            Gross = gross;
            Net = net;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Price with VAT added.
        /// </summary>
        /// <value>Price with VAT added.</value>
        /* <example>1.1900</example> */
        [JsonPropertyName("gross")]
        public decimal Gross { get; set; }

        /// <summary>
        /// Price without VAT.
        /// </summary>
        /// <value>Price without VAT.</value>
        /* <example>1.0000</example> */
        [JsonPropertyName("net")]
        public decimal Net { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Price" />
    /// </summary>
    public class PriceJsonConverter : JsonConverter<Price>
    {
        /// <summary>
        /// Deserializes json to <see cref="Price" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Price Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> gross = default;
            Option<decimal?> net = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gross":
                            gross = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "net":
                            net = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gross.IsSet)
                throw new ArgumentException("Property is required for class Price.", nameof(gross));

            if (!net.IsSet)
                throw new ArgumentException("Property is required for class Price.", nameof(net));

            if (gross.IsSet && gross.Value == null)
                throw new ArgumentNullException(nameof(gross), "Property is not nullable for class Price.");

            if (net.IsSet && net.Value == null)
                throw new ArgumentNullException(nameof(net), "Property is not nullable for class Price.");

            return new Price(gross.Value!.Value!, net.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Price" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="price"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Price price, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, price, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Price" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="price"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Price price, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("gross", price.Gross.ToString());

            writer.WriteString("net", price.Net.ToString());
        }
    }

    /// <summary>
    /// The PriceSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Price))]
    public partial class PriceSerializationContext : JsonSerializerContext { }
}
