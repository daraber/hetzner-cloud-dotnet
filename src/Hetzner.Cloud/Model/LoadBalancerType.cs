// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// LoadBalancerType
    /// </summary>
    internal partial class LoadBalancerType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerType" /> class.
        /// </summary>
        /// <param name="description">Description of the Load Balancer type</param>
        /// <param name="id">ID of the Load Balancer type</param>
        /// <param name="maxAssignedCertificates">Number of SSL Certificates that can be assigned to a single Load Balancer</param>
        /// <param name="maxConnections">Number of maximum simultaneous open connections</param>
        /// <param name="maxServices">Number of services a Load Balancer of this type can have</param>
        /// <param name="maxTargets">Number of targets a single Load Balancer can have</param>
        /// <param name="name">Unique identifier of the Load Balancer type</param>
        /// <param name="prices">Price per [Location](#locations).</param>
        /// <param name="deprecated">Point in time when the Load Balancer type is deprecated (in ISO-8601 format)</param>
        [JsonConstructor]
        internal LoadBalancerType(string description, long id, long maxAssignedCertificates, long maxConnections, long maxServices, long maxTargets, string name, List<PricePerTime> prices, string? deprecated = default)
        {
            Description = description;
            Id = id;
            MaxAssignedCertificates = maxAssignedCertificates;
            MaxConnections = maxConnections;
            MaxServices = maxServices;
            MaxTargets = maxTargets;
            Name = name;
            Prices = prices;
            Deprecated = deprecated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Description of the Load Balancer type
        /// </summary>
        /// <value>Description of the Load Balancer type</value>
        /* <example>LB11</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// ID of the Load Balancer type
        /// </summary>
        /// <value>ID of the Load Balancer type</value>
        /* <example>1</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Number of SSL Certificates that can be assigned to a single Load Balancer
        /// </summary>
        /// <value>Number of SSL Certificates that can be assigned to a single Load Balancer</value>
        /* <example>10</example> */
        [JsonPropertyName("max_assigned_certificates")]
        public long MaxAssignedCertificates { get; set; }

        /// <summary>
        /// Number of maximum simultaneous open connections
        /// </summary>
        /// <value>Number of maximum simultaneous open connections</value>
        /* <example>20000</example> */
        [JsonPropertyName("max_connections")]
        public long MaxConnections { get; set; }

        /// <summary>
        /// Number of services a Load Balancer of this type can have
        /// </summary>
        /// <value>Number of services a Load Balancer of this type can have</value>
        /* <example>5</example> */
        [JsonPropertyName("max_services")]
        public long MaxServices { get; set; }

        /// <summary>
        /// Number of targets a single Load Balancer can have
        /// </summary>
        /// <value>Number of targets a single Load Balancer can have</value>
        /* <example>25</example> */
        [JsonPropertyName("max_targets")]
        public long MaxTargets { get; set; }

        /// <summary>
        /// Unique identifier of the Load Balancer type
        /// </summary>
        /// <value>Unique identifier of the Load Balancer type</value>
        /* <example>lb11</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Price per [Location](#locations).
        /// </summary>
        /// <value>Price per [Location](#locations).</value>
        [JsonPropertyName("prices")]
        public List<PricePerTime> Prices { get; set; }

        /// <summary>
        /// Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
        /// </summary>
        /// <value>Point in time when the Load Balancer type is deprecated (in ISO-8601 format)</value>
        /* <example>2016-01-30T23:50:00+00:00</example> */
        [JsonPropertyName("deprecated")]
        public string? Deprecated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadBalancerType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxAssignedCertificates: ").Append(MaxAssignedCertificates).Append("\n");
            sb.Append("  MaxConnections: ").Append(MaxConnections).Append("\n");
            sb.Append("  MaxServices: ").Append(MaxServices).Append("\n");
            sb.Append("  MaxTargets: ").Append(MaxTargets).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)9007199254740991)
            {
                yield return new ValidationResult("Invalid value for Id, must be a value less than or equal to 9007199254740991.", new [] { "Id" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoadBalancerType" />
    /// </summary>
    internal class LoadBalancerTypeJsonConverter : JsonConverter<LoadBalancerType>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoadBalancerType" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoadBalancerType Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<long?> id = default;
            Option<long?> maxAssignedCertificates = default;
            Option<long?> maxConnections = default;
            Option<long?> maxServices = default;
            Option<long?> maxTargets = default;
            Option<string?> name = default;
            Option<List<PricePerTime>?> prices = default;
            Option<string?> deprecated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "max_assigned_certificates":
                            maxAssignedCertificates = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "max_connections":
                            maxConnections = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "max_services":
                            maxServices = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "max_targets":
                            maxTargets = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prices":
                            prices = new Option<List<PricePerTime>?>(JsonSerializer.Deserialize<List<PricePerTime>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deprecated":
                            deprecated = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(description));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(id));

            if (!maxAssignedCertificates.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(maxAssignedCertificates));

            if (!maxConnections.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(maxConnections));

            if (!maxServices.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(maxServices));

            if (!maxTargets.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(maxTargets));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(name));

            if (!prices.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(prices));

            if (!deprecated.IsSet)
                throw new ArgumentException("Property is required for class LoadBalancerType.", nameof(deprecated));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class LoadBalancerType.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LoadBalancerType.");

            if (maxAssignedCertificates.IsSet && maxAssignedCertificates.Value == null)
                throw new ArgumentNullException(nameof(maxAssignedCertificates), "Property is not nullable for class LoadBalancerType.");

            if (maxConnections.IsSet && maxConnections.Value == null)
                throw new ArgumentNullException(nameof(maxConnections), "Property is not nullable for class LoadBalancerType.");

            if (maxServices.IsSet && maxServices.Value == null)
                throw new ArgumentNullException(nameof(maxServices), "Property is not nullable for class LoadBalancerType.");

            if (maxTargets.IsSet && maxTargets.Value == null)
                throw new ArgumentNullException(nameof(maxTargets), "Property is not nullable for class LoadBalancerType.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class LoadBalancerType.");

            if (prices.IsSet && prices.Value == null)
                throw new ArgumentNullException(nameof(prices), "Property is not nullable for class LoadBalancerType.");

            return new LoadBalancerType(description.Value!, id.Value!.Value!, maxAssignedCertificates.Value!.Value!, maxConnections.Value!.Value!, maxServices.Value!.Value!, maxTargets.Value!.Value!, name.Value!, prices.Value!, deprecated.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LoadBalancerType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoadBalancerType loadBalancerType, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loadBalancerType, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoadBalancerType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loadBalancerType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoadBalancerType loadBalancerType, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loadBalancerType.Description == null)
                throw new ArgumentNullException(nameof(loadBalancerType.Description), "Property is required for class LoadBalancerType.");

            if (loadBalancerType.Name == null)
                throw new ArgumentNullException(nameof(loadBalancerType.Name), "Property is required for class LoadBalancerType.");

            if (loadBalancerType.Prices == null)
                throw new ArgumentNullException(nameof(loadBalancerType.Prices), "Property is required for class LoadBalancerType.");

            writer.WriteString("description", loadBalancerType.Description);

            writer.WriteNumber("id", loadBalancerType.Id);

            writer.WriteNumber("max_assigned_certificates", loadBalancerType.MaxAssignedCertificates);

            writer.WriteNumber("max_connections", loadBalancerType.MaxConnections);

            writer.WriteNumber("max_services", loadBalancerType.MaxServices);

            writer.WriteNumber("max_targets", loadBalancerType.MaxTargets);

            writer.WriteString("name", loadBalancerType.Name);

            writer.WritePropertyName("prices");
            JsonSerializer.Serialize(writer, loadBalancerType.Prices, jsonSerializerOptions);
            if (loadBalancerType.Deprecated != null)
                writer.WriteString("deprecated", loadBalancerType.Deprecated);
            else
                writer.WriteNull("deprecated");
        }
    }

    /// <summary>
    /// The LoadBalancerTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LoadBalancerType))]
    internal partial class LoadBalancerTypeSerializationContext : JsonSerializerContext { }
}
