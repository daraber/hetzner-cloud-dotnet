// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// ServerPrivateNet
    /// </summary>
    public partial class ServerPrivateNet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerPrivateNet" /> class.
        /// </summary>
        /// <param name="aliasIps">Additional IP addresses of the server on the network.</param>
        /// <param name="ip">The server IP address on the network.</param>
        /// <param name="macAddress">The server MAC address on the network.</param>
        /// <param name="network">The Network ID the server is attached to.</param>
        [JsonConstructor]
        public ServerPrivateNet(Option<List<string>?> aliasIps = default, Option<string?> ip = default, Option<string?> macAddress = default, Option<long?> network = default)
        {
            AliasIpsOption = aliasIps;
            IpOption = ip;
            MacAddressOption = macAddress;
            NetworkOption = network;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AliasIps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AliasIpsOption { get; private set; }

        /// <summary>
        /// Additional IP addresses of the server on the network.
        /// </summary>
        /// <value>Additional IP addresses of the server on the network.</value>
        /* <example>[&quot;10.0.0.3&quot;,&quot;10.0.0.4&quot;]</example> */
        [JsonPropertyName("alias_ips")]
        public List<string>? AliasIps { get { return this.AliasIpsOption; } set { this.AliasIpsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// The server IP address on the network.
        /// </summary>
        /// <value>The server IP address on the network.</value>
        /* <example>10.0.0.2</example> */
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Used to track the state of MacAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MacAddressOption { get; private set; }

        /// <summary>
        /// The server MAC address on the network.
        /// </summary>
        /// <value>The server MAC address on the network.</value>
        /* <example>86:00:ff:2a:7d:e1</example> */
        [JsonPropertyName("mac_address")]
        public string? MacAddress { get { return this.MacAddressOption; } set { this.MacAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NetworkOption { get; private set; }

        /// <summary>
        /// The Network ID the server is attached to.
        /// </summary>
        /// <value>The Network ID the server is attached to.</value>
        /* <example>4711</example> */
        [JsonPropertyName("network")]
        public long? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerPrivateNet {\n");
            sb.Append("  AliasIps: ").Append(AliasIps).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerPrivateNet" />
    /// </summary>
    public class ServerPrivateNetJsonConverter : JsonConverter<ServerPrivateNet>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerPrivateNet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerPrivateNet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> aliasIps = default;
            Option<string?> ip = default;
            Option<string?> macAddress = default;
            Option<long?> network = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alias_ips":
                            aliasIps = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mac_address":
                            macAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network":
                            network = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aliasIps.IsSet && aliasIps.Value == null)
                throw new ArgumentNullException(nameof(aliasIps), "Property is not nullable for class ServerPrivateNet.");

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class ServerPrivateNet.");

            if (macAddress.IsSet && macAddress.Value == null)
                throw new ArgumentNullException(nameof(macAddress), "Property is not nullable for class ServerPrivateNet.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class ServerPrivateNet.");

            return new ServerPrivateNet(aliasIps, ip, macAddress, network);
        }

        /// <summary>
        /// Serializes a <see cref="ServerPrivateNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPrivateNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerPrivateNet serverPrivateNet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverPrivateNet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerPrivateNet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverPrivateNet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerPrivateNet serverPrivateNet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverPrivateNet.AliasIpsOption.IsSet && serverPrivateNet.AliasIps == null)
                throw new ArgumentNullException(nameof(serverPrivateNet.AliasIps), "Property is required for class ServerPrivateNet.");

            if (serverPrivateNet.IpOption.IsSet && serverPrivateNet.Ip == null)
                throw new ArgumentNullException(nameof(serverPrivateNet.Ip), "Property is required for class ServerPrivateNet.");

            if (serverPrivateNet.MacAddressOption.IsSet && serverPrivateNet.MacAddress == null)
                throw new ArgumentNullException(nameof(serverPrivateNet.MacAddress), "Property is required for class ServerPrivateNet.");

            if (serverPrivateNet.AliasIpsOption.IsSet)
            {
                writer.WritePropertyName("alias_ips");
                JsonSerializer.Serialize(writer, serverPrivateNet.AliasIps, jsonSerializerOptions);
            }
            if (serverPrivateNet.IpOption.IsSet)
                writer.WriteString("ip", serverPrivateNet.Ip);

            if (serverPrivateNet.MacAddressOption.IsSet)
                writer.WriteString("mac_address", serverPrivateNet.MacAddress);

            if (serverPrivateNet.NetworkOption.IsSet)
                writer.WriteNumber("network", serverPrivateNet.NetworkOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ServerPrivateNetSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ServerPrivateNet))]
    public partial class ServerPrivateNetSerializationContext : JsonSerializerContext { }
}
