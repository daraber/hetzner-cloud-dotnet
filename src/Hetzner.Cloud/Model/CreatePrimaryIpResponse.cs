// <auto-generated>
/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Hetzner.Cloud.Client;

namespace Hetzner.Cloud.Model
{
    /// <summary>
    /// Response to POST https://api.hetzner.cloud/v1/primary_ips
    /// </summary>
    public partial class CreatePrimaryIpResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePrimaryIpResponse" /> class.
        /// </summary>
        /// <param name="primaryIp">primaryIp</param>
        /// <param name="action">action</param>
        [JsonConstructor]
        public CreatePrimaryIpResponse(PrimaryIP primaryIp, Option<Action?> action = default)
        {
            PrimaryIp = primaryIp;
            ActionOption = action;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PrimaryIp
        /// </summary>
        [JsonPropertyName("primary_ip")]
        public PrimaryIP PrimaryIp { get; set; }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Action?> ActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public Action? Action { get { return this.ActionOption; } set { this.ActionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePrimaryIpResponse {\n");
            sb.Append("  PrimaryIp: ").Append(PrimaryIp).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePrimaryIpResponse" />
    /// </summary>
    public class CreatePrimaryIpResponseJsonConverter : JsonConverter<CreatePrimaryIpResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePrimaryIpResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePrimaryIpResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PrimaryIP?> primaryIp = default;
            Option<Action?> action = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "primary_ip":
                            primaryIp = new Option<PrimaryIP?>(JsonSerializer.Deserialize<PrimaryIP>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "action":
                            action = new Option<Action?>(JsonSerializer.Deserialize<Action>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!primaryIp.IsSet)
                throw new ArgumentException("Property is required for class CreatePrimaryIpResponse.", nameof(primaryIp));

            if (primaryIp.IsSet && primaryIp.Value == null)
                throw new ArgumentNullException(nameof(primaryIp), "Property is not nullable for class CreatePrimaryIpResponse.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class CreatePrimaryIpResponse.");

            return new CreatePrimaryIpResponse(primaryIp.Value!, action);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePrimaryIpResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPrimaryIpResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePrimaryIpResponse createPrimaryIpResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPrimaryIpResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePrimaryIpResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPrimaryIpResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePrimaryIpResponse createPrimaryIpResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPrimaryIpResponse.PrimaryIp == null)
                throw new ArgumentNullException(nameof(createPrimaryIpResponse.PrimaryIp), "Property is required for class CreatePrimaryIpResponse.");

            if (createPrimaryIpResponse.ActionOption.IsSet && createPrimaryIpResponse.Action == null)
                throw new ArgumentNullException(nameof(createPrimaryIpResponse.Action), "Property is required for class CreatePrimaryIpResponse.");

            writer.WritePropertyName("primary_ip");
            JsonSerializer.Serialize(writer, createPrimaryIpResponse.PrimaryIp, jsonSerializerOptions);
            if (createPrimaryIpResponse.ActionOption.IsSet)
            {
                writer.WritePropertyName("action");
                JsonSerializer.Serialize(writer, createPrimaryIpResponse.Action, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The CreatePrimaryIpResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CreatePrimaryIpResponse))]
    public partial class CreatePrimaryIpResponseSerializationContext : JsonSerializerContext { }
}
